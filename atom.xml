<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Helloworldwuyuze&#39;s Blog</title>
  
  <subtitle>有些遗憾要学会放下，生活无需太多的行囊</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-04-01T14:23:50.867Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Wu Yuze</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>树上分治</title>
    <link href="http://example.com/2024/04/01/%E6%A0%91%E4%B8%8A%E5%88%86%E6%B2%BB%20copy/"/>
    <id>http://example.com/2024/04/01/%E6%A0%91%E4%B8%8A%E5%88%86%E6%B2%BB%20copy/</id>
    <published>2024-04-01T14:23:21.000Z</published>
    <updated>2024-04-01T14:23:50.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树上分治"><a href="#树上分治" class="headerlink" title="树上分治"></a>树上分治</h1><h2 id="点分治"><a href="#点分治" class="headerlink" title="点分治"></a>点分治</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>类似于链表中的二分，链表作为树的一种特殊形式，那么我们是否可以把链表中的二分扩展到树上，完成树上一些关于路径的问题呢？于是我们就引入了 <strong>点分治</strong> 这个算法。具体地，点分治是通过有一定技巧地枚举路径的必经点，然后不重不漏地计算出所有路径的贡献。</p><p>那么如果我们普通枚举，不仅时间复杂度会变成 $O(n^2)$，连正确性都很难保证，这是因为普通枚举很难保证不重不漏。但是点分治给出了一种方法，使得复杂度在 $O(n\log n)$ 的情况下能够正确的处理问题。</p><p>类比链表，链表是通过枚举中点来把需要枚举的区间分成等大的两份，再通过该点是否符合题意，结合整个决策的单调性来判断临界点，在严格 $O(\log n)$ 内解决问题。那么我们在点分治的时候能不能也找到一个方案使得每次至少将问题规模缩小一半呢？这不禁让我们联想到一个概念：<strong>树的重心</strong>。</p><blockquote><h4 id="树的重心"><a href="#树的重心" class="headerlink" title="树的重心"></a>树的重心</h4><p>对于一棵树，若树上的一个点 $x$ 满足：对于 $\forall y$，都有 $mx_x\le mx_y$，则称点 $x$ 是该树的一个重心。</p><p>其中 $mx_u&#x3D;\max\limits_{\exist edge&#x3D;(u,v)} siz_v$。</p></blockquote><p>也就是说树的重心其实是最大子树大小最小的节点。通过定义，我们在树上节点 $n\rightarrow \infty$ 时能够证明一下几个性质：</p><h4 id="性质-1"><a href="#性质-1" class="headerlink" title="性质 1"></a>性质 1</h4><p>对于一棵树，若 $x$ 是树的重心，那么至少存在两个节点与 $x$ 直接相连。</p><blockquote><h4 id="证明-1"><a href="#证明-1" class="headerlink" title="证明 1"></a>证明 1</h4><p>若 $x$ 是重心且只有一个节点与 $x$ 相连，那么设 $y$ 是那个节点，那么 $mx_y$ 的最大值也是 $mx_x-1$，因此 $y$ 更优。</p></blockquote><h4 id="性质-2"><a href="#性质-2" class="headerlink" title="性质 2"></a>性质 2</h4><p>对于一棵树，如果 $x$ 是它的重心，那么对于 $\forall y\in son_x$ 都满足 $siz_y\le \frac{siz_x}{2}$。</p><blockquote><h4 id="证明-2"><a href="#证明-2" class="headerlink" title="证明 2"></a>证明 2</h4><p>同样地，对于 $x$ 是树的重心，若存在它的一个儿子 $y$ 满足 $siz_y\ge \frac{siz_x}{2}$，不难得到 $siz_x-siz_y\le \frac{siz_x}{2}$，也就是说，整棵子树除去 $y$ 后的大小小于 $\frac{siz_x}{2}$，因此 $mx_y\le\min{siz_x-siz_y,siz_y-1}\le mx_x$，所以 $y$ 会比 $x$ 更优。</p></blockquote><p>那么通过这两条性质，我们能够总结出复杂度对的原因：</p><p>对于一个根节点 $u$，在经过 $O(siz)$ 处理完当层的信息之后，我们进行递归时问题规模总会缩小一半，也就是说，它的递归层数最多为 $O(\log n)$ 次，每一次都会使用 $\sum siz_{root}$ 的复杂度处理信息，也就是 $O(n)$，于是复杂度就是 $O(n\log n)$。当然，复杂度也会出现处理一层是 $n\log n$ 的情况，但总体 $n\log^2 n$ 的复杂度也基本可以接受。</p><p>一种更好的理解方法是当树退化成链的时候它就是二分。</p><h3 id="统计信息"><a href="#统计信息" class="headerlink" title="统计信息"></a>统计信息</h3><p>在递归到一定层次的时候，我们需要维护当前层的信息。考虑怎么样维护信息能够保证不重不漏。</p><p>考虑如果维护的路径全部都在一个子树内部，那么递归到该子树的时候一定还会处理到这条边，因此我们只需要处理跨子树的边，换一种说法，就是经过根节点的边。这样也大大方便了我们的统计工作。我们只需要以 $root$ 为根节点，以已经处理过的根节点作为分界对子树内求出需要的信息即可。</p><p>因为经过根节点，因此路径可以分为由儿子朝根节点的上行边和由根节点到儿子的下行边。因此在处理路径的时候需要快速对这两种边进行匹配。在匹配的时候往往会用到双指针、李超线段树等技巧，这也大概是点分治唯一需要改改板子的地方。</p><h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><ol><li>拿到根节点开始初始化要处理的信息。</li><li>处理出来根节点下的信息，并且进行匹配。</li><li>寻找每个子树的新的根节点并继续点分治，重复 1 过程。</li></ol><h2 id="点分树"><a href="#点分树" class="headerlink" title="点分树"></a>点分树</h2><p>对于树上关于路径单词路径的问题，我们可以使用点分治很好地完成，但是对于需要修改并且对此询问的的问题，并且要求在线的，我们就可以用点分树进行求解。</p><h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p>对于多次询问，我们需要一遍又一遍地进行点分治，但是我们不难发现，处理重心的过程是会重复很多遍的。但对于修改操作，我们又不得不重新计算每个节点的贡献是多少。因此总需要每次重新点分治。</p><p>我们发现，对于一个点 $u$，需要用到 $u$ 点信息的地方只有所有包含 $u$ 的子树，也就是说，在点分治的过程中，由于树的结构不会改变，每次包含 $u$ 节点的子树也就不会改变，而且这个数量级是 $\log n$ 的。也就是说，改变一个点 $u$，受到影响的最多只有 $\log n$ 个点。</p><p>因此，很自然地，我们想到了维护点分树的结构。具体地，我们把原来的树进行重构，让一个节点的 $fa$ 为点分治过程中它的上一层重心。举个栗子：</p><p><img src="/dfs1.png"></p><p>对于这个图，点分治的顺序是 $1, 3, 4, 5, 6, 8, 2, 9, 13, 10, 11, 12, 14, 15, 16$。于是，我们建立以下的 $fa$ 关系：</p><table><thead><tr><th align="right">节点</th><th align="right">1</th><th align="right">2</th><th align="right">3</th><th align="right">4</th><th align="right">5</th><th align="right">6</th><th align="right">8</th><th align="right">9</th><th align="right">10</th><th align="right">11</th><th align="right">12</th><th align="right">13</th><th align="right">14</th><th align="right">15</th><th align="right">16</th></tr></thead><tbody><tr><td align="right">父亲</td><td align="right">0</td><td align="right">8</td><td align="right">1</td><td align="right">3</td><td align="right">4</td><td align="right">4</td><td align="right">3</td><td align="right">8</td><td align="right">13</td><td align="right">10</td><td align="right">10</td><td align="right">11</td><td align="right">13</td><td align="right">13</td><td align="right">13</td></tr></tbody></table><p>这样，我们得到了每次点分治 <strong>一直遵循的递归顺序</strong>，这大大方便了我们模拟点分治的过程。于是，我们可以建出下图：</p><p><img src="/dfs2.png"></p><p>（红边是重构树上的边，黑色边是原来的边）</p><p>通过上述的分析以及我们的栗子可以得到以下两条性质：</p><h4 id="性质-1-1"><a href="#性质-1-1" class="headerlink" title="性质 1"></a>性质 1</h4><p>重构树的层数不超过 $\log n$。</p><p>这是一条显然的性质，已经在点分治中说明。但是这却可以引申出许多性质来帮助我们做题：</p><h4 id="推论-1"><a href="#推论-1" class="headerlink" title="推论 1"></a>推论 1</h4><p>如果我们维护 $n$ 个 <code>vector</code>，每个动态数组中存储所有儿子的信息，那么空间复杂度是 $O(n\log n)$。</p><blockquote><h4 id="证明-1-1"><a href="#证明-1-1" class="headerlink" title="证明 1"></a>证明 1</h4><p>由于深度不超过 $\log n$，每个节点又只会被它的祖先统计到，因此每个节点最多被通缉 $\log n$ 次，也就是 $O(n\log n)$ 的空间复杂度。</p></blockquote><p>于是，一些普通的树上很不对的 <strong>暴力</strong> 做法就可以在点分树上进行爬父亲操作一步步修改，只要单词修改复杂度可以接受，那么无非再加上一个 $\log$。</p><h4 id="性质-2-1"><a href="#性质-2-1" class="headerlink" title="性质 2"></a>性质 2</h4><p>对于原树上的两个点 $(u,v)$，它们在重构树上的最近公共祖先 $lca$ 一定在原树 $u\to v$ 的路径上。</p><blockquote><h4 id="证明-2-1"><a href="#证明-2-1" class="headerlink" title="证明 2"></a>证明 2</h4><p>考虑在重构树上的最近公共祖先一定是把两个节点分到两个子树内的深度最低的那个点，也就是说，从此开始 $u,v$ 就不在一个子树内了。显然，只有 $u\to v$ 的路径上的节点可以做到这一点。</p></blockquote><p>于是我们又可以得到一个重要推论：</p><h4 id="推论-2"><a href="#推论-2" class="headerlink" title="推论 2"></a>推论 2</h4><p>对于重构树上的两个点 $u,v$，若 $lca$ 为它们的最近公共祖先，它们在原树上的距离等于 $dis(u,lca)+dis(lca,v)$。</p><p>于是乎，我们对于点分树的基本思路已经掌握的差不多了，它基于点分治，支持单点修改和区间查询操作，复杂度一般在 $O(n\log^2 n)$ 量级。</p><h3 id="模板题-P6329"><a href="#模板题-P6329" class="headerlink" title="模板题 P6329"></a>模板题 P6329</h3><h4 id="题目传送门。"><a href="#题目传送门。" class="headerlink" title="题目传送门。"></a><a href="https://www.luogu.com.cn/problem/P6329">题目传送门。</a></h4><p>我们考虑在点分树上维护两个线段树，一个是 $t1[x][i]$ 表示与 $x$ 节点距离为 $i$ 的点的权值和。另一个 $t2[x][i]$ 表示 $x$ 节点在重构树上的子树内距离重构树上 $x$ 的父亲为 $i$ 的点的权值和。于是修改操作就是从 $x$ 开始，每次跳它重构树上的父亲，若 $x$ 与当前节点的距离 $dis$，则修改 $t1[x][dis]$，$t2$ 类比修改即可。对于查询操作，我们设 $x$ 与当前节点 $u$ 距离为 $dis$，那么就加上 $t1[u][k-dis]-t2[son][k-dis]$ 即可。其中 $son$ 表示 $u$ 在 $x$ 方向上的子树。这是因为 $x$ 方向上的子树内部已经被计算过了，需要容斥减掉。特别地，对于节点 $x$，直接加上 $t1[x][k]$ 即可。</p><p>关于为什么一定需要两个数组。很多学习者都会直觉性地认为 $x$ 到 $fa$ 无非就是多一个 $dis(x,fa)$，但别忘了，对于 $x$ 子树内的节点 $y$ 来说，$dis(fa,y)\not &#x3D;dis(x,y)+dis(y,fa)$，因此需要另行计算。</p><p>初始化时，对于每个节点遍历它的子树，时间复杂度为 $O(n\log^2 n)$，然后一次修改或查询都是 $O(log^2 n)$ 的。因此总复杂度 $((n+m)\log^2 n)$。</p><p>注意，本题使用动态开点线段树时一定要计算好树的大小之后再进行 <code>udpate</code>，不要将范围设成 $[1,n]$，否则可能会被卡。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DBG cerr &lt;&lt; __LINE__ &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; __FUNCTION__ &lt;&lt; endl</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DRE default_random_engine</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UID uniform_int_distribution</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 Y1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pi acos(-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> eps (1e-8)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,PII&gt; PIII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,a[N],lastans;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> tc&#123;</span><br><span class="line">    <span class="type">int</span> siz[N],son[N],top[N],dep[N],fa[N];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fat)</span></span>&#123;</span><br><span class="line">        siz[x]=<span class="number">1</span>, fa[x]=fat, dep[x]=dep[fat]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="type">int</span> y=g[x][i];</span><br><span class="line">            <span class="keyword">if</span>(y==fat)  <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">dfs1</span>(y,x);</span><br><span class="line">            siz[x]+=siz[y];</span><br><span class="line">            <span class="keyword">if</span>(siz[y]&gt;siz[son[x]])  son[x]=y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> tp)</span></span>&#123;</span><br><span class="line">        top[x]=tp;</span><br><span class="line">        <span class="keyword">if</span>(son[x])  <span class="built_in">dfs2</span>(son[x],tp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="type">int</span> y=g[x][i];</span><br><span class="line">            <span class="keyword">if</span>(y==fa[x]||y==son[x])  <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">dfs2</span>(y,y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">            <span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">            x=fa[top[x]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dep[x]&gt;dep[y])   <span class="built_in">swap</span>(x,y);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dis</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> l=<span class="built_in">lca</span>(x,y);</span><br><span class="line">        <span class="keyword">return</span> dep[x]+dep[y]<span class="number">-2</span>*dep[l];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegTree</span>&#123;</span><br><span class="line">    <span class="type">int</span> ls[N&lt;&lt;<span class="number">5</span>], rs[N&lt;&lt;<span class="number">5</span>], sum[N&lt;&lt;<span class="number">5</span>], root[N], idx;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> p)</span></span>&#123; sum[p]=sum[ls[p]]+sum[rs[p]]; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> &amp;p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!p) p=++idx;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123; sum[p]+=k; <span class="keyword">return</span> ;&#125;</span><br><span class="line">        <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=mid)  <span class="built_in">update</span>(ls[p],l,mid,x,k);</span><br><span class="line">        <span class="keyword">else</span>    <span class="built_in">update</span>(rs[p],mid+<span class="number">1</span>,r,x,k);</span><br><span class="line">        <span class="built_in">push_up</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> left,<span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!p)  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(left&lt;=l&amp;&amp;r&lt;=right)   <span class="keyword">return</span> sum[p];</span><br><span class="line">        <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>, res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(left&lt;=mid)   res+=<span class="built_in">query</span>(ls[p],l,mid,left,right);</span><br><span class="line">        <span class="keyword">if</span>(right&gt;mid)   res+=<span class="built_in">query</span>(rs[p],mid+<span class="number">1</span>,r,left,right);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;t1,t2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> build&#123;</span><br><span class="line">    <span class="type">int</span> dfa[N],maxdep[N],root,maxx[N],siz[N],sum,maxdep1[N];</span><br><span class="line">    <span class="type">bool</span> vis[N];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">calsiz</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">        siz[x]=<span class="number">1</span>, maxx[x]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="type">int</span> y=g[x][i];</span><br><span class="line">            <span class="keyword">if</span>(y==fa||vis[y])   <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">calsiz</span>(y,x);</span><br><span class="line">            siz[x]+=siz[y], maxx[x]=<span class="built_in">max</span>(maxx[x],siz[y]);</span><br><span class="line">        &#125;</span><br><span class="line">        maxx[x]=<span class="built_in">max</span>(maxx[x],sum-siz[x]);</span><br><span class="line">        <span class="keyword">if</span>(maxx[x]&lt;maxx[root])  root=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> dis=tc::<span class="built_in">dis</span>(x,root), dis1=tc::<span class="built_in">dis</span>(x,dfa[root]);</span><br><span class="line">        maxdep[root]=<span class="built_in">max</span>(maxdep[root],dis), maxdep1[root]=<span class="built_in">max</span>(maxdep1[root],dis1);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="type">int</span> y=g[x][i];</span><br><span class="line">            <span class="keyword">if</span>(y==fa||vis[y])   <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(y,x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> dis=tc::<span class="built_in">dis</span>(x,root), dis1=tc::<span class="built_in">dis</span>(x,dfa[root]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="type">int</span> y=g[x][i];</span><br><span class="line">            <span class="keyword">if</span>(y==fa||vis[y])   <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">dfs1</span>(y,x);</span><br><span class="line">        &#125;</span><br><span class="line">        t1.<span class="built_in">update</span>(t1.root[root],<span class="number">0</span>,maxdep[root],dis,a[x]);</span><br><span class="line">        t2.<span class="built_in">update</span>(t2.root[root],<span class="number">0</span>,maxdep1[root],dis1,a[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfz</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        vis[x]=<span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(x,<span class="number">0</span>); <span class="built_in">dfs1</span>(x,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="type">int</span> y=g[x][i];</span><br><span class="line">            <span class="keyword">if</span>(vis[y])  <span class="keyword">continue</span>;</span><br><span class="line">            sum=siz[y], maxx[root=<span class="number">0</span>]=INF;</span><br><span class="line">            <span class="built_in">calsiz</span>(y,<span class="number">-1</span>), <span class="built_in">calsiz</span>(root,<span class="number">-1</span>);</span><br><span class="line">            dfa[root]=x;</span><br><span class="line">            <span class="built_in">dfz</span>(root);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k,<span class="type">int</span> root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(build::dfa[x]==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="type">int</span> dis1=tc::<span class="built_in">dis</span>(x,root);</span><br><span class="line">        t1.<span class="built_in">update</span>(t1.root[x],<span class="number">0</span>,build::maxdep[x],dis1,k);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> dis1=tc::<span class="built_in">dis</span>(x,root), dis2=tc::<span class="built_in">dis</span>(build::dfa[x],root);</span><br><span class="line">    t1.<span class="built_in">update</span>(t1.root[x],<span class="number">0</span>,build::maxdep[x],dis1,k);</span><br><span class="line">    t2.<span class="built_in">update</span>(t2.root[x],<span class="number">0</span>,build::maxdep1[x],dis2,k);</span><br><span class="line">    <span class="built_in">update</span>(build::dfa[x],k,root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k,<span class="type">int</span> son,<span class="type">int</span> root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> dis=tc::<span class="built_in">dis</span>(x,root);</span><br><span class="line">    <span class="keyword">return</span> t1.<span class="built_in">query</span>(t1.root[x],<span class="number">0</span>,build::maxdep[x],<span class="number">0</span>,<span class="built_in">min</span>(build::maxdep[x],k-dis))-t2.<span class="built_in">query</span>(t2.root[son],<span class="number">0</span>,build::maxdep1[son],<span class="number">0</span>,<span class="built_in">min</span>(build::maxdep1[son],k-dis))+<span class="built_in">query</span>(build::dfa[x],k,x,root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)    cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x,y;i&lt;n;++i)    cin&gt;&gt;x&gt;&gt;y, g[x].<span class="built_in">pb</span>(y), g[y].<span class="built_in">pb</span>(x);</span><br><span class="line">    tc::<span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>), tc::<span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    build::sum=n, build::maxx[build::root=<span class="number">0</span>]=INF;</span><br><span class="line">    build::<span class="built_in">calsiz</span>(<span class="number">1</span>,<span class="number">-1</span>), build::<span class="built_in">calsiz</span>(build::root,<span class="number">-1</span>);</span><br><span class="line">    build::dfa[build::root]=<span class="number">0</span>; build::<span class="built_in">dfz</span>(build::root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> op,x,y;</span><br><span class="line">        cin&gt;&gt;op&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        x^=lastans, y^=lastans;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">0</span>)&#123;</span><br><span class="line">            lastans=t1.<span class="built_in">query</span>(t1.root[x],<span class="number">0</span>,build::maxdep[x],<span class="number">0</span>,<span class="built_in">min</span>(build::maxdep[x],y))+<span class="built_in">query</span>(build::dfa[x],y,x,x);</span><br><span class="line">            cout&lt;&lt;lastans&lt;&lt;endl;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">update</span>(x,y-a[x],x);</span><br><span class="line">            a[x]=y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题讲解"><a href="#习题讲解" class="headerlink" title="习题讲解"></a>习题讲解</h2><h3 id="P3714-BJOI2017-树的难题"><a href="#P3714-BJOI2017-树的难题" class="headerlink" title="P3714 [BJOI2017] 树的难题 "></a><center><a href="https://www.luogu.com.cn/problem/P3714">P3714 [BJOI2017] 树的难题</a> </center></h3><h4 id="点分治-线段树"><a href="#点分治-线段树" class="headerlink" title=" 点分治+线段树 "></a><center> 点分治+线段树 </center></h4><p>树上，路径问题，于是一眼点分治，这里维护的是不排序去重后的颜色价值和，求路径价值的时候非常容易，一遍 <code>DFS</code> 即可求出，但是考虑到根节点的颜色情况，我们不得不多记录一些东西。</p><p>首先，显然我们需要对于根节点到它的儿子路径上颜色相同的节点进行特殊处理，也就是，我们需要对于根节点到当前重心颜色一致的路径减去一遍该颜色的贡献，于是，我们考虑相同颜色放在一起讨论，于是就得到了第一步：</p><p>首先把 $u$ 的所有儿子按照颜色为第一关键字排序，以保证相同颜色在连续的区间内进行。</p><p>对于遍历到的当前颜色，我们需要开一棵线段树来维护它的最大值，然后对于全局（不包括该颜色），我们需要一颗线段树来维护最大值，于是在查询的时候，就需要取两次 <code>max</code>:（这里需要规定范围在 $[l,r]$ 内，因此需要规定区间查询。）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ans=<span class="built_in">max</span>(ans,mx[sub[j]]+col.<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,<span class="built_in">max</span>(<span class="number">1ll</span>,L-sub[j]),R-sub[j])-val[color]);</span><br><span class="line">ans=<span class="built_in">max</span>(ans,mx[sub[j]]+gene.<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,<span class="built_in">max</span>(<span class="number">1ll</span>,L-sub[j]),R-sub[j]));</span><br></pre></td></tr></table></figure><p>注意，每一次处理完一个子树之后需要把该子树信息合并到该颜色的线段树中去，而且在该颜色处理完之后需要把贡献合并到当前重心上面去。并且一定注意每次精准清空所有数组！</p><p>这些大概就是本题思路，但是本题思路不难，只要想到排序就会了，但是代码极其难写，我写了两个版本，第一个版本不知道为啥莫名其妙地 $\text{MLE}$，极其烦人，下面强调几个易错点：</p><ol><li>线段树的范围一定要写对，最好是在区间 $[1,maxdep]$ 上进行存储，当然直接 $[1,n]$ 也问题不大。注意一定是 $1ll$ 与 $L-sub[j]$ 取 <code>max</code> 而非 $0$，否则可能会导致 $\text{TLE}$ 或 $\text{MLE}$。</li><li>精准清空的时候一定注意全部清空，仔细检查自己是否有遗漏数组忘记清空。对于线段树内清空也是如此。</li><li>所有的数组初始化的时候要初始化成 $-\infty$，包括 <code>ans</code>，否则会导致负数答案变成 $0$。</li></ol><p>下面给出代码：（这个代码本来是 $90pts$，<code>Wa on test #6</code>，如果有大佬可以帮忙调一调，我是特判了第六个点过的&#x2F;bx&#x2F;bx）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;random&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DBG cerr &lt;&lt; __LINE__ &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; __FUNCTION__ &lt;&lt; endl</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DRE default_random_engine</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UID uniform_int_distribution</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 Y1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pi acos(-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> eps (1e-8)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,PII&gt; PIII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,L,R,ans=-INF;</span><br><span class="line"><span class="type">int</span> val[N];</span><br><span class="line">vector&lt;PII&gt; g[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Seg</span>&#123;</span><br><span class="line"><span class="type">int</span> maxx[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; record;</span><br><span class="line"><span class="type">bool</span> flag[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i:record)flag[i]=<span class="literal">false</span>, maxx[i]=-INF;</span><br><span class="line">record.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!flag[p])flag[p]=<span class="literal">true</span>, record.<span class="built_in">pb</span>(p);</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123; maxx[p]=<span class="built_in">max</span>(maxx[p],k); <span class="keyword">return</span> ;&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)<span class="built_in">update</span>(p&lt;&lt;<span class="number">1</span>,l,mid,x,k);</span><br><span class="line"><span class="keyword">else</span><span class="built_in">update</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x,k);</span><br><span class="line">maxx[p]=<span class="built_in">max</span>(maxx[p&lt;&lt;<span class="number">1</span>],maxx[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> left,<span class="type">int</span> right)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(left&lt;=l&amp;&amp;r&lt;=right)<span class="keyword">return</span> maxx[p];</span><br><span class="line"><span class="type">int</span> res=-INF, mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(left&lt;=mid)res=<span class="built_in">max</span>(res,<span class="built_in">query</span>(p&lt;&lt;<span class="number">1</span>,l,mid,left,right));</span><br><span class="line"><span class="keyword">if</span>(right&gt;mid)res=<span class="built_in">max</span>(res,<span class="built_in">query</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,left,right));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sum, maxx[N], siz[N], root;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">calsiz</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">siz[x]=<span class="number">1</span>, maxx[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(PII y:g[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[y.se]||y.se==fa)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">calsiz</span>(y.se,x);</span><br><span class="line">siz[x]+=siz[y.se], maxx[x]=<span class="built_in">max</span>(maxx[x],siz[y.se]);</span><br><span class="line">&#125;</span><br><span class="line">maxx[x]=<span class="built_in">max</span>(maxx[x],sum-siz[x]);</span><br><span class="line"><span class="keyword">if</span>(maxx[x]&lt;maxx[root])root=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Seg col, gene;</span><br><span class="line"><span class="type">int</span> mx[N],mxcol[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; sub, color, ge;</span><br><span class="line"><span class="type">bool</span> fs[N], fcol[N], fge[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">caldis</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> dep,<span class="type">int</span> value,<span class="type">int</span> lst)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep&gt;=R)<span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(!fs[dep])fs[dep]=<span class="literal">true</span>, sub.<span class="built_in">pb</span>(dep);</span><br><span class="line">mx[dep]=<span class="built_in">max</span>(mx[dep],value);</span><br><span class="line"><span class="keyword">for</span>(PII y:g[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(y.se==fa||vis[y.se])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">caldis</span>(y.se,x,dep+<span class="number">1</span>,value+(lst!=y.fi)*val[y.fi],y.fi);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfz</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">vis[x]=<span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> lst=<span class="number">0</span>;</span><br><span class="line"><span class="comment">// cout&lt;&lt;&quot;###&quot;&lt;&lt;x&lt;&lt;&quot;###&quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">for</span>(PII y:g[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[y.se])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">caldis</span>(y.se,x,<span class="number">1</span>,val[y.fi],y.fi);</span><br><span class="line"><span class="comment">// cout&lt;&lt;&quot;##&quot;&lt;&lt;y.se&lt;&lt;&quot; &quot;&lt;&lt;y.fi&lt;&lt;&quot;##&quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> dep:sub)</span><br><span class="line"><span class="keyword">if</span>(dep&gt;=L&amp;&amp;dep&lt;=R)ans=<span class="built_in">max</span>(ans,mx[dep]);</span><br><span class="line"><span class="keyword">if</span>(lst!=y.fi)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> dep:color)&#123;</span><br><span class="line"><span class="keyword">if</span>(!fge[dep])ge.<span class="built_in">pb</span>(dep), fge[dep]=<span class="literal">true</span>;</span><br><span class="line">gene.<span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="built_in">max</span>(n,R),dep,mxcol[dep]);</span><br><span class="line">fcol[dep]=<span class="literal">false</span>, mxcol[dep]=-INF;</span><br><span class="line">&#125;</span><br><span class="line">lst=y.fi; col.<span class="built_in">init</span>();</span><br><span class="line">color.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> dep:sub)&#123;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,gene.<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="built_in">max</span>(n,R),<span class="built_in">max</span>(<span class="number">1ll</span>,L-dep),R-dep)+mx[dep]);</span><br><span class="line">ans=<span class="built_in">max</span>(ans,col.<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="built_in">max</span>(n,R),<span class="built_in">max</span>(<span class="number">1ll</span>,L-dep),R-dep)+mx[dep]-val[lst]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cout&lt;&lt;&quot;## sub ##&quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">// for(int dep:sub)cout&lt;&lt;dep&lt;&lt;&quot; &quot;&lt;&lt;mx[dep]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;&quot;## col ##&quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">// for(int dep:color)cout&lt;&lt;dep&lt;&lt;&quot; &quot;&lt;&lt;mxcol[dep]&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> dep:sub)&#123;</span><br><span class="line"><span class="keyword">if</span>(!fcol[dep])fcol[dep]=<span class="literal">true</span>, color.<span class="built_in">pb</span>(dep);</span><br><span class="line">col.<span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="built_in">max</span>(n,R),dep,mx[dep]); mxcol[dep]=<span class="built_in">max</span>(mxcol[dep],mx[dep]);</span><br><span class="line">mx[dep]=-INF, fs[dep]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">sub.<span class="built_in">clear</span>();</span><br><span class="line"><span class="comment">// cout&lt;&lt;ans&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> dep:color)fcol[dep]=<span class="literal">false</span>, mxcol[dep]=-INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> dep:ge)fge[dep]=<span class="literal">false</span>;</span><br><span class="line">ge.<span class="built_in">clear</span>(); color.<span class="built_in">clear</span>(); gene.<span class="built_in">init</span>(); col.<span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">for</span>(PII y:g[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[y.se])<span class="keyword">continue</span>;</span><br><span class="line">sum=siz[y.se]; maxx[root=<span class="number">0</span>]=INF;</span><br><span class="line"><span class="built_in">calsiz</span>(<span class="number">1</span>,<span class="number">-1</span>), <span class="built_in">calsiz</span>(root,<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">dfz</span>(root);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;L&gt;&gt;R;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">10</span>)&#123;cout&lt;&lt;<span class="number">32981</span>&lt;&lt;endl; <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)mx[i]=mxcol[i]=-INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n&lt;&lt;<span class="number">2</span>;++i)</span><br><span class="line">col.maxx[i]=gene.maxx[i]=-INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)cin&gt;&gt;val[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x,y,z;i&lt;n;++i)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">g[x].<span class="built_in">pb</span>(<span class="built_in">mk</span>(z,y)), g[y].<span class="built_in">pb</span>(<span class="built_in">mk</span>(z,x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="built_in">sort</span>(g[i].<span class="built_in">begin</span>(), g[i].<span class="built_in">end</span>());</span><br><span class="line">sum=n, maxx[root=<span class="number">0</span>]=INF;</span><br><span class="line"><span class="built_in">calsiz</span>(<span class="number">1</span>,<span class="number">-1</span>), <span class="built_in">calsiz</span>(root,<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">dfz</span>(root);</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P7215-JOISC2020-首都"><a href="#P7215-JOISC2020-首都" class="headerlink" title=" P7215 [JOISC2020] 首都 "></a><center> <a href="https://www.luogu.com.cn/problem/P7215">P7215 [JOISC2020] 首都</a> </cneter></h3><h4 id="点分治-队列优化暴力"><a href="#点分治-队列优化暴力" class="headerlink" title=" 点分治+队列优化暴力 "></a><center> 点分治+队列优化暴力 </center></h4><p>首先考虑朴素暴力 $O(n^3)$ 做法。很容易想到，我们可以枚举首都的城市 $i$，然后找到所有 $i$ 节点，把路径上的节点的颜色再进行修改，直到不再包含需要修改的节点为止。显然枚举 $O(n)$，然后暴力修改是 $O(n^2)$ 的。</p><p>这里很多同学会进入一个误区，即我们只需要修改所有 $i$ 节点之间的路径，但这是一个明显的错误，下面的样例就可以解释这个问题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">input:</span><br><span class="line"><span class="number">6</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="number">4</span> <span class="number">6</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">output:</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>显然，如果我们只修改 $1$ 路径上的节点，我们只需要修改 $2$ 号颜色即可。因为 $1$ 的路径只有 $1\to 2\to 4$ 这一条，但是显然在这条路径上包含的 $2$ 节点需要修改的话会影响到 $5$ 号节点也进行修改，导致 $5$ 与 $1$ 也不在一个联通块上，因此我们还需要修改 $1\to 3\to 5$ 的路径上的 $3$ 号颜色。</p><p>考虑如何优化这个暴力。其实，对于如何修改，我们完全可以做到 $O(n)$，只不过上一个修改的办法太过于暴力。我们假设现在的根节点是 $u$，那么所有与 $u$ 相同颜色的节点到 $u$ 的路径总可以跳 $fa$ 跳到 $u$，因此，我们每次让 $u$ 跳一次 $fa$，如果 $fa$ 节点的颜色未被访问，直接将该颜色的所有节点都修改为 $u$ 的颜色，然后把所有节点都加入到待修改的队列之中。然后在队列中每次取队首重复这个操作，我们发现所有的节点都被我们包含进去了，而且每个节点至多进队出队一次，因此我们做到了 $O(n^2)$ 的暴力（恭喜拿到 ${\LARGE\mathcal{21}}$ 分的好成绩！）</p><p>但是，如果想要拿到全分，还需要一些性质。我们先看特殊性质，也就是树是一条链的时候，这个时候我们考虑贪心，因为对于不包含大区间的可行联通块，总是小区间不比大区间劣（这里 <strong>区间</strong> 指的是一种颜色的左右端点）。如果含有大区间颜色，那么它一定不比那个大区间的颜色更优，因为相当于需要改大区间，因此对于小区间内有大区间颜色的颜色我们可以直接扔掉不管。</p><p>这就给我们一个启示：在树上是不是也可以这样呢？</p><p>首先，为了在不爆复杂度的基础上进行暴力，想到的依然是点分治。对于当前重心 $u$，我们遍历它的每一个子树 $v$，如果子树 $v$ 中包含颜色 $col$，使得存在别的节点 $x$ 不在子树 $v$ 内，且 $color_x&#x3D;col$，则显然需要修改的路径就恢覆盖到当前的重心 $u$，那么它一定不比 $u$ 更优，可以直接舍弃。如果没有这样的节点，那么可以直接暴力计算需要多大代价。</p><p>然而上述论证只证明了我们做的决策一定不劣，但不保证一定最优。因为点分治会遍历到每一个节点，尽管它为根节点的时候可能已经没有子树，但是这不妨碍我们假设它为首都时对代价的计算。或者说，跨子树的颜色我们一定可以在一个重心的时候求到这个答案。这就保证了该算法的正确性。时间复杂度严格 $O(n\log n)$，跑得真的很快！</p><p>这个题不像上个题那么恶心，但是仍然有许多细节需要注意，这里我就直接放代码吧：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DBG cerr &lt;&lt; __LINE__ &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; __FUNCTION__ &lt;&lt; endl</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DRE default_random_engine</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UID uniform_int_distribution</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 Y1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pi acos(-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> eps (1e-8)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,PII&gt; PIII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,k,city[N],minn=INF;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N], col[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sum, root, maxx[N], siz[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">calsiz</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    maxx[x]=<span class="number">0</span>, siz[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">        <span class="type">int</span> y=g[x][i];</span><br><span class="line">        <span class="keyword">if</span>(vis[y]||y==fa)   <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">calsiz</span>(y,x);</span><br><span class="line">        siz[x]+=siz[y], maxx[x]=<span class="built_in">max</span>(maxx[x],siz[y]);</span><br><span class="line">    &#125;</span><br><span class="line">    maxx[x]=<span class="built_in">max</span>(maxx[x],sum-siz[x]);</span><br><span class="line">    <span class="keyword">if</span>(maxx[x]&lt;maxx[root])  root=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> flag[N];</span><br><span class="line"><span class="type">int</span> t[N],fa[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; sub;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">calcol</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fat)</span></span>&#123;</span><br><span class="line">    fa[x]=fat; sub.<span class="built_in">pb</span>(city[x]);</span><br><span class="line">    t[city[x]]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">        <span class="type">int</span> y=g[x][i];</span><br><span class="line">        <span class="keyword">if</span>(y==fat||vis[y])   <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">calcol</span>(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calans</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="type">int</span> nowcol=city[x];</span><br><span class="line">    <span class="keyword">if</span>(col[nowcol].<span class="built_in">size</span>()&gt;t[nowcol])    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;col[nowcol].<span class="built_in">size</span>();++i)</span><br><span class="line">        q.<span class="built_in">push</span>(col[nowcol][i]);</span><br><span class="line">    flag[nowcol]=<span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// for(int i=1;i&lt;=k;++i)</span></span><br><span class="line">    <span class="comment">//     cout&lt;&lt;t[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> now=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        nowcol=city[now];</span><br><span class="line">        <span class="keyword">if</span>(col[nowcol].<span class="built_in">size</span>()&gt;t[nowcol])    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;now&lt;&lt;&quot; &quot;&lt;&lt;fa[now]&lt;&lt;&quot; &quot;&lt;&lt;flag[city[fa[now]]]&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span>(fa[now]&lt;=<span class="number">0</span>||flag[city[fa[now]]]) <span class="keyword">continue</span>;</span><br><span class="line">        ++ans;</span><br><span class="line">        <span class="type">int</span> nxtcol=city[fa[now]];</span><br><span class="line">        flag[nxtcol]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;col[nxtcol].<span class="built_in">size</span>();++i)</span><br><span class="line">            q.<span class="built_in">push</span>(col[nxtcol][i]);</span><br><span class="line">        <span class="comment">// cout&lt;&lt;now&lt;&lt;&quot; &quot;&lt;&lt;nxtcol&lt;&lt;endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfz</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="comment">// cout&lt;&lt;&quot;###&quot;&lt;&lt;x&lt;&lt;&quot;###&quot;&lt;&lt;endl;</span></span><br><span class="line">    vis[x]=<span class="literal">true</span>;</span><br><span class="line">    sub.<span class="built_in">clear</span>();<span class="built_in">calcol</span>(x,<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> ans=<span class="built_in">calans</span>(x);</span><br><span class="line">    <span class="keyword">if</span>(ans!=<span class="number">-1</span>) minn=<span class="built_in">min</span>(minn,ans);</span><br><span class="line">    <span class="comment">// cout&lt;&lt;ans&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;&quot;## sub ##&quot;&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;sub.<span class="built_in">size</span>();++i)</span><br><span class="line">        t[sub[i]]=<span class="number">0</span>, flag[sub[i]]=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">    sub.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">        <span class="type">int</span> y=g[x][i];</span><br><span class="line">        <span class="keyword">if</span>(vis[y])   <span class="keyword">continue</span>;</span><br><span class="line">        sum=siz[y], maxx[root=<span class="number">0</span>]=INF;</span><br><span class="line">        <span class="built_in">calsiz</span>(y,<span class="number">-1</span>), <span class="built_in">calsiz</span>(root,<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">dfz</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x,y;i&lt;n;++i)    cin&gt;&gt;x&gt;&gt;y, g[x].<span class="built_in">pb</span>(y), g[y].<span class="built_in">pb</span>(x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)   cin&gt;&gt;city[i], col[city[i]].<span class="built_in">pb</span>(i);</span><br><span class="line">    <span class="comment">// for(int i=1;i&lt;=k;++i,cout&lt;&lt;endl)</span></span><br><span class="line">    <span class="comment">//     for(int j=0;j&lt;col[i].size();++j)</span></span><br><span class="line">    <span class="comment">//         cout&lt;&lt;col[i][j]&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    sum=n, maxx[root=<span class="number">0</span>]=INF;</span><br><span class="line">    <span class="built_in">calsiz</span>(<span class="number">1</span>,<span class="number">-1</span>), <span class="built_in">calsiz</span>(root,<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">dfz</span>(root);</span><br><span class="line">    cout&lt;&lt;minn&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;树上分治&quot;&gt;&lt;a href=&quot;#树上分治&quot; class=&quot;headerlink&quot; title=&quot;树上分治&quot;&gt;&lt;/a&gt;树上分治&lt;/h1&gt;&lt;h2 id=&quot;点分治&quot;&gt;&lt;a href=&quot;#点分治&quot; class=&quot;headerlink&quot; title=&quot;点分治&quot;&gt;&lt;/a&gt;点分</summary>
      
    
    
    
    
    <category term="算法笔记" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2024/03/25/hello-world/"/>
    <id>http://example.com/2024/03/25/hello-world/</id>
    <published>2024-03-25T15:03:25.742Z</published>
    <updated>2024-03-25T15:03:25.742Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>斜率优化</title>
    <link href="http://example.com/2024/03/25/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    <id>http://example.com/2024/03/25/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/</id>
    <published>2024-03-25T07:20:42.000Z</published>
    <updated>2024-03-25T15:36:18.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前情回顾"><a href="#前情回顾" class="headerlink" title="前情回顾"></a>前情回顾</h1><p>如果对于一个 1D&#x2F;1D 动态规划，即状态一维且递推公式可以化简为 $f_i&#x3D;\max{f_j+w(i,j)}$ 的形式的动态规划，这样的动态规划在 $w(i,j)$ 不含同时与 $i,j$ 相关的函数时可以使用单调队列优化，即可以写成</p><p>$$f_i&#x3D;\max{f_j+h_i+g_j}&#x3D;\max{f_j+g_j}+h_i$$</p><p>时可以使用单调队列优化。</p><p>但是，如果 $w(i,j)$ 中包含同时与 $i$ 和 $j$ 相关的项，在 $j$ 项一次的情况下，可以使用斜率优化来 $O(n)$ 或 $O(\log n)$ 地完成题目。</p><h1 id="一般情况"><a href="#一般情况" class="headerlink" title="一般情况"></a>一般情况</h1><p>对于一般式：</p><p>$$f_i&#x3D;\max{f_j+h_i+g_j-k_ix_j}$$</p><p>我们首先去掉 $\max$：</p><p>$$f_i&#x3D;f_j+h_i+g_j-k_ix_j$$</p><p>将只含有 $j$ 的移到等式左边，其它的移到等式右边：</p><p>$$f_j+g_j&#x3D;k_ix_j-h_i+f_i$$</p><p>在转移 $i$ 项时，我们可以将只含 $i$ 的函数看成常常数，于是计 $b_i&#x3D;-h_i+f_i$，然后又将只含有 $j$ 的函数看成变量，计 $y_j&#x3D;f_j+g_j$，于是式子就变成了我们熟悉的一次方程的形式：</p><p>$$y_j&#x3D;k_ix_j+b_i$$</p><p>其中 $k_i,b_i$ 为常量。</p><p>不难发现，我们想要最大化 $f_i$，就需要最大化 $b_i$，即最大化一次函数的截距。</p><p>考虑如果决策点又无穷多个，即在 $x&lt;i$ 时 $x$ 是连续的，我们考虑什么时候取到截距的最大值。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/znhd1gob.png"></p><p>在这里，直线斜率 $k&#x3D;2$，则在曲线上的一点 $(x_0,y_0)$ 可以把这个直线系唯一确定，即 $y&#x3D;2x+y_0-2x_0$。显然，在直线与曲线相切的时候，即 $\frac{\mathrm{d}y}{\mathrm{d}x}&#x3D;k$ 的时候，发现截距最小。</p><p>同理，不难推出，一条折线上的顶点 $(x_0,y_0)$，当它与前一个点的斜率 $k_1\le k$，且与它后一个点的斜率 $k_2\ge k$ 时，有截距的最小值。同时，向内凹的点是绝对不优的，这保证了斜率优化中斜率序列的单调性，因此一般地，我们可以使用二分查找来实现 $O(n\log n)$ 的转移。</p><p>但同时，如果我们的转移点的斜率单调递增，那么曾经被舍弃掉的 $k$ 再往后一定不会被用到，因此这类似于头出尾进的队列，同时对内元素单调，很自然想到用单调队列继续优化成 $O(n)$。</p><h1 id="Warning-注意事项"><a href="#Warning-注意事项" class="headerlink" title="(Warning!!!) 注意事项"></a><strong>(Warning!!!)</strong> 注意事项</h1><ol><li>再队列中存储的是下标编号，一定再访问时访问 <code>q[head]</code> 和 <code>q[tail]</code>，并且在 <code>+1</code> 时在 <code>head</code> 或 <code>tail</code> 里面加，如 <code>q[head+1]</code>。</li><li>二分时比较 <code>slope</code> 的时候一定要 <code>mid</code> 与 <code>mid+1</code> 的斜率与给定斜率比较。</li><li><code>double</code> 有时候会被 <strong><del>良心</del></strong> 出题人卡精度，因此在比较斜率的时候，当 $x$ 自变量单调递增，完全可以将分母乘到对面进行乘法的比较。</li><li>在横坐标相等的时候注意特判，返回 <code>sgn(Y(y)-Y(x))*INF</code>。</li><li>注意横纵坐标范围会不会爆 <code>double</code> ($15-16$ 位)，如果爆了需要把返回类型改成 <code>long long</code>，只保留一个函数是 <code>double</code>。</li></ol><h1 id="习题讲解"><a href="#习题讲解" class="headerlink" title="习题讲解"></a>习题讲解</h1><h2 id="洛谷-P3648-序列分割"><a href="#洛谷-P3648-序列分割" class="headerlink" title="洛谷 P3648 序列分割"></a>洛谷 P3648 序列分割</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>有序列 $a_n$，要求在这个序列里切 $k$ 刀，每次切会产生两边的联通块的和的乘积的贡献，求最大的贡献，并给出方案。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>首先，一个结论是对于一个切的位置的集合，切的顺序是不重要的。</p><blockquote><p><strong>证明</strong></p><p>首先，对于三个点 $x,y,z$，切两刀，$(x+y)\times z+x\times y&#x3D;$，而 $x\times(y+z)+y\times z&#x3D;x\times y+x\times z+y\times z$。</p><p>于是，若 $n$ 个数是可以的，那么无论第 $n+1$ 刀在最后切显然可以。若在倒数第二刀，那么与原来最后两刀构成三刀关系。以此类推，最后一刀在什么时候切都可以。</p><p>根据数归，证毕。</p></blockquote><p>下面是推式子时间：</p><p>首先设出状态：$f_{i,j}$ 表示在 $i$ 与 $i+1$ 之间切第 $j$ 刀的最大贡献。</p><p>不难写出方程式：</p><p>$$f_{i,k}&#x3D;\min\limits_{j&#x3D;k-1}^{i-1}{f_{j,k-1}+(s_i-s_j)*(s_n-s_i)}$$</p><p>其中 $s_i&#x3D;\sum\limits_{j&#x3D;1}^i a_j$。去掉 $\min$ 并拆开柿子得到：</p><p>$$f_{i,k}&#x3D;f_{j,k-1}+s_is_n+s_is_j-s_ns_j-s_i^2$$</p><p>将 $k$ 这一维滚掉（上一维用 $g_i$ 表示），并且移项得到：</p><p>$$g_j-s_ns_j&#x3D;-s_is_j+s_i^2+f_i-s_is_n$$</p><p>计 $K(i)&#x3D;s_i,X(j)&#x3D;s_j,Y(j)&#x3D;g_j-s_ns_j,B(i)&#x3D;s_i^2+f_i-s_is_n$，于是得到：</p><p>$$Y(j)&#x3D;K(i)X(j)+B(i)$$</p><p>然后就可以愉快地斜率优化啦。</p><p>这个题需要注意几点：</p><ul><li>当 $X(x)&#x3D;X(y)$ 时返回 $sgn(Y(y)-Y(x))*\infty$</li><li><code>double</code> 最多只能到整型的 $15-16$，可能会爆掉，因此 <code>Y</code> 函数需要改成 <code>long long</code> 类型。</li></ul><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">X</span><span class="params">(<span class="type">int</span> x)</span></span>&#123; <span class="keyword">return</span> s[x];&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Y</span><span class="params">(<span class="type">int</span> x)</span></span>&#123; <span class="keyword">return</span> g[x]-s[n]*s[x];&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">slope</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123; <span class="keyword">return</span> <span class="built_in">X</span>(y)==<span class="built_in">X</span>(x)?<span class="number">-1e18</span>:(<span class="built_in">Y</span>(y)-<span class="built_in">Y</span>(x))/(<span class="built_in">X</span>(y)-<span class="built_in">X</span>(x));&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)   cin&gt;&gt;s[i], s[i]+=s[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=k;++j)&#123;</span><br><span class="line">        q[head=tail=<span class="number">1</span>]=j<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=j;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="keyword">while</span>(head&lt;tail&amp;&amp;<span class="built_in">slope</span>(q[head],q[head+<span class="number">1</span>])&gt;=-s[i])   ++head;</span><br><span class="line">            <span class="type">int</span> k=q[head];  f[i]=g[k]+(s[i]-s[k])*(s[n]-s[i]); pre[i][j]=k;</span><br><span class="line">            <span class="keyword">while</span>(head&lt;tail&amp;&amp;<span class="built_in">slope</span>(q[tail],q[tail<span class="number">-1</span>])&lt;=<span class="built_in">slope</span>(q[tail],i))    --tail;</span><br><span class="line">            q[++tail]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)   g[i]=f[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=k;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">if</span>(f[ans]&lt;f[i]) ans=i;</span><br><span class="line">    cout&lt;&lt;f[ans]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">2</span>)&#123;cout&lt;&lt;<span class="number">1</span>&lt;&lt;endl; <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="type">int</span> kk=k;</span><br><span class="line">    <span class="keyword">while</span>(k)   st[k]=ans, ans=pre[ans][k], --k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=kk;++i)   cout&lt;&lt;st[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P5785-SDOI2012-任务安排"><a href="#P5785-SDOI2012-任务安排" class="headerlink" title="P5785 [SDOI2012] 任务安排"></a>P5785 [SDOI2012] 任务安排</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>给定序列 $F_n,T_n$，求划分方案 $a_k$ 表示把 $a_k$ 与 $a_{k}+1$ 分到两个方案，最小化答案</p><p>$$\sum\limits_{i&#x3D;1}^k(\sum\limits_{j&#x3D;a_{i-1}}^{a_i}F_j)(s\times i+\sum_{j&#x3D;1}^{a_i}T_i)$$</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>容易想到，计前缀和 $f_i&#x3D;\sum\limits_{j&#x3D;1}^iF_i,t_i&#x3D;\sum\limits_{j&#x3D;1}^iT_i$，于是式子变成</p><p>$$\sum\limits_{i&#x3D;1}^k(f_{a_i}-f_{a_{i-1}})(s\times i+t_{a_i})$$</p><p>设 $dp_i$ 表示分到第 $i$ 个数的最小费用，不难得出转移方程</p><p>$$dp_i&#x3D;\min\limits_{j&#x3D;1}^{i-1}{dp_j+(f_i-f_j)(c_i\times s+t_i)}$$</p><p>同样操作，去掉 $\min$ 并拆开式子得到：</p><p>$$dp_i&#x3D;dp_j+f_ic_is+f_it_i-f_jc_is-f_jt_i$$</p><p>但是式子里面有一个很烦人的 $c_i$，它表示这个东西是第几组，会影响到 $f_j$ 的选取。但是仔细想想，似乎我们在完成一次分组后就会把后面所有的数都再乘上 $s$，因此我们不妨在 $dp_i$ 加上 $(f_n-f_i)\times s$，这样后面的就提前加进去了，于是得到：</p><p>$$dp_i&#x3D;dp_j+f_is+f_it_i-f_js-f_jt_i+(f_n-f_i)\times s$$</p><p>移项可以得到：</p><p>$$dp+j-f_js&#x3D;t_if_j+dp_i-f_is-f_it_i-(f_n-f_i)*s$$</p><p>按照套路，计 $Y(j)&#x3D;dp+j-f_j,X(j)&#x3D;f_j,K(i)&#x3D;t_i,B(i)&#x3D;dp_i-f_is-f_it_i-(f_n-f_i)*s$，柿子变成：</p><p>$$Y(j)&#x3D;K(i)X(j)+B(i)$$</p><p>愉快地开始斜率优化。但这里注意，斜率 $K(i)$ 并不一定单调递增，于是我们需要二分来查找答案，使用单调栈来维护凸包。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">X</span><span class="params">(<span class="type">int</span> x)</span></span>&#123; <span class="keyword">return</span> f[x];&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Y</span><span class="params">(<span class="type">int</span> x)</span></span>&#123; <span class="keyword">return</span> dp[x]-f[x]*s;&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">slope</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123; <span class="keyword">return</span> (<span class="built_in">Y</span>(y)-<span class="built_in">Y</span>(x))/(<span class="built_in">X</span>(y)-<span class="built_in">X</span>(x));&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowerbound</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">double</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Y</span>(st[mid+<span class="number">1</span>])-<span class="built_in">Y</span>(st[mid])&lt;=k*(<span class="built_in">X</span>(st[mid+<span class="number">1</span>])-<span class="built_in">X</span>(st[mid]))) l=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>    r=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> st[l];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)   cin&gt;&gt;t[i]&gt;&gt;f[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)   f[i]+=f[i<span class="number">-1</span>], t[i]+=t[i<span class="number">-1</span>];</span><br><span class="line">    st[top=<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="type">int</span> j=<span class="built_in">lowerbound</span>(<span class="number">1</span>,top,t[i]);</span><br><span class="line">        dp[i]=dp[j]+(t[i]+s)*(f[i]-f[j])+s*(f[n]-f[i]);</span><br><span class="line">        <span class="keyword">while</span>(top&gt;<span class="number">1</span>&amp;&amp;(<span class="built_in">Y</span>(st[top])-<span class="built_in">Y</span>(st[top<span class="number">-1</span>]))*(<span class="built_in">X</span>(i)-<span class="built_in">X</span>(st[top]))&gt;=(<span class="built_in">Y</span>(i)-<span class="built_in">Y</span>(st[top]))*(<span class="built_in">X</span>(st[top])-<span class="built_in">X</span>(st[top<span class="number">-1</span>])))    --top;</span><br><span class="line">        st[++top]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">    cout&lt;&lt;dp[n]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前情回顾&quot;&gt;&lt;a href=&quot;#前情回顾&quot; class=&quot;headerlink&quot; title=&quot;前情回顾&quot;&gt;&lt;/a&gt;前情回顾&lt;/h1&gt;&lt;p&gt;如果对于一个 1D&amp;#x2F;1D 动态规划，即状态一维且递推公式可以化简为 $f_i&amp;#x3D;&#92;max{f_j+w(i,</summary>
      
    
    
    
    
    <category term="算法笔记" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>At_dp选讲</title>
    <link href="http://example.com/2024/03/25/At_dp/"/>
    <id>http://example.com/2024/03/25/At_dp/</id>
    <published>2024-03-25T07:20:42.000Z</published>
    <updated>2024-03-25T15:36:17.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="At-dp-选讲"><a href="#At-dp-选讲" class="headerlink" title="At_dp 选讲"></a>At_dp 选讲</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这一次做 Atcoder 上的 dp 题目，将26道题都刷了一遍，各个方面都有涉及，但每个都只涉及一到两题，总体来说掌握的不是很扎实，但现将这些东西写成blog巩固一下。</p><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><p>背包问题分为很多种，常见的有01背包、多重背包、完全背包、分组背包等等，问题都是关于给定 $n$ 个限制 $w_i$ 和价值 $v_i$，求在 $\sum w_i\le W$ 的情况下最大化 $\sum v_i$。在这里，Atcoder 上只给出了01背包和它的状态设计优化。</p><h3 id="01背包-Atcoder-dp-d-Knapsack1"><a href="#01背包-Atcoder-dp-d-Knapsack1" class="headerlink" title="01背包 (Atcoder_dp_d Knapsack1)"></a>01背包 (Atcoder_dp_d Knapsack1)</h3><p>对于 $n$ 个物品，每个物品只能取1次，问 $\sum w_i\le W$ 的情况下最大化的 $\sum v_i$。</p><p>考虑我们要用到什么状态，首先需要选到了第几个物品，然后需要知道现在的重量是多少，以免超过 $W$。那么不妨设 $f_{i,j}$ 表示选到第 $i$ 个物品还剩 $j$ 的容量的最大价值，于是显然：</p><p>$$f_{i,j}&#x3D;\max{f_{i-1,j},f_{i-1,j-w_i}+v_i}$$</p><p>同时注意到 $i$ 只与 $i-1$ 有关，因此可以压掉第一维，变成</p><p>$$f_j&#x3D;\max{f_j,f_{j-w_i}+v_i}$$</p><p>注意到此时后面的值需要用到前面的，因此如果先更新前面的会使后面的决策出现错误，因此循环需要从后往前。</p><h2 id="01背包：状态设计优化-Atcoder-dp-e-Knapsack2"><a href="#01背包：状态设计优化-Atcoder-dp-e-Knapsack2" class="headerlink" title="01背包：状态设计优化 (Atcoder_dp_e Knapsack2)"></a>01背包：状态设计优化 (Atcoder_dp_e Knapsack2)</h2><p>注意到此时的 $W$ 来到 $10^6$，而相应的 $v_i$ 是 $10^3$，如果再设 $w$ 为状态就会 $\text{TLE}$，于是很自然的想到可以使用 $v_i$ 来代替 $w_i$，反而将 $w_i$ 存储在数组中。</p><p>因此可以设出状态 $f_i$ 表示价值为 $i$ 的最小重量是多少。这里已经将第一维压掉。那么显然对于 $f_i$，能够写出转移方程</p><p>$$f_i&#x3D;\min{f_i,f_{i-v_i}+w_i}$$</p><p>其中 $f_i$ 注意最初设置为 $\mathrm{INF}$，求答案的时候从后往前遍历 $f_i$ 找到第一个 $f_i\le W$ 的即可。</p><h2 id="拓扑上-DP-Atcoder-dp-g-Longest-Path"><a href="#拓扑上-DP-Atcoder-dp-g-Longest-Path" class="headerlink" title="拓扑上 DP (Atcoder_dp_g Longest Path)"></a>拓扑上 DP (Atcoder_dp_g Longest Path)</h2><p>拓扑上的 $DP$ 有一个显著的特点，也就是图是DAG，这样图上没有环就可以很好地满足动态规划的无后效性。具体地，对于一个点 $u$，可以从所有 $u\in son_v$ 的 $v$ 上转移过来。当 $u$ 的入度变为0，就可以把它入队然后更新它的 $son_u$ 了。如果给的题不是 $\mathrm{DAG}$，如果题目条件允许可以进行 $\mathrm{Tarjan}$ 缩点，然后变成 $\mathrm{DAG}$，之后就可以动态规划了。</p><p>对于这个问题，设 $f_i$ 是终点为 $i$ 的最长路径。那么最开始将 $in_i&#x3D;0$ 的点，不难得到方程</p><p>$$f_u&#x3D;\max\limits_{v \in son_u}{f_u}+1$$</p><p>在拓扑排序的时候进行 $\mathrm{DP}$ 即可。</p><h2 id="期望-DP-Atcoder-dp-j-Sushi"><a href="#期望-DP-Atcoder-dp-j-Sushi" class="headerlink" title="期望 DP (Atcoder_dp_j Sushi)"></a>期望 DP (Atcoder_dp_j Sushi)</h2><p>对于期望 DP，它是一类求概率的动态规划。一般需要倒推概率。（就目前我也不大知道它的具体定义和套路是什么。。。）</p><p>朴素的想法是设 $f_{a_1,a_2,\dots,a_n}$，代表第 $i$ 位还剩下 $a_i$ 个寿司的概率。于是能得到</p><p>$$f_{a_1,a_2,\dots,a_n}&#x3D;1+\frac{1}{n}\sum\limits_{i&#x3D;1}^n f_{a_1,a_2,\dots,\max{a_i-1,0},\dots,a_n}$$</p><p>显然，这是过不了的。我们分析一下状态设计，注意到我们并不关心每个盘子还有几个寿司，我们只需要知道剩下 $i$ 个寿司都有多少盘即可。于是设 $f_{a,b,c,d}$ 表示剩下 $0&#x2F;1&#x2F;2&#x2F;3$ 个寿司的盘子分别有 $a&#x2F;b&#x2F;c&#x2F;d$ 个，于是不难得到</p><p>$$f_{a,b,c,d}&#x3D;1+\frac{a}{n}f_{a,b,c,d}+\frac{b}{n}f_{a+1,b-1,c,d}+\frac{c}{n}f_{a,b+1,c-1,d}+\frac{d}{n}f_{a,b,c+1,d}$$</p><p>移项得到：</p><p>$$\frac{b+c+d}{n}f_{a,b,c,d}&#x3D;1+\frac{b}{n}f_{a+1,b-1,c,d}+\frac{c}{n}f_{a,b+1,c-1,d}+\frac{d}{n}f_{a,b,c+1,d}$$</p><p>然后系数化一：</p><p>$$f_{a,b,c,d}&#x3D;\frac{n}{b+c+d}+\frac{b}{b+c+d}f_{a+1,b-1,c,d}+\frac{c}{b+c+d}f_{a,b+1,c-1,d}+\frac{d}{b+c+d}f_{a,b,c+1,d-1}$$</p><p>但是 $O(n^4)$ 的复杂度还是没法通过本题。但是注意到 $a+b+c+d&#x3D;n$ 是恒定不变的因此可以压掉一位 $a$，正好 $a$ 与转移的系数无关，压掉之后就变成：</p><p>$$f_{b,c,d}&#x3D;\frac{n}{b+c+d}+\frac{b}{b+c+d}f_{b-1,c,d}+\frac{c}{b+c+d}f_{b+1,c-1,d}+\frac{d}{b+c+d}f_{b,c+1,d-1}$$</p><p>然后你就发现 <code>Accept!</code>。</p><h2 id="前缀和优化DP-Atcoder-dp-m-Candies"><a href="#前缀和优化DP-Atcoder-dp-m-Candies" class="headerlink" title="前缀和优化DP (Atcoder_dp_m Candies)"></a>前缀和优化DP (Atcoder_dp_m Candies)</h2><p>对于形如</p><p>$$f_{i,j}&#x3D;val(i)+\sum\limits_{k&#x3D;1}^j f_{i-1,k}$$</p><p>的式子，我们可以进行前缀和优化，即在转移时记录一个 $s_{i,j}&#x3D;\sum\limits_{k&#x3D;1}^j f_{i,k}$，于是转移就变成</p><p>$$f_{i,j}&#x3D;val(i)+s_{i-1,j}$$</p><p>实现 $O(1)$ 转移。</p><p>例如本题，我们设 $f_{i,j}$ 表示前 $i$ 个小盆友分 $j$ 个苹果有多少种分配方式，枚举这一个小盆友的苹果数量，不难得到：</p><p>$$f_{i,j}&#x3D;\sum\limits_{k&#x3D;0}^{\min{a_i,j}}f_{i-1,j-k}-\sum\limits_{k&#x3D;0}^{\max{j-a_i-1,0}}f_{i,k}$$</p><p>因此记录一个 $s_{i,j}&#x3D;\sum\limits_{k&#x3D;0}^j f_{i,j}$，就可以 $O(1)$ 转移了。</p><h2 id="区间DP-Atcoder-dp-n-Slimes"><a href="#区间DP-Atcoder-dp-n-Slimes" class="headerlink" title="区间DP (Atcoder_dp_n Slimes)"></a>区间DP (Atcoder_dp_n Slimes)</h2><p>如果一个问题可以通过合并两个小的区间来得到最终的答案，（在数据范围不大的情况下）就可以使用区间 DP 解决这个问题。一般地，我们设 $f_{i,j}$ 表示已经处理完区间 $[i,j]$ 的问题的最大&#x2F;小代价。关于转移，对于 $f_{i,j}$，我们枚举中间断点 $k$，不难得到方程</p><p>$$f_{i,j}&#x3D;\max\limits_{k&#x3D;i}^{j-1} f_{i,k}+f_{k+1,j}+val(i,j,k)$$</p><p>关于本题，我们设 $f_{i,j}$ 表示合并区间 $[i,j]$ 的最小代价，然后枚举 $k$，显然 $val(i,j,k)&#x3D;\sum\limits_{l&#x3D;i}^j a_l$，即与 $k$ 无关，预处理前缀和即可。</p><h2 id="状压DP-Atcoder-dp-o-Matching"><a href="#状压DP-Atcoder-dp-o-Matching" class="headerlink" title="状压DP (Atcoder_dp_o Matching)"></a>状压DP (Atcoder_dp_o Matching)</h2><p>对于数据范围在 $20$ 之内的动态规划，我们可以考虑进行状态压缩。状态压缩即在数据范围不到的情况下将选&#x2F;不选或其它状态进行二进制压缩，以方便枚举子集来求答案。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;At-dp-选讲&quot;&gt;&lt;a href=&quot;#At-dp-选讲&quot; class=&quot;headerlink&quot; title=&quot;At_dp 选讲&quot;&gt;&lt;/a&gt;At_dp 选讲&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="题解笔记" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>换根DP</title>
    <link href="http://example.com/2024/03/25/%E6%8D%A2%E6%A0%B9DP/"/>
    <id>http://example.com/2024/03/25/%E6%8D%A2%E6%A0%B9DP/</id>
    <published>2024-03-25T07:20:42.000Z</published>
    <updated>2024-03-25T15:36:16.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一般情况"><a href="#一般情况" class="headerlink" title="一般情况"></a>一般情况</h1><p>对于树上 DP，要求求以每一个节点为根的树内的 $dp$ 值，这类问题我们可以用换根 DP 完成。一般地，我们总是用 $f_{fa}$ 来更新 $f_u$，可以写成</p><p>$$<br>f_u&#x3D;f_{fa}+val(u,fa)<br>$$</p><p>的形式。</p><p>其中，最重要的是找到由父亲转移到儿子会产生那些贡献和算重的贡献，将贡献加上，多余的减掉，一般就可以在 $O(n)$ 内求出所有的贡献。流程一般包括两遍 <code>dfs</code>，第一遍统计以 $u$ 为根节点的子树内的答案，第二遍由 $1$ 号节点开始进行换根。</p><h1 id="典例分析"><a href="#典例分析" class="headerlink" title="典例分析"></a>典例分析</h1><h2 id="P3047-USACO12FEB-Nearby-Cows-G"><a href="#P3047-USACO12FEB-Nearby-Cows-G" class="headerlink" title="P3047 [USACO12FEB] Nearby Cows G"></a>P3047 [USACO12FEB] Nearby Cows G</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给定一棵树，没给点有权值 $a_i$，对于每个点 $u$，求：</p><p>$$<br>\sum\limits_{\operatorname{dis}(u,v)\le k}a_k<br>$$</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>观察 $n$ 的数据范围是 $10^5$，考虑换根DP。</p><p>首先设状态，因为注意到 $k$ 仅有20，我们可以设 $f_{i,j}$ 表示以 $i$ 为根节点的子树内与它距离为 $j$ 的点的权值和。</p><p>首先第一遍 <code>dfs</code> 求出来再子树内的答案，然后考虑转移。</p><p>对于一个数 $v$，若 $fa_v&#x3D;u$，则它的父亲周围与它距离不超过 $k-1$ 的点它显然能够到达，其中不要忘记这里面还包含它子树内的与它距离小于等于 $k-2$ 的点。然后再加上它的子树内距离它 $k-1$ 和 $k$ 的点即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line"><span class="type">int</span> n,k,c[N],siz[N],f[N][<span class="number">26</span>],fa[N],dep[N],dp[N][<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fat)</span></span>&#123;</span><br><span class="line">    fa[x]=fat; dep[x]=dep[fat]+<span class="number">1</span>; siz[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>, xx=x;i&lt;=k&amp;&amp;xx;++i, xx=fa[xx])</span><br><span class="line">        f[xx][dep[x]-dep[xx]]+=c[x];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">        <span class="type">int</span> y=g[x][i];</span><br><span class="line">        <span class="keyword">if</span>(y==fat)  <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(y,x);</span><br><span class="line">        siz[x]+=siz[y];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    dp[x][<span class="number">0</span>]=c[x]; dp[x][<span class="number">1</span>]=f[x][<span class="number">1</span>]+c[fa[x]]+c[x]*(x!=<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(x!=<span class="number">1</span>)    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=k;++i)   dp[x][i]=dp[fa[x]][i<span class="number">-1</span>]+f[x][i]+f[x][i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">else</span>    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=k;++i)   dp[x][i]=f[x][i];</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">1</span>)    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;++i)   dp[x][i]+=dp[x][i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">        <span class="type">int</span> y=g[x][i];</span><br><span class="line">        <span class="keyword">if</span>(y==fa[x])    <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x,y;i&lt;n;++i)    cin&gt;&gt;x&gt;&gt;y, g[x].<span class="built_in">pb</span>(y), g[y].<span class="built_in">pb</span>(x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)   cin&gt;&gt;c[i];</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)   cout&lt;&lt;dp[i][k]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P3647-APIO2014-连珠线"><a href="#P3647-APIO2014-连珠线" class="headerlink" title="P3647 [APIO2014] 连珠线"></a>P3647 [APIO2014] 连珠线</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>有一种游戏，能支持两种操作</p><ol><li><code>Append(u,v)</code> 在 $u$ 后面拉一根红线到 $v$</li><li><code>Insert(u,v,w)</code> 在 $(u,v)$ 之间去掉红线变成蓝线</li></ol><p>现在给定最终树的形态，求最大的可能的蓝线权值和。</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>首先树上问题，容易想到树形 DP，我们设 $f_{u,0&#x2F;1}$ 表示 $u$ 节点 是&#x2F;不是 一根蓝线的中点所产生的贡献。</p><p>对于 $f_{u,0}$，很容易想到它与 $v$ 可以是红线也可以是蓝线，如果是红线贡献就是 $f_{v,0}$，否则 $v$ 就是蓝线中点，贡献就是 $f_{v,1}+\operatorname{dis}(u,v)$，于是不难得到转移方程：</p><p>$$f_{u,0}&#x3D;\sum\limits_{v\in son_u}\max{f_{v,0},f_{v,1}+\operatorname{dis}(u,v)}$$</p><p>对于 $f_{u,1}$，因为它只能和它的父亲以及 <strong>一个</strong> 儿子形成蓝线，因此枚举这个儿子 $v$，不难得到：</p><p>$$f_{u,1}&#x3D;\sum_{v\in son_u,v\not &#x3D;V}\max{f_{v,0},f_{v,1}+\operatorname{dis}(u,v)}+f_{V,0}+\operatorname{dis}(u,V)$$</p><p>我们完全可以将 $f_{u,1}$ 先设成 $f_{u,0}$，然后算的时候减掉：</p><p>$$f_{u,1}&#x3D;f_{u,0}+\sum_{v\in son_u}\max{f_{v,0}+\operatorname{dis}(u,v)-\max{f_{v,0},f_{v,1}+\operatorname{dis}(u,v)}}$$</p><p>（好恶心的柿子）QAQ。</p><p>但是我们忽略了一种情况，就是一个父亲节点和它的两个儿子构成蓝线的贡献，于是想到换根。</p><p>考虑从一个父亲转移到一个儿子，首先需要减掉自己做儿子的贡献，同时加上父亲作为儿子的贡献。</p><p>首先考虑如何减掉自己的贡献。我们计数组 $dp_{u,0&#x2F;1,v}$ 表示以 $u$ 为根节点的子树，是&#x2F;不是蓝线中点，而且不考虑儿子 $v$ 的答案。对于 $0$ 的情况，我们直接减掉 $\max{f_{v,0},f_{v,1}+\operatorname{dis}(u,v)}$ 即可，但对于 $1$ 的情况，我们就需要额外记录一个次大值来维护这个值。</p><p>对于自己父亲的贡献，可以看做多加了一个儿子，即</p><p>$$f_{u,0}&#x3D;dp_{u,0,v}+\max{f_{fa,0},f_{fa,1}+\operatorname{dis}(fa,u)}$$</p><p>$$f_{u,1}&#x3D;dp_{u,1,v}+\max{mx_{u,v},f_{fa,0}+\operatorname{dis}(fa,u)-\max{f_{fa,0},f_{fa,1}+\operatorname{dis}(fa,u)}}$$</p><p>其中 $mx_{u,v}$ 表示去掉 $v$ 之后 $u$ 子树的权值和。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fat)</span></span>&#123;</span><br><span class="line">    f[x][<span class="number">0</span>]=<span class="number">0</span>, f[x][<span class="number">1</span>]=-INF;</span><br><span class="line">    <span class="type">int</span> maxx1=-INF,maxx2=-INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x];~i;i=Next[i])&#123;</span><br><span class="line">        <span class="type">int</span> y=ver[i], z=w[i];</span><br><span class="line">        <span class="keyword">if</span>(y==fat)   <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        son[x].<span class="built_in">pb</span>(y);</span><br><span class="line">        fa[y]=x, len[y]=z; </span><br><span class="line">        <span class="built_in">dfs1</span>(y,x);</span><br><span class="line">        f[x][<span class="number">0</span>]+=<span class="built_in">max</span>(f[y][<span class="number">0</span>],f[y][<span class="number">1</span>]+z);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">tran</span>(y)&gt;maxx1)   maxx2=maxx1, maxx1=<span class="built_in">tran</span>(y);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">tran</span>(y)&gt;maxx2)  maxx2=<span class="built_in">tran</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    f[x][<span class="number">1</span>]=f[x][<span class="number">0</span>]+maxx1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[x];~i;i=Next[i])&#123;</span><br><span class="line">        <span class="type">int</span> y=ver[i], z=w[i];</span><br><span class="line">        <span class="keyword">if</span>(y==fat)    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        dp[x][<span class="number">0</span>].<span class="built_in">pb</span>(f[x][<span class="number">0</span>]-<span class="built_in">max</span>(f[y][<span class="number">0</span>],f[y][<span class="number">1</span>]+z));</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">tran</span>(y)==maxx1)  dp[x][<span class="number">1</span>].<span class="built_in">pb</span>(dp[x][<span class="number">0</span>].<span class="built_in">back</span>()+maxx2), mx[x].<span class="built_in">pb</span>(maxx2);</span><br><span class="line">        <span class="keyword">else</span>    dp[x][<span class="number">1</span>].<span class="built_in">pb</span>(dp[x][<span class="number">0</span>].<span class="built_in">back</span>()+maxx1), mx[x].<span class="built_in">pb</span>(maxx1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son[x].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">        <span class="type">int</span> y=son[x][i], z=len[y];</span><br><span class="line">        f[x][<span class="number">0</span>]=dp[x][<span class="number">0</span>][i], f[x][<span class="number">1</span>]=dp[x][<span class="number">1</span>][i];</span><br><span class="line">        <span class="keyword">if</span>(fa[x])&#123;</span><br><span class="line">           f[x][<span class="number">0</span>]+=<span class="built_in">max</span>(f[fa[x]][<span class="number">0</span>],f[fa[x]][<span class="number">1</span>]+len[x]);</span><br><span class="line">           f[x][<span class="number">1</span>]=f[x][<span class="number">0</span>]+<span class="built_in">max</span>(mx[x][i],f[fa[x]][<span class="number">0</span>]+len[x]-<span class="built_in">max</span>(f[fa[x]][<span class="number">0</span>],f[fa[x]][<span class="number">1</span>]+len[x]));</span><br><span class="line">        &#125;</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,f[y][<span class="number">0</span>]+<span class="built_in">max</span>(f[x][<span class="number">0</span>],f[x][<span class="number">1</span>]+z));</span><br><span class="line">        <span class="built_in">dfs2</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="built_in">sizeof</span>(head));</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x,y,z;i&lt;n;++i)  cin&gt;&gt;x&gt;&gt;y&gt;&gt;z, <span class="built_in">add</span>(x,y,z), <span class="built_in">add</span>(y,x,z);</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>); <span class="built_in">dfs2</span>(<span class="number">1</span>);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一般情况&quot;&gt;&lt;a href=&quot;#一般情况&quot; class=&quot;headerlink&quot; title=&quot;一般情况&quot;&gt;&lt;/a&gt;一般情况&lt;/h1&gt;&lt;p&gt;对于树上 DP，要求求以每一个节点为根的树内的 $dp$ 值，这类问题我们可以用换根 DP 完成。一般地，我们总是用 $f_</summary>
      
    
    
    
    
    <category term="算法笔记" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>莫比乌斯反演</title>
    <link href="http://example.com/2024/03/25/Mobius%20Inversion/"/>
    <id>http://example.com/2024/03/25/Mobius%20Inversion/</id>
    <published>2024-03-25T07:20:42.000Z</published>
    <updated>2024-03-25T18:05:23.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="莫比乌斯反演"><a href="#莫比乌斯反演" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h1><h2 id="引入函数"><a href="#引入函数" class="headerlink" title="引入函数"></a>引入函数</h2><h3 id="莫比乌斯函数"><a href="#莫比乌斯函数" class="headerlink" title="莫比乌斯函数"></a>莫比乌斯函数</h3><h4 id="定义1"><a href="#定义1" class="headerlink" title="定义1"></a>定义1</h4><p>$$\mu(x)&#x3D;\left{\begin{matrix}1,x&#x3D;1\(-1)^k,x&#x3D;\prod\limits_{i&#x3D;1}^kp_k\0,\mathrm{otherwise}\end{matrix}\right.$$</p><h4 id="性质1-1"><a href="#性质1-1" class="headerlink" title="性质1.1"></a>性质1.1</h4><p>它是一个积性函数，即对于 $p,q$，若 $\gcd(p,q)&#x3D;1$，则 $\mu(p\times q)&#x3D;\mu(p)\times \mu(q)$。</p><blockquote><p><strong>证明</strong></p><p>对于 $p&#x3D;1$ 的情况，显然 $\mu(1\cdot x)&#x3D;\mu(x)\cdot\mu(1)$</p><p>否则，若 $p,q$ 中有一个数有平方因子，那么整个 $p\cdot q$ 必然有平方因子，故 $\mu(p\cdot q)&#x3D;\mu(p)*\mu(q)&#x3D;0$。</p><p>对于一般情况，设 $p&#x3D;\prod\limits_{i&#x3D;1}^{k_1}p_i,q&#x3D;\prod\limits_{i&#x3D;1}^{k_2}p_i$，那么 $\mu(p)&#x3D;(-1)^{k_1},\mu(q)&#x3D;(-1)^{k_2}$，而 $\gcd(p,q)&#x3D;1$，所以 $p\cdot q&#x3D;\prod\limits_{i&#x3D;1}^{k_1+k_2}p_i,mu(p\cdot q)&#x3D;(-1)^{(k_1+k_2)}&#x3D;(-1)^{k_1}\cdot (-1)^{k_2}&#x3D;\mu(p)\cdot \mu(q)$。</p><p>证毕</p></blockquote><h4 id="性质1-2"><a href="#性质1-2" class="headerlink" title="性质1.2"></a>性质1.2</h4><p>$$\sum\limits_{d\mid n}\mu(d)&#x3D;\epsilon(n)$$</p><p>这定理也可以写成 $\mu<em>\operatorname{1}&#x3D;\epsilon$。其中 $</em>$ 是狄利克雷卷积。</p><blockquote><p>证明</p><p>显然，性质 1.2 等价于：</p><p>$$\sum_{d\mid x}\mu(d)&#x3D;\left{\begin{matrix}1, x&#x3D;1\ 0,\text{otherwise}\end{matrix}\right.$$</p><p>容易证明 $x&#x3D;1$ 时该命题成立。</p><p>对于 $x\not &#x3D;1$ 的情况，我们设 $x&#x3D;\prod_{i&#x3D;1}^k p_i$。容易想到所有能够产生贡献的因子都是这 $k$ 个因子的不重复组合，因为有平方的因子的莫比乌斯函数值为0。其中，有 $i$ 个质因子的因子有 $\binom{k}{i}$ 个。由此不难看出原式 $&#x3D;\sum_{i&#x3D;0}^k (-1)^i\binom{k}{i}$。下面分两种情况讨论：</p><ul><li><p>$k$ 为偶数。</p><p>根据公式 $\binom{n}{m}&#x3D;\binom{n-1}{m}+\binom{n-1}{m-1}$，那么原式 $&#x3D;\binom{k}{0}-\binom{k}{1}+\binom{k}{2}-\cdots+\binom{k}{k}&#x3D;(\binom{k-1}{0})-(\binom{k-1}{0}+\binom{k-1}{1})+(\binom{k-1}{1}+binom{k-1}{2})-\cdots-(\binom{k-1}{k-2}+\binom{k-1}{k-1})+(\binom{k-1}{k-1})$.容易看出两两抵消，最后结果为0。</p></li><li><p>$k$ 为奇数。</p><p>那么 $i$ 与 $k-i$ 奇偶性不同，而 $\binom{i}{k}&#x3D;\binom{k-i}{i}$，因此两两抵消，最终结果为0。</p></li></ul><p>证毕。</p></blockquote><h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><h4 id="定义2"><a href="#定义2" class="headerlink" title="定义2"></a>定义2</h4><p>$$\varphi(x)&#x3D;\sum\limits_{i&#x3D;1}^x[\gcd(i,x)&#x3D;1]$$</p><p>欧拉函数反映了一个数与小于等于它并且与它互质的数的个数。</p><h4 id="性质2-1"><a href="#性质2-1" class="headerlink" title="性质2.1"></a>性质2.1</h4><p>它也是个积性函数，这里我们不证。另外，我们可以写出它的通项公式：$\varphi(x)&#x3D;\prod\limits_{i&#x3D;1}^k(1-\frac{1}{p_i})$。</p><blockquote><p><strong>证明</strong></p><p>设 $x$ 能够质因数分解为 $x&#x3D;\prod\limits_{i&#x3D;1}^{m}p_i^{\alpha_i}$，让 $x$ 减去所有 $p_i$ 的倍数得到 $n-\sum\limits_{i&#x3D;1}^m\left\lfloor\frac{n}{p_i}\right\rfloor$。但是这并不是最终答案，因为还有 $p_i\times p_{i+1}$ 的倍数被算了两边。没错就是容斥原理。然后最终答案就是 $n+\sum\limits_{i&#x3D;1}^{m}(-1)^{i}\sum\limits_{j&#x3D;1}^{k-i+1}\prod\limits_{k&#x3D;j}^{j+i-1}p_k$。最终因式分解就可以得到原式。</p><p>证毕</p></blockquote><p>其实，写出通项公式和之后已经很容易证明它是积性函数了。</p><h3 id="因子函数"><a href="#因子函数" class="headerlink" title="因子函数"></a>因子函数</h3><h4 id="定义3"><a href="#定义3" class="headerlink" title="定义3"></a>定义3</h4><p>$\sigma(x)&#x3D;\sum\limits_{d\mid n}d$。</p><p>它表示了一个数的因子和。</p><h4 id="性质3"><a href="#性质3" class="headerlink" title="性质3"></a>性质3</h4><p>它也是积性函数。</p><blockquote><p><strong>证明</strong></p><p>设 $\sum\limits_{d\mid p}d&#x3D;\sum\limits_{i&#x3D;1}^na_i, \sum\limits_{d\mid q}d&#x3D;\sum\limits_{i&#x3D;1}^mb_i$。其中，因为 $\gcd(p,q)&#x3D;1$，所以 ${a_n}$ 中的元素与 ${b_n}$ 中的互不相同。那么将 ${a_n}$ 与 ${b_n}$ 两两组合就可以补充不漏地得到 $p\cdot q$ 的所有因子，即 $\sigma(p\cdot q)&#x3D;(\sum\limits_{i&#x3D;1}^na_i)(\sum\limits_{i&#x3D;1}^mb_i)&#x3D;\sigma(p)\cdot \sigma(q)$。</p><p>证毕</p></blockquote><h3 id="恒等函数"><a href="#恒等函数" class="headerlink" title="恒等函数"></a>恒等函数</h3><h4 id="定义4"><a href="#定义4" class="headerlink" title="定义4"></a>定义4</h4><p>$$\operatorname{1}(x)&#x3D;1$$</p><p>这个我就不想多说了，其中重要的一点事它是完全积性函数，即对于 $\forall a,b\in \N^*$，都满足 $\operatorname{1}(a\cdot b)&#x3D;\operatorname{1}(a)\cdot \operatorname{1}(b)$。</p><h3 id="元函数"><a href="#元函数" class="headerlink" title="元函数"></a>元函数</h3><h4 id="定义5"><a href="#定义5" class="headerlink" title="定义5"></a>定义5</h4><p>$$\epsilon(x)&#x3D;[x&#x3D;1]$$</p><p>即这个函数返回 $x$ 是否为 $1$。显然，它也是完全积性函数。</p><h4 id="性质5"><a href="#性质5" class="headerlink" title="性质5"></a>性质5</h4><p>对于任意函数 $f(x)$，它与 $\epsilon$ 的狄利克雷卷积 $f*\epsilon&#x3D;f$。这个请读着自证。</p><h3 id="单位函数"><a href="#单位函数" class="headerlink" title="单位函数"></a>单位函数</h3><h4 id="定义6"><a href="#定义6" class="headerlink" title="定义6"></a>定义6</h4><p>$$\operatorname{Id}(x)&#x3D;x$$</p><p>它返回的是自变量本身。同样，它是完全积性函数。</p><h2 id="狄利克雷卷积"><a href="#狄利克雷卷积" class="headerlink" title="狄利克雷卷积"></a>狄利克雷卷积</h2><p>我们定义：两个函数 $f(x),g(x)$ 间的运算 $\sum\limits_{d|n}f(n)\cdot g(\frac{n}{d})$ 计为 $(f*g)(x)$，称为狄利克雷卷积。它满足交换律、结合律和对加法的分配率。</p><h2 id="结论及证明"><a href="#结论及证明" class="headerlink" title="结论及证明"></a>结论及证明</h2><p>若函数 $F(x)&#x3D;\sum\limits_{d\mid x}f(d)$，则 $f(x)&#x3D;\sum\limits_{d\mid x}\mu(d)F(\frac{x}{d})$ 或 $f(x)&#x3D;\sum\limits_{d\mid x}\mu(\frac{x}{d})F(d)$。这定理又可以写成设 $F&#x3D;f<em>\operatorname{1}$，则 $f&#x3D;F</em>\mu$。</p><blockquote><p><strong>证明</strong></p><p>由 $\mu<em>\operatorname{1}&#x3D;\epsilon$ 和 $F&#x3D;f</em>\operatorname{1}$ 进行推导。</p><p>由 $F&#x3D;f<em>\operatorname{1}$ 可得 $F</em>\mu&#x3D;f<em>\operatorname{1}<em>\mu$，再由 $\mu * 1&#x3D;\epsilon$ 可得 $F</em>\mu&#x3D;f</em>\epsilon&#x3D;f$。</p><p>即 $F*\mu&#x3D;f$。</p><p>证毕</p></blockquote><p>由此可以推导出两条重要结论：</p><ol><li>$\epsilon(n)&#x3D;\sum\limits_{d\mid n}\mu(d)$，也就是 $\epsilon&#x3D;\mu*\operatorname{1}$。</li><li>$n&#x3D;\sum\limits_{d\mid n}\varphi(d)$，也即 $\operatorname{Id}&#x3D;\varphi<em>\operatorname{1}$，或 $\mu</em>\operatorname{Id}&#x3D;\varphi$。</li></ol><p>第一条我们在补充函数- $\mu$ 函数中已经证明，下面给出第二条的证明。</p><blockquote><p><strong>证明</strong></p><p>由欧拉函数的定义得到 $\varphi(n)&#x3D;\sum\limits_{i&#x3D;1}^n[\gcd(i,n)&#x3D;1]&#x3D;\sum\limits_{i&#x3D;1}^n\epsilon(\gcd(i,n))$，由第一条得到原式 $&#x3D;\sum\limits_{i&#x3D;1}^n\sum\limits_{d\mid i,d\mid n}\mu(d)$，改变求和顺序，能够得到原式 $&#x3D;\sum\limits_{d\mid n} \mu(d)\sum\limits_{d\mid i} 1&#x3D;\sum\limits_{d\mid n}\mu(d)\frac{n}{d}&#x3D;\sum\limits_{d\mid n}\mu(d)\operatorname{Id}(\frac{n}{d})$，然后反过来就得到 $\operatorname{Id}&#x3D;\varphi*\operatorname{1}$。</p><p>证毕</p></blockquote><h2 id="小技巧：整除分块"><a href="#小技巧：整除分块" class="headerlink" title="小技巧：整除分块"></a>小技巧：整除分块</h2><h3 id="求：-sum-limits-i-1-n-left-lfloor-frac-n-i-right-rfloor"><a href="#求：-sum-limits-i-1-n-left-lfloor-frac-n-i-right-rfloor" class="headerlink" title="求：$\sum\limits_{i&#x3D;1}^n\left\lfloor\frac{n}{i}\right\rfloor$"></a>求：$\sum\limits_{i&#x3D;1}^n\left\lfloor\frac{n}{i}\right\rfloor$</h3><p>我们注意到：$\left\lfloor\frac{n}{i}\right\rfloor$ 的取值至多只有 $O(\sqrt n)$ 的数量级，因此我们只需要知道每个取值有多少个 $i$ 能够取到就可以在 $O(\sqrt{n})$ 内求出这个值。如何快速求出有多少个 $i$ 能取到呢？下面给出定理：</p><p>定理：$\frac{n}{i}$ 的取值中能够取到最大的 $i$ 是 $\left\lfloor\frac{n}{\left\lfloor\frac{n}{i}\right\rfloor}\right\rfloor$。</p><p>下面给出证明：</p><blockquote><ul><li><p>充分性：设 $j&#x3D;\left\lfloor\frac{n}{\left\lfloor\frac{n}{i}\right\rfloor}\right\rfloor$，那么显然有 $\left\lfloor\frac{n}{j}\right\rfloor&#x3D;\left\lfloor\frac{n}{\left\lfloor\frac{n}{\left\lfloor\frac{n}{i}\right\rfloor}\right\rfloor}\right\rfloor&#x3D;\left\lfloor\frac{n}{i}\right\rfloor$</p></li><li><p>必要性：因为 $\left\lfloor\frac{n}{i}\right\rfloor&#x3D;\left\lfloor\frac{n}{j}\right\rfloor$，所以 $\left\lfloor\frac{n}{j}\right\rfloor\ge\left\lfloor\frac{n}{i}\right\rfloor$，即 $\frac{n}{j}\ge\left\lfloor\frac{n}{i}\right\rfloor$。</p><p>两边同取倒数，得到 $\frac{j}{n}\le\frac{1}{\left\lfloor\frac{n}{i}\right\rfloor}$,最后同乘以 $n$ 得到 $j\le \left\lfloor\frac{n}{\left\lfloor\frac{n}{i}\right\rfloor}\right\rfloor$。</p></li></ul><p>证毕。</p></blockquote><h3 id="进阶：求-sum-i-cdot-left-lfloor-frac-n-i-right-rfloor"><a href="#进阶：求-sum-i-cdot-left-lfloor-frac-n-i-right-rfloor" class="headerlink" title="进阶：求 $\sum i\cdot\left\lfloor\frac{n}{i}\right\rfloor$"></a>进阶：求 $\sum i\cdot\left\lfloor\frac{n}{i}\right\rfloor$</h3><p>我们拆分一下，把所有结果一致的 $i$ 提出来，能够得到原式 $&#x3D;\sum\limits_{k&#x3D;i}^j k\times \left\lfloor\frac{n}{k}\right\rfloor$，其中 $i,j$ 满足 $\left\lfloor\frac{n}{i}\right\rfloor&#x3D;\left\lfloor\frac{n}{j}\right\rfloor$，且 $i,j$ 分别是这个取值区间的左右端点。因此 $\Leftrightarrow\left\lfloor\frac{n}{i}\right\rfloor\sum\limits_{k&#x3D;i}^j k&#x3D;\left\lfloor\frac{n}{i}\right\rfloor\cdot\frac{(i+j)(j-i+1)}{2}$。</p><p>由此不难看出对于求 $\sum\limits_{i&#x3D;1}^nf(i)\times \left\lfloor\frac{n}{i}\right\rfloor$ 的问题，可以直接将 $\frac{n}{i}$ 相等的 $i$ 取值写成 $\frac{n}{i}\times (s_j-s_{i-1})$，其中 $s_n&#x3D;\sum\limits_{i&#x3D;1}^nf(i)$。</p><h2 id="线性筛法求-mu-函数"><a href="#线性筛法求-mu-函数" class="headerlink" title="线性筛法求 $\mu$ 函数"></a>线性筛法求 $\mu$ 函数</h2><p>性质2：$\mu(x\cdot p)&#x3D;-\mu(x)$，其中 $p$ 为素数且 $p\not\ \mid x$。</p><p>这个定理读者自证即可。</p><p>由此，这性质很适配线性筛。在 <code>i%p[j]==0</code> 时令 <code>mu[i*p[j]]=0</code> 即可，因为至少含有一个完全平方因子 $p^2$。再其它时候都有 <code>i%p[j]!=0</code>，应用性质 2 不难得出 <code>mu[i*p[j]]=-mu[i]</code>。</p><p>下面看几道例题：</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><p>求 $\sum\limits_{i&#x3D;1}^n\sum\limits_{j&#x3D;1}^m[\gcd(i,j)&#x3D;1]$。</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><p>容易看出 $[\gcd(i,j)&#x3D;1]\Leftrightarrow \epsilon(\gcd(i,j))$，又根据 $\epsilon&#x3D;\mu *1$ 不难得到 $\epsilon(\gcd(i,j))\Leftrightarrow \sum\limits_{d\mid \gcd(i,j)}\mu(d)\Leftrightarrow \sum\limits_{d\mid i,d\mid j}\mu(d)$。因此原式可以写成</p><p>$$\sum\limits_{i&#x3D;1}^n\sum\limits_{j&#x3D;1}^m\sum\limits_{d\mid i,d\mid j}\mu(d)$$</p><p>我们改变枚举顺序首先枚举 $d$ 就能够得到</p><p>$$\sum\limits_{d&#x3D;1}^{\min(n,m)}\mu(d)\sum\limits_{d\mid i}^n\sum\limits_{d\mid j}^m1&#x3D;\sum\limits_{d&#x3D;1}^{\min(n,m)}\mu(d)\left\lfloor\frac{n}{d}\right\rfloor\left\lfloor\frac{m}{d}\right\rfloor$$</p><p>于是 $O(\sqrt n)$ 内即可完成一次询问。</p><h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><p>求 $\sum\limits_{i&#x3D;1}^n\sum\limits_{j&#x3D;1}^m[\gcd(i,j)&#x3D;k]$</p><h3 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h3><p>这里先把 $k$ 提出得到</p><p>$$\sum\limits_{i&#x3D;1}^{\left\lfloor\frac{n}{k}\right\rfloor}\sum\limits_{j&#x3D;1}^{\left\lfloor\frac{m}{k}\right\rfloor}[\gcd(i,j)&#x3D;1]$$</p><p>然后按照例 1 就可以得到答案。</p><h3 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h3><p>设素数集合为 $\mathcal{P}$，求 $\sum\limits_{k\in \mathcal{P}}\sum\limits_{i&#x3D;1}^n\sum\limits_{j&#x3D;1}^m[\gcd(i,j)&#x3D;k]$</p><h3 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h3><p>首先按照例 2 把二三层求和化简成</p><p>$$\sum\limits_{k\in \mathcal{P}}\sum\limits_{d&#x3D;1}^{\min(\left\lfloor\frac{n}{k}\right\rfloor,\left\lfloor\frac{m}{k}\right\rfloor)}\mu(d)\left\lfloor\frac{n}{k\times d}\right\rfloor\left\lfloor\frac{m}{k\times d}\right\rfloor$$</p><p>然后有一个常用的小技巧，我们枚举 $T&#x3D;k\times d$，得到</p><p>$$\sum\limits_{T&#x3D;1}^{\min(n,m)}\left\lfloor\frac{n}{T}\right\rfloor\left\lfloor\frac{m}{T}\right\rfloor\sum\limits_{k\in \mathcal{P},k\mid T}\mu(\frac{T}{k})$$</p><p>注意到最后一个求和是可以预处理的，它只与一个变量 $T$ 有关，我们枚举 $k\in \mathcal{P}$ 然后给它的 $i$ 倍加上 $\mu(i)$ 即可。</p><h3 id="例4"><a href="#例4" class="headerlink" title="例4"></a>例4</h3><p>求 $\sum\limits_{i&#x3D;1}^n\sum\limits_{j&#x3D;1}^md(ij)$，其中 $d(x)&#x3D;\sum\limits_{d\mid x}1$。</p><h3 id="Solution4"><a href="#Solution4" class="headerlink" title="Solution4"></a>Solution4</h3><p>首先摆出公式 $d(i,j)&#x3D;\sum\limits_{x\mid i}\sum\limits_{y\mid j}[\gcd(x,y)&#x3D;1]$。</p><p>于是式子就变成了</p><p>$$\sum\limits_{i&#x3D;1}^n\sum\limits_{j&#x3D;1}^m\sum\limits_{x\mid i}\sum\limits_{y\mid j}[\gcd(x,y)&#x3D;1]$$</p><p>先枚举 $x,y$ 得到</p><p>$$\sum\limits_{x&#x3D;1}^n\sum\limits_{y&#x3D;1}^m\left\lfloor\frac{n}{x}\right\rfloor\left\lfloor\frac{m}{y}\right\rfloor\epsilon(\gcd(x,y))$$</p><p>按习惯改写 $x,y$ 为 $i,j$，然后把 $\epsilon$ 莫比乌斯反演，得到：</p><p>$$\sum\limits_{i&#x3D;1}^n\sum\limits_{j&#x3D;1}^m\left\lfloor\frac{n}{i}\right\rfloor\left\lfloor\frac{m}{j}\right\rfloor\sum\limits_{d\mid i,d\mid j}\mu(d)$$</p><p>改而枚举 $d$ 得到</p><p>$$\sum\limits_{d&#x3D;1}^{\min(n,m)}\mu(d)\sum\limits_{i&#x3D;1}^{\left\lfloor\frac{n}{d}\right\rfloor}\sum\limits_{j&#x3D;1}^{\left\lfloor\frac{m}{d}\right\rfloor}\left\lfloor\frac{n}{i}\right\rfloor\left\lfloor\frac{m}{j}\right\rfloor&#x3D;\sum\limits_{d&#x3D;1}^{\min(n,m)}\mu(d)(\sum\limits_{i&#x3D;1}^{\left\lfloor\frac{n}{d}\right\rfloor}\left\lfloor\frac{n}{i}\right\rfloor)(\sum\limits_{j&#x3D;1}^{\left\lfloor\frac{m}{d}\right\rfloor}\left\lfloor\frac{m}{j}\right\rfloor)$$</p><p>最后套上整除分治就可以在 $O(T\times \sqrt N)$ 内得到答案。</p><p>关于 $d(ij)&#x3D;\sum\limits_{x\mid i}\sum\limits_{y\mid j}[\gcd(i,j)&#x3D;1]$ 的证明：</p><blockquote><p><strong>证明</strong></p><p>我们考虑对 $ij$ 的每一个因子进行唯一映射，即构建自变量为 $ij$ 的因子的函数。显然，如果一个因子包含 $p^{\alpha_1}$，而 $i$ 中含有 $p^{\alpha_2}$，$j$ 中含有 $p^{\alpha_3}$，那么当 $\alpha_2&gt;\alpha_1$ 时，我们规定用所有的 $i$ 中的 $p$，否则规定用 $\alpha_1-\alpha_2$ 个 $j$ 的 $p$，这样分别计为 $i_{\alpha_2}$ 和 $j_{\alpha_1-\alpha_2}$，因此 $i$ 与 $j$ 不会同时出现一个因子，即枚举到的两个因子互质。</p><p>证毕。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;莫比乌斯反演&quot;&gt;&lt;a href=&quot;#莫比乌斯反演&quot; class=&quot;headerlink&quot; title=&quot;莫比乌斯反演&quot;&gt;&lt;/a&gt;莫比乌斯反演&lt;/h1&gt;&lt;h2 id=&quot;引入函数&quot;&gt;&lt;a href=&quot;#引入函数&quot; class=&quot;headerlink&quot; title=&quot;引</summary>
      
    
    
    
    
    <category term="算法笔记" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>杜教筛</title>
    <link href="http://example.com/2024/03/25/DUJiao%20Sum/"/>
    <id>http://example.com/2024/03/25/DUJiao%20Sum/</id>
    <published>2024-03-25T07:20:42.000Z</published>
    <updated>2024-03-25T18:04:06.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="杜教筛"><a href="#杜教筛" class="headerlink" title="杜教筛"></a>杜教筛</h1><h2 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h2><h3 id="线性筛"><a href="#线性筛" class="headerlink" title="线性筛"></a>线性筛</h3><p>保证每个数只被它的最小质因子筛到。为了达到这个目的，我们在枚举 $i$ 时只枚举比 $i$ 的最小质因子小或相等的质数。即：<code>if(i%p[j]==0)  break;</code>。因此保证了该筛法的<strong>线性</strong>。</p><h3 id="积性函数"><a href="#积性函数" class="headerlink" title="积性函数"></a>积性函数</h3><p>若函数 $f(x)$ 满足 $f(pq)&#x3D;f(p)f(q)$，其中 $\gcd(p,q)&#x3D;1$，则称函数 $f(x)$ 为<strong>积性函数</strong>。</p><p>大部分数论函数为积性函数。</p><h3 id="狄利克雷卷积"><a href="#狄利克雷卷积" class="headerlink" title="狄利克雷卷积"></a>狄利克雷卷积</h3><p>定义对于两个函数 $f(x),g(x)$ 的运算 $(f*g)(x)&#x3D;\sum\limits_{d\mid x}f(d)g(\frac{x}{d})$ 或 $\sum\limits_{d\mid x}f(\frac{x}{d})g(d)$，这个运算叫做 $f$ 与 $g$ 的<strong>狄利克雷卷积</strong>。</p><h3 id="莫比乌斯反演"><a href="#莫比乌斯反演" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h3><p>设函数 $g(x)&#x3D;\sum\limits_{d\mid x}f(d)$，则 $f(x)&#x3D;\sum\limits_{d\mid x}g(d)\mu(\frac{x}{d})$。这过程叫做<strong>莫比乌斯反演</strong>。</p><p>简单证明：给定条件 $g(n)&#x3D;\sum\limits_{d\mid n}f(d)$ 可以写为 $g&#x3D;f<em>\operatorname{1}$，两边同时卷 $\mu$ 得到 $g</em>\mu&#x3D;f<em>\operatorname{1}<em>\mu&#x3D;f</em>\epsilon&#x3D;f$，即 $f&#x3D;g</em>\mu$，这即为结论。</p><h2 id="正文：杜教筛"><a href="#正文：杜教筛" class="headerlink" title="正文：杜教筛"></a>正文：杜教筛</h2><p>杜教筛主要求的是积性函数的前缀和，但线性求法肯定不需要一个专门的名字，因此杜教筛能在 $O(n^{\frac{3}{4}})$ 内求出 $\sum\limits_{i&#x3D;1}^nf(i)$。</p><h3 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h3><p>设函数 $g$ 是能够快速算出前缀和的函数，并且 $f*g$ 也能够快速算出前缀和，计 $S(n)&#x3D;\sum\limits_{i&#x3D;1}^nf(i)$，那么看推柿子：</p><p>$$\sum\limits_{i&#x3D;1}^n(f*g)(x)$$</p><p>$$&#x3D;\sum\limits_{i&#x3D;1}^n\sum\limits_{d\mid i}g(d)f(\frac{i}{d})$$</p><p>$$&#x3D;\sum\limits_{d&#x3D;1}^ng(i)\sum\limits_{i}^{\left\lfloor\frac{n}{i}\right\rfloor}f(i)$$</p><p>$$&#x3D;\sum g(i)S(\left\lfloor\frac{n}{i}\right\rfloor)$$</p><p>我们要求的是 $S(n)$，看 $g(1)S(n)$，显然有 $g(1)S(n)&#x3D;\sum\limits_{i&#x3D;1}^ng(i)S(\left\lfloor\frac{n}{i}\right\rfloor)-\sum\limits_{i&#x3D;2}^ng(i)S(\left\lfloor\frac{n}{i}\right\rfloor)$，第一个求和显然等于 $\sum\limits_{i&#x3D;1}^n(f*g)(x)$，第二个可以用整除分块进行 $O(\sqrt{n})$ 处理。这样就在小于线性的复杂度内求出了 $S(n)$。</p><p>值得注意的是，我们可以先进行 $[0,5\times 10^6]$ 内数据的预处理，这样就可以快很多。对于多组数据，我们可以使用 <code>unordered_map</code> 进行常数级记忆化优化来减小复杂度。</p><p>其中预处理的范围大概在 $n^{\frac{2}{3}}$，最终的时间复杂度在 $O(n^{\frac{2}{3}})$ 再加上记忆化即可通过模板题 $P4123$。</p><h3 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;random&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DBG cerr &lt;&lt; __LINE__ &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; __FUNCTION__ &lt;&lt; endl</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DRE default_random_engine</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UID uniform_int_distribution</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 Y1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pi acos(-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> eps (1e-8)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,PII&gt; PIII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">6e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">6e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> mu[N],p[N],cnt;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> phi[N];</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; sumu;</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">long</span> <span class="type">long</span>&gt; sumphi;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mu[<span class="number">1</span>]=phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=M;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!p[i])   phi[i]=i<span class="number">-1</span>, mu[i]=<span class="number">-1</span>, p[++cnt]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;i*p[j]&lt;=M;++j)&#123;</span><br><span class="line">            p[i*p[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%p[j]==<span class="number">0</span>)&#123; phi[i*p[j]]=p[j]*phi[i]; <span class="keyword">break</span>;&#125;</span><br><span class="line">            phi[i*p[j]]=phi[i]*phi[p[j]], mu[i*p[j]]=-mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=M;++i)   mu[i]+=mu[i<span class="number">-1</span>], phi[i]+=phi[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">s1</span><span class="params">(<span class="type">int</span> n)</span></span>&#123; <span class="keyword">return</span> n;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">seps</span><span class="params">(<span class="type">int</span> n)</span></span>&#123; <span class="keyword">return</span> n&gt;=<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">sid</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span></span>&#123; <span class="keyword">return</span> n*(n+<span class="number">1</span>)/<span class="number">2</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">smu</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=M)    <span class="keyword">return</span> mu[n];</span><br><span class="line">    <span class="keyword">if</span>(sumu[n]) <span class="keyword">return</span> sumu[n];</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="type">int</span> j=n/(n/i);</span><br><span class="line">        res+=(<span class="built_in">s1</span>(j)-<span class="built_in">s1</span>(i<span class="number">-1</span>))*<span class="built_in">smu</span>(n/i);</span><br><span class="line">        i=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sumu[n]=<span class="built_in">seps</span>(n)-res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">sphi</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=M)    <span class="keyword">return</span> phi[n];</span><br><span class="line">    <span class="keyword">if</span>(sumphi[n])   <span class="keyword">return</span> sumphi[n];</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> j=n/(n/i);</span><br><span class="line">        res+=<span class="number">1ll</span>*(<span class="built_in">s1</span>(j)-<span class="built_in">s1</span>(i<span class="number">-1</span>))*<span class="built_in">sphi</span>(n/i);</span><br><span class="line">        i=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sumphi[n]=<span class="built_in">sid</span>(n)-res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n,t;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)  cin&gt;&gt;n,cout&lt;&lt;<span class="built_in">sphi</span>(n)&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="built_in">smu</span>(n)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;杜教筛&quot;&gt;&lt;a href=&quot;#杜教筛&quot; class=&quot;headerlink&quot; title=&quot;杜教筛&quot;&gt;&lt;/a&gt;杜教筛&lt;/h1&gt;&lt;h2 id=&quot;前置芝士&quot;&gt;&lt;a href=&quot;#前置芝士&quot; class=&quot;headerlink&quot; title=&quot;前置芝士&quot;&gt;&lt;/a&gt;前置芝</summary>
      
    
    
    
    
    <category term="算法笔记" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>李超线段树</title>
    <link href="http://example.com/2024/03/25/%E6%9D%8E%E8%B6%85%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <id>http://example.com/2024/03/25/%E6%9D%8E%E8%B6%85%E7%BA%BF%E6%AE%B5%E6%A0%91/</id>
    <published>2024-03-25T07:20:42.000Z</published>
    <updated>2024-03-25T18:02:43.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="李超线段树"><a href="#李超线段树" class="headerlink" title="李超线段树"></a>李超线段树</h1><p>—— 维护多个一次函数单点最值的数据结构</p><h2 id="基本算法"><a href="#基本算法" class="headerlink" title="基本算法"></a>基本算法</h2><p>李超线段树本质上是一个标记永久化的线段树，对于插入的一条线段 $(x_0,y_0),(x_1,y_1)$，我们在区间 $[x_0,x_1]$ 上进行修改：</p><ol><li>如果线段树上该点还没有线段，直接赋值。</li><li>如果原线段树上储存线段的中点值比该线段小，那么交换两条线段，这是保证两端只会有一段使得加入的线段比原线段更优。</li><li>判断哪边插入线段更优，递归继续讨论哪边。</li></ol><p>于是，我们就插入完了一条线段。关于时间复杂度，我们首先会把一条线段分成 $\log$ 份往下递归，然后每次递归最深能够达到 $\log$ 次，因此一次插入线段是 $\log^2$ 的。但是对于直线，我们不需要分成 $\log$ 份的操作，因此复杂度为单 $\log$。</p><p>对于一次查询操作，我们能够一路递归下去，然后取所有线段在 $x$ 的值的 $\max$。之所以要一路取 $\max$，是因为我们在存的根节点的线段只是中点最大的线段，但是对于所有的它不一定最大，因此一路往上取 $\max$ 即可。</p><p>对于大部分题目，我们只需要掌握直线的李超线段树即可，因为在优化动态规划的时候基本都是全局的，但也不乏 <del>恶心</del> 的出题人出一些只能用李超线段树解决的线段问题，因此在写直线李超线段树的同时，也不要忘记复习线段。</p><h3 id="Warning"><a href="#Warning" class="headerlink" title="Warning"></a>Warning</h3><ol><li><p>对于一些卡精度的题目，在比较大小的时候需要引入 $eps$。具体来说，它的值取很趋近于 $0$ 的小数，一般为 $10^{-8}$ 或 $10^{-9}$，我们认为，所有 $\operatorname{abs}(x-a)&lt;eps$ 的值都等于 $x$，也即 $x$ 的邻域 $U(x,eps)$ 都等于 $x$。这是因为有的时候，因为精度问题，<code>C++</code> 里面的 <code>double</code> 会把 $3.14$ 取成 $3.1400000001$ 或者 $3.1399999999$，因此加上才可万无一失。对于加上 $eps$ 的不等式，我们有以下规定：<br> $$a\le b\Leftrightarrow a&lt;b+eps$$<br> $$a\ge b\Leftrightarrow a&gt;b-eps$$<br> $$a&lt;b\Leftrightarrow a&lt;b-eps$$<br> $$a&gt;b\Leftrightarrow a&gt;b+eps$$</p><p> 于是我们在解决问题的时候就可以规避精度问题。</p></li><li><p>李超线段树的初始化非常魔怔，大部分时候我们只需要将它置 $0$，但对于有些题目，求最大最小值的时候，我们最好把所有的 $b$ 赋值成 $\pm \infty$ 来确保它不会使得原来最大小于 $0$ 的变成 $0$，最小大于 $0$ 的等于 $0$。</p></li></ol><h3 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3><h4 id="线段插入"><a href="#线段插入" class="headerlink" title="线段插入"></a>线段插入</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> left,<span class="type">int</span> right,line g)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&lt;=l&amp;&amp;r&lt;=right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t[p].id==<span class="number">0</span>)&#123; t[p]=g; <span class="keyword">return</span> ;&#125;</span><br><span class="line">        <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>(t[p].<span class="built_in">val</span>(mid)-g.<span class="built_in">val</span>(mid))&lt;eps)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t[p].id&gt;g.id)    <span class="built_in">swap</span>(t[p],g);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t[p].<span class="built_in">val</span>(mid)&lt;g.<span class="built_in">val</span>(mid))   <span class="built_in">swap</span>(t[p],g);</span><br><span class="line">        <span class="keyword">if</span>(t[p].<span class="built_in">val</span>(l)&lt;g.<span class="built_in">val</span>(l)+eps)    <span class="built_in">update</span>(p&lt;&lt;<span class="number">1</span>,l,mid,left,right,g);</span><br><span class="line">        <span class="keyword">if</span>(t[p].<span class="built_in">val</span>(r)&lt;g.<span class="built_in">val</span>(r)+eps)    <span class="built_in">update</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,left,right,g);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(left&lt;=mid)   <span class="built_in">update</span>(p&lt;&lt;<span class="number">1</span>,l,mid,left,right,g);</span><br><span class="line">    <span class="keyword">if</span>(right&gt;mid)   <span class="built_in">update</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,left,right,g);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="直线插入"><a href="#直线插入" class="headerlink" title="直线插入"></a>直线插入</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,line f)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!t[p].id)&#123; t[p]=f; <span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[p].<span class="built_in">val</span>(mid)&gt;f.<span class="built_in">val</span>(mid))    <span class="built_in">swap</span>(t[p],f);</span><br><span class="line">    <span class="keyword">if</span>(t[p].<span class="built_in">val</span>(l)&gt;f.<span class="built_in">val</span>(l))    <span class="built_in">update</span>(p&lt;&lt;<span class="number">1</span>,l,mid,f);</span><br><span class="line">    <span class="keyword">if</span>(t[p].<span class="built_in">val</span>(r)&gt;f.<span class="built_in">val</span>(r))    <span class="built_in">update</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)    <span class="keyword">return</span> t[p].<span class="built_in">val</span>(x);</span><br><span class="line">    <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)  <span class="keyword">return</span> <span class="built_in">min</span>(t[p].<span class="built_in">val</span>(x), <span class="built_in">query</span>(p&lt;&lt;<span class="number">1</span>,l,mid,x));</span><br><span class="line">    <span class="keyword">else</span>    <span class="keyword">return</span> <span class="built_in">min</span>(t[p].<span class="built_in">val</span>(x), <span class="built_in">query</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现 <del>李超线段树比线段树真的短很多！！！</del></p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="动态开点"><a href="#动态开点" class="headerlink" title="动态开点"></a>动态开点</h3><p>类似于动态开点的线段树，李超线段树也可以动态开点，在合并线段树或者定义域特别大的时候尤为重要，其实它的算法过程和普通线段树差不多，在普通的李超线段树的 <code>update</code> 里面加上 <code>if(!p) p=++idx;</code>，在 <code>query</code> 里面加上 <code>if(!p) return INF;</code> 即可。值得注意的是，在动态开点的时候总需要两个数组 <code>ls</code> 和 <code>rs</code> 分别记录左儿子和右儿子的编号。</p><h3 id="合并李超线段树"><a href="#合并李超线段树" class="headerlink" title="合并李超线段树"></a>合并李超线段树</h3><p>同样地，类似于合并线段树，基于动态开点李超线段树上，我们在有一边为空的时候直接返回另一端，在两边都不为空的时候我们两边分别递归下去进行更新，在更新的时候一定要注意，我们需要把需要合并的 <code>t[q]</code> 直线放进去给 <code>p</code> 更新线段来取最大值，因为李超线段树无法简单合并，需要不断更新，容易得到复杂度方程 $O(n)&#x3D;n\log n+O(\frac{n}{2})$，但是我不会算，大概估测 $O(n\log^2 n)$ 吧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> q,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p||!q)  <span class="keyword">return</span> p+q;</span><br><span class="line">    <span class="keyword">if</span>(l==r)    <span class="keyword">return</span> t[p].<span class="built_in">val</span>(l)&lt;t[q].<span class="built_in">val</span>(l)?p:q;</span><br><span class="line">    <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    ls[p]=<span class="built_in">merge</span>(ls[p],ls[q],l,mid), rs[p]=<span class="built_in">merge</span>(rs[p],rs[q],mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">update</span>(p,l,r,t[q]);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题目讲解"><a href="#题目讲解" class="headerlink" title="题目讲解"></a>题目讲解</h1><h2 id="CF1303G-Sum-of-Prefix-Sums-题解"><a href="#CF1303G-Sum-of-Prefix-Sums-题解" class="headerlink" title="CF1303G Sum of Prefix Sums 题解"></a>CF1303G Sum of Prefix Sums 题解</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给定一棵树和点权值 $a_i$，求树上的一个路径 $(u,v)$ 使最大化</p><p>$$\sum\limits_{i&#x3D;u}^v\sum_{j&#x3D;u}^i a_i$$</p><p>注意这里 $(u,v)$ 编号不一定连续，只需是树上路径即可。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>首先是树上的路径问题，容易想到使用点分治来解决问题。我们分治路径经过的点 $root$，然后找它里面所有的路径进行匹配。</p><p>如果进行这个思路，我们就需要首先了解将一条路径分成两个要如何计算。</p><p>对于一条路径 $(u,v)$，设共经过了点 $p_1,p_2,\dots,p_n$，显然，根据题目中给出的式子，有：</p><p>$$val&#x3D;\sum\limits_{i&#x3D;1}^n i\times a_i$$</p><p>假设它经过了中间点 $p_m$，即路径分为了 $p_1,p_2,\dots,p_m$ 和 $p_{m+1},p_{m+2},\dots,p_n$，那么计 $val1&#x3D;\sum\limits_{i&#x3D;1}^m i\times a_i,val2&#x3D;\sum\limits_{i&#x3D;m+1}^n (i-m)\times a_i,s&#x3D;\sum\limits_{i&#x3D;m+1}^n a_i$，那么显然有整个式子的值为：</p><p>$$val&#x3D;val1+val2+s\times m$$</p><p>也就是说，我们要拿这个式子对所有经过 $root$ 的路径来进行匹配。注意到式子中有 $s\times m$ 这一项，这里 $s$ 与后一段路径相关，$m$ 和前一段路径相关，因此很容易想到一次函数的形式，考虑使用李超线段树维护。</p><p>推理到这里，我们就不难写出算法流程：</p><ol><li>找到一个子树的重心进行点分治。</li><li>找到以它为根节点的子树中所有一个端点是它的路径。</li><li>将这些路径进行匹配，这期间使用李超线段树。</li><li>继续遍历它的儿子找到重心，继续步骤1。</li></ol><p>因为这个题也不是板子，我也不讲点分治和李超树的详细过程了。复杂度点分治有一个 $\log$，李超线段树维护直线也有一个 $n\log n$，因此总复杂度在 $n\log^2n$。</p><p>此外，本题有一些值得注意的点：</p><ul><li>在寻找路径的时候，注意到点权不为负，因此显然最优解在叶子结点上，因此只需要记录叶子结点到根节点的路径即可。</li><li>在计算子树大小和各个节点的父亲的时候，注意一定不要胡来给 $root$ 一个父亲，或者将它的父亲设成当前的根节点，因为在求 $dep$ 的时候会爆掉 (Wa on test 32)。</li><li>在匹配的时候，需要正着反着都来一遍，因为显然 $(u,v)$ 和 $(v,u)$ 这两条路径的权值是不一样的。</li></ul><p><del>其它的就问题不大了。</del></p><h3 id="Main-Code"><a href="#Main-Code" class="headerlink" title="Main Code"></a>Main Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1.5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, a[N], ans;</span><br><span class="line"><span class="type">int</span> root, sum, maxx[N], siz[N];</span><br><span class="line"><span class="type">int</span> fa[N], v1[N], v2[N], l1[N], s2[N], cnt, top[N], p[N], dep[N], maxdep;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> k,b,id;</span><br><span class="line"><span class="built_in">line</span>()&#123;&#125;</span><br><span class="line"><span class="built_in">line</span>(<span class="type">int</span> _k,<span class="type">int</span> _b,<span class="type">int</span> _id)&#123; id=_id, k=_k, b=_b;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">val</span><span class="params">(<span class="type">int</span> x)</span></span>&#123; <span class="keyword">return</span> x*k+b;&#125;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">t[p].id=t[p].b=t[p].k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> ;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>,l,mid), <span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,line f)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!t[p].id)&#123; t[p]=f; <span class="keyword">return</span> ;&#125;</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(t[p].<span class="built_in">val</span>(mid)&lt;f.<span class="built_in">val</span>(mid))<span class="built_in">swap</span>(t[p],f);</span><br><span class="line"><span class="keyword">if</span>(t[p].<span class="built_in">val</span>(l)&lt;f.<span class="built_in">val</span>(l))<span class="built_in">update</span>(p&lt;&lt;<span class="number">1</span>,l,mid,f);</span><br><span class="line"><span class="keyword">if</span>(t[p].<span class="built_in">val</span>(r)&lt;f.<span class="built_in">val</span>(r))<span class="built_in">update</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> t[p].<span class="built_in">val</span>(x);</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)<span class="keyword">return</span> <span class="built_in">max</span>(t[p].<span class="built_in">val</span>(x),<span class="built_in">query</span>(p&lt;&lt;<span class="number">1</span>,l,mid,x));</span><br><span class="line"><span class="keyword">else</span><span class="keyword">return</span> <span class="built_in">max</span>(t[p].<span class="built_in">val</span>(x),<span class="built_in">query</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">calsiz</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fat)</span></span>&#123;</span><br><span class="line">siz[x]=<span class="number">1</span>; maxx[x]=<span class="number">0</span>, fa[x]=fat;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y:g[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[y]||y==fat)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">calsiz</span>(y,x);</span><br><span class="line">siz[x]+=siz[y]; maxx[x]=<span class="built_in">max</span>(maxx[x],siz[y]);</span><br><span class="line">&#125;</span><br><span class="line">maxx[x]=<span class="built_in">max</span>(maxx[x],sum-siz[x]);</span><br><span class="line"><span class="keyword">if</span>(maxx[x]&lt;maxx[root])root=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">caldis</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> val1,<span class="type">int</span> val2,<span class="type">int</span> sum2,<span class="type">int</span> tp)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x!=root&amp;&amp;!tp)tp=x;</span><br><span class="line">dep[x]=dep[fa[x]]+<span class="number">1</span>;</span><br><span class="line">maxdep=<span class="built_in">max</span>(maxdep, dep[x]);</span><br><span class="line"><span class="type">bool</span> f=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y:g[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[y]&amp;&amp;y!=fa[x])&#123;</span><br><span class="line">f=<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">caldis</span>(y,val1+sum2+a[y],val2+dep[x]*a[y],sum2+a[y],tp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!f)&#123; p[++cnt]=x; v1[cnt]=val1, v2[cnt]=val2, s2[cnt]=sum2-a[root], l1[cnt]=dep[x], top[cnt]=tp;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfz</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fat)</span></span>&#123;</span><br><span class="line">vis[root]=<span class="literal">true</span>;</span><br><span class="line">cnt=<span class="number">0</span>; maxdep=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">caldis</span>(root,a[root],<span class="number">0</span>,a[root],<span class="number">0</span>);</span><br><span class="line">p[++cnt]=root, v1[cnt]=a[root], v2[cnt]=s2[cnt]=top[cnt]=<span class="number">0</span>, l1[cnt]=<span class="number">1</span>;</span><br><span class="line">top[<span class="number">0</span>]=top[cnt+<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,maxdep);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;)&#123;</span><br><span class="line"><span class="type">int</span> j=i;</span><br><span class="line"><span class="keyword">while</span>(top[j]==top[i])ans=<span class="built_in">max</span>(ans,<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,maxdep,l1[j])+v1[j]), ++j; j=i;</span><br><span class="line"><span class="keyword">while</span>(top[j]==top[i])<span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,maxdep,<span class="built_in">line</span>(s2[j],v2[j],j)), ++j; i=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,maxdep);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=cnt;i&gt;=<span class="number">1</span>;)&#123;</span><br><span class="line"><span class="type">int</span> j=i;</span><br><span class="line"><span class="keyword">while</span>(top[j]==top[i])ans=<span class="built_in">max</span>(ans,<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,maxdep,l1[j])+v1[j]), --j; j=i;</span><br><span class="line"><span class="keyword">while</span>(top[j]==top[i])<span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,maxdep,<span class="built_in">line</span>(s2[j],v2[j],j)), --j; i=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y:g[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[y])<span class="keyword">continue</span>;</span><br><span class="line">sum=siz[y]; maxx[root=<span class="number">0</span>]=INF;</span><br><span class="line"><span class="built_in">calsiz</span>(y,x), <span class="built_in">calsiz</span>(root,<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">dfz</span>(root,x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x,y;i&lt;n;++i)cin&gt;&gt;x&gt;&gt;y, g[x].<span class="built_in">pb</span>(y), g[y].<span class="built_in">pb</span>(x);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;a[i];</span><br><span class="line">maxx[root=<span class="number">0</span>]=INF; sum=n;</span><br><span class="line"><span class="built_in">calsiz</span>(<span class="number">1</span>,<span class="number">-1</span>); <span class="built_in">calsiz</span>(root,<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">dfz</span>(root,<span class="number">-1</span>);</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P5504-JSOI2011-柠檬"><a href="#P5504-JSOI2011-柠檬" class="headerlink" title="P5504 [JSOI2011] 柠檬"></a>P5504 [JSOI2011] 柠檬</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>给定 $n$ 个整数 $x_i$，要求把这些整数不重不漏地划分成若干个小段，并给每个小段一个常数 $x_0$ 那么这个小段的贡献就是 $x_0\times s_{x_0}^2$，其中 $s_{x_0}$ 是指 $x_0$ 在这段区间中出现的次数。</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>首先，一个很重要的结论是对于第 $i$ 个位置，转移过来的决策点显然需要满足 $x_i&#x3D;x_j$，否则考虑从 $x_{j+1}$ 转移过来反而可以多一个 $x_j$ 的贡献。</p><p>于是，我们计 $s_i$ 表示第 $i$ 个位置是 $x_i$ 第 $s_i$ 次出现，并且设 $f_i$ 表示分到 $i$ 的最大价值，不难得到方程：</p><p>$$f_i&#x3D;f_{j-1}+x_i\times (s_i-s_{j-1})^2$$</p><p>化简之后得到：</p><p>$$f_i&#x3D;f_{j-1}+x_i\times s_i^2+x_i\times s_{j-1}^2-2\times x_i\times s_{i}\times s_{j-1}$$</p><p>但是注意到这里同时与 $i,j$ 相关的既包含 $s_j$ 项又包含 $s_j^2$ 项，显然不可做。但是我们发现这里的 $x_i$ 完全是个幌子。我们已经得出决策点 $j$ 与 $i$ 满足 $x_i&#x3D;x_j$，那么我们不妨计 $x_i$ 为常数 $c$，于是方程就变成了：</p><p>$$f_i&#x3D;f_{j-1}+cs_i^2+cs_{j-1}^2-2cs_is_{j-1}$$</p><p>移项后得到：</p><p>$$f_{j-1}+cs_{j-1}^2&#x3D;2cs_is_{j-1}+f_i-cs_i^2$$</p><p>直接套李超线段树或者单调栈的板子即可。但是注意，这里对于每个值，我们都需要一个李超线段树来维护，因此这里需要 $10^4$ 棵李超线段树，为了不 $\text{MLE}$，需要动态开点的李超线段树。</p><h2 id="P2497-SDOI2012-基站建设"><a href="#P2497-SDOI2012-基站建设" class="headerlink" title="P2497 [SDOI2012] 基站建设"></a>P2497 [SDOI2012] 基站建设</h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p>给定一条直线上的一些点，通过 $x_i,r_i,v_i$ 来表示这个点的信息，分别表示它的横坐标，以它为切点的圆的半径以及使用它的代价。我们要求第一个点必须被使用，并且如果我们要使用第 $i$ 个点，必须找到一个点 $j$ 使得 $j&lt;i$，并且要以 $i$ 为切点做一个与横坐标轴相切的圆使得它与第 $j$ 个圆相切，计这个圆的半径为 $r_i’$，那么需要额外花费 $\sqrt{r_i’}$ 的代价。求这些点的圆能够到达 $s$ 的最小代价。其中到达 $s$ 被定义为 $\exist i$ 使得 $\operatorname{abs}(s-x_i)\le r_i$。</p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>我们先假设我们已经知道了 $r_i’$，来推动态规划方程。设 $f_i$ 表示选第 $i$ 个点的最小代价，不难得到转移方程：</p><p>$$f_i&#x3D;\min\limits_{j&#x3D;1}^{i-1}{f_j+\sqrt{r_i’}+v_i}$$</p><p>我们需要计算出 $r_i’$ 到底是多少来判断它怎么转移，于是我们先画一张图：</p><p><img src="/P2497.png"></p><p>通过几何关系，不难得到一个直角三角形，在这个三角形里使用勾股定理，得到：</p><p>$$(x_i-x_j)^2+(r’_i-r_j)^2&#x3D;(r_i+r_j)^2$$</p><p>展开并消除两边 $r_i’^2$ 和 $r_j^2$ 项之后，得到：</p><p>$$r_i’&#x3D;\frac{(x_i-x_j)^2}{4r_j}$$</p><p>回带到方程式中，得到：</p><p>$$f_i&#x3D;\min\limits_{j&#x3D;1}^{i-1}{f_j+\sqrt{\frac{(x_i-x_j)^2}{4r_j}}+v_i}&#x3D;\min\limits_{j&#x3D;1}^{i-1}{f_j+\frac{x_i-x_j}{2\sqrt{r_j}}+v_i}$$</p><p>于是我们计 $g_i&#x3D;\frac{1}{2\sqrt{r_i}}$，式子就变成：</p><p>$$f_i&#x3D;f_j+x_ig_j-x_jg_j+v_i$$</p><p>移项得到：</p><p>$$f_i-v_i&#x3D;x_ig_j+f_j-x_jg_j$$</p><p>使用李超线段树维护即可。注意本题需要离散化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;李超线段树&quot;&gt;&lt;a href=&quot;#李超线段树&quot; class=&quot;headerlink&quot; title=&quot;李超线段树&quot;&gt;&lt;/a&gt;李超线段树&lt;/h1&gt;&lt;p&gt;—— 维护多个一次函数单点最值的数据结构&lt;/p&gt;
&lt;h2 id=&quot;基本算法&quot;&gt;&lt;a href=&quot;#基本算法&quot; cla</summary>
      
    
    
    
    
    <category term="算法笔记" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
