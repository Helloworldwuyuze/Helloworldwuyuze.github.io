<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Helloworldwuyuze&#39;s Blog</title>
  
  <subtitle>May all the beauty be blessed</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-07-01T13:32:03.063Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Wu Yuze</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>莫比乌斯反演</title>
    <link href="http://example.com/2024/07/01/Mobius%20Inversion/"/>
    <id>http://example.com/2024/07/01/Mobius%20Inversion/</id>
    <published>2024-07-01T13:30:21.000Z</published>
    <updated>2024-07-01T13:32:03.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="莫比乌斯反演"><a href="#莫比乌斯反演" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h1><h2 id="反演"><a href="#反演" class="headerlink" title="反演"></a>反演</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>假如对于 $f$ 有线性变换：</p><p>$$\begin{cases}F(1) &#x3D; f(1)\ F(2) &#x3D; f(1) + f(2)\ F(3) &#x3D; f(1) + f(3)\ \vdots\F(n) &#x3D; \sum\limits_{d\mid n}f(d)\end{cases}$$</p><p>我们想要知道 $F$ 反推 $f$，那么我们就需要一种运算叫做 <strong>反演</strong>。</p><p>同样地，我们举几个例子：</p><p>$$\begin{cases}f(1) &#x3D; F(1)\ f(2) &#x3D; F(2) - F(1)\ f(3) &#x3D; F(3) - F(1)\ f(4) &#x3D; F(4) - F(2)\ \vdots\ f(n) &#x3D; \sum\limits_{d\mid n} \mu(\frac{n}{d})F(d)\end{cases}$$</p><p>其中，$\mu(n)$ 是一个数论函数，它代表着 $f(n)$ 的系数，可以的取值有 $1,0,-1$。</p><h2 id="引入函数"><a href="#引入函数" class="headerlink" title="引入函数"></a>引入函数</h2><h3 id="莫比乌斯函数"><a href="#莫比乌斯函数" class="headerlink" title="莫比乌斯函数"></a>莫比乌斯函数</h3><h4 id="定义1"><a href="#定义1" class="headerlink" title="定义1"></a>定义1</h4><p>$$\mu(x)&#x3D;\begin{cases}1, &amp;x&#x3D;1\(-1)^k, &amp;x&#x3D;\prod\limits_{i&#x3D;1}^kp_k\0, &amp;\mathrm{otherwise}\end{cases}$$</p><h4 id="性质1-1"><a href="#性质1-1" class="headerlink" title="性质1.1"></a>性质1.1</h4><p>它是一个积性函数，即对于 $p,q$，若 $\gcd(p,q)&#x3D;1$，则 $\mu(p\times q)&#x3D;\mu(p)\times \mu(q)$。</p><blockquote><p><strong>证明</strong></p><p>对于 $p&#x3D;1$ 的情况，显然 $\mu(1\cdot x)&#x3D;\mu(x)\cdot\mu(1)$</p><p>否则，若 $p,q$ 中有一个数有平方因子，那么整个 $p\cdot q$ 必然有平方因子，故 $\mu(p\cdot q)&#x3D;\mu(p)*\mu(q)&#x3D;0$。</p><p>对于一般情况，设 $p&#x3D;\prod\limits_{i&#x3D;1}^{k_1}p_i,q&#x3D;\prod\limits_{i&#x3D;1}^{k_2}p_i$，那么 $\mu(p)&#x3D;(-1)^{k_1},\mu(q)&#x3D;(-1)^{k_2}$，而 $\gcd(p,q)&#x3D;1$，所以 $p\cdot q&#x3D;\prod\limits_{i&#x3D;1}^{k_1+k_2}p_i,mu(p\cdot q)&#x3D;(-1)^{(k_1+k_2)}&#x3D;(-1)^{k_1}\cdot (-1)^{k_2}&#x3D;\mu(p)\cdot \mu(q)$。</p><p>证毕</p></blockquote><h4 id="性质1-2"><a href="#性质1-2" class="headerlink" title="性质1.2"></a>性质1.2</h4><p>$$\sum\limits_{d\mid n}\mu(d)&#x3D;\epsilon(n)$$</p><p>这定理也可以写成 $\mu \ast 1&#x3D;\epsilon$。其中 $\ast$ 是狄利克雷卷积。</p><blockquote><p>证明</p><p>显然，性质 1.2 等价于：</p><p>$$\sum_{d\mid x}\mu(d)&#x3D;\begin{cases}1, &amp;x&#x3D;1\ 0, &amp;\text{otherwise}\end{cases}$$</p><p>容易证明 $x&#x3D;1$ 时该命题成立。</p><p>对于 $x\not &#x3D;1$ 的情况，我们设 $x&#x3D;\prod_{i&#x3D;1}^k p_i^{\alpha_i}$。容易想到所有能够产生贡献的因子都是这 $k$ 个因子的不重复组合，因为有平方的因子的莫比乌斯函数值为0。其中，有 $i$ 个质因子的因子有 $\binom{k}{i}$ 个。由此不难看出原式 $&#x3D;\sum_{i&#x3D;0}^k (-1)^i\binom{k}{i}$。下面分两种情况讨论：</p><ul><li><p>$k$ 为偶数。</p><p>根据公式 $\binom{n}{m}&#x3D;\binom{n-1}{m}+\binom{n-1}{m-1}$，那么原式 $&#x3D;\binom{k}{0}-\binom{k}{1}+\binom{k}{2}-\cdots+\binom{k}{k}&#x3D;(\binom{k-1}{0})-(\binom{k-1}{0}+\binom{k-1}{1})+(\binom{k-1}{1}+\binom{k-1}{2})-\cdots-(\binom{k-1}{k-2}+\binom{k-1}{k-1})+(\binom{k-1}{k-1})$.容易看出两两抵消，最后结果为0。</p></li><li><p>$k$ 为奇数。</p><p>那么 $i$ 与 $k-i$ 奇偶性不同，而 $\binom{k}{i}&#x3D;\binom{k}{k-i}$，因此两两抵消，最终结果为 $0$。</p></li></ul><p>证毕。</p></blockquote><h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><h4 id="定义2"><a href="#定义2" class="headerlink" title="定义2"></a>定义2</h4><p>$$\varphi(x)&#x3D;\sum\limits_{i&#x3D;1}^x[\gcd(i,x)&#x3D;1]$$</p><p>欧拉函数反映了一个数与小于等于它并且与它互质的数的个数。</p><h4 id="性质2-1"><a href="#性质2-1" class="headerlink" title="性质2.1"></a>性质2.1</h4><p>它也是个积性函数，这里我们不证。另外，我们可以写出它的通项公式：$\varphi(x)&#x3D;\prod\limits_{i&#x3D;1}^k(1-\frac{1}{p_i})$。</p><blockquote><p><strong>证明</strong></p><p>设 $x$ 能够质因数分解为 $x&#x3D;\prod\limits_{i&#x3D;1}^{m}p_i^{\alpha_i}$，让 $x$ 减去所有 $p_i$ 的倍数得到 $n-\sum\limits_{i&#x3D;1}^m\left\lfloor\frac{n}{p_i}\right\rfloor$。但是这并不是最终答案，因为还有 $p_i\times p_{i+1}$ 的倍数被算了两边。没错就是容斥原理。然后最终答案就是 $n+\sum\limits_{i&#x3D;1}^{m}(-1)^{i}\sum\limits_{j&#x3D;1}^{k-i+1}\prod\limits_{k&#x3D;j}^{j+i-1}p_k$。最终因式分解就可以得到原式。</p><p>证毕</p></blockquote><p>其实，写出通项公式和之后已经很容易证明它是积性函数了。</p><h3 id="因子函数"><a href="#因子函数" class="headerlink" title="因子函数"></a>因子函数</h3><h4 id="定义3"><a href="#定义3" class="headerlink" title="定义3"></a>定义3</h4><p>$\sigma(x)&#x3D;\sum\limits_{d\mid n}d$。</p><p>它表示了一个数的因子和。</p><h4 id="性质3"><a href="#性质3" class="headerlink" title="性质3"></a>性质3</h4><p>它也是积性函数。</p><blockquote><p><strong>证明</strong></p><p>设 $\sum\limits_{d\mid p}d&#x3D;\sum\limits_{i&#x3D;1}^na_i, \sum\limits_{d\mid q}d&#x3D;\sum\limits_{i&#x3D;1}^mb_i$。其中，因为 $\gcd(p,q)&#x3D;1$，所以 ${a_n}$ 中的元素与 ${b_n}$ 中的互不相同。那么将 ${a_n}$ 与 ${b_n}$ 两两组合就可以补充不漏地得到 $p\cdot q$ 的所有因子，即 $\sigma(p\cdot q)&#x3D;(\sum\limits_{i&#x3D;1}^na_i)(\sum\limits_{i&#x3D;1}^mb_i)&#x3D;\sigma(p)\cdot \sigma(q)$。</p><p>证毕</p></blockquote><h3 id="恒等函数"><a href="#恒等函数" class="headerlink" title="恒等函数"></a>恒等函数</h3><h4 id="定义4"><a href="#定义4" class="headerlink" title="定义4"></a>定义4</h4><p>$$\operatorname{1}(x)&#x3D;1$$</p><p>这个我就不想多说了，其中重要的一点事它是完全积性函数，即对于 $\forall a,b\in \mathbb{N}^{\ast}$，都满足 $\operatorname{1}(a\cdot b)&#x3D;\operatorname{1}(a)\cdot \operatorname{1}(b)$。</p><h3 id="元函数"><a href="#元函数" class="headerlink" title="元函数"></a>元函数</h3><h4 id="定义5"><a href="#定义5" class="headerlink" title="定义5"></a>定义5</h4><p>$$\epsilon(x)&#x3D;[x&#x3D;1]$$</p><p>即这个函数返回 $x$ 是否为 $1$。显然，它也是完全积性函数。</p><h4 id="性质5"><a href="#性质5" class="headerlink" title="性质5"></a>性质5</h4><p>对于任意函数 $f(x)$，它与 $\epsilon$ 的狄利克雷卷积 $f*\epsilon&#x3D;f$。这个请读着自证。</p><h3 id="单位函数"><a href="#单位函数" class="headerlink" title="单位函数"></a>单位函数</h3><h4 id="定义6"><a href="#定义6" class="headerlink" title="定义6"></a>定义6</h4><p>$$\operatorname{Id}(x)&#x3D;x$$</p><p>它返回的是自变量本身。同样，它是完全积性函数。</p><h2 id="狄利克雷卷积"><a href="#狄利克雷卷积" class="headerlink" title="狄利克雷卷积"></a>狄利克雷卷积</h2><p>我们定义：两个函数 $f(x),g(x)$ 间的运算 $\sum\limits_{d|n}f(n)\cdot g(\frac{n}{d})$ 计为 $(f*g)(x)$，称为狄利克雷卷积。它满足交换律、结合律和对加法的分配率。</p><h2 id="结论及证明"><a href="#结论及证明" class="headerlink" title="结论及证明"></a>结论及证明</h2><p>若函数 $F(x)&#x3D;\sum\limits_{d\mid x}f(d)$，则 $f(x)&#x3D;\sum\limits_{d\mid x}\mu(d)F(\frac{x}{d})$ 或 $f(x)&#x3D;\sum\limits_{d\mid x}\mu(\frac{x}{d})F(d)$。这定理又可以写成设 $F&#x3D;f\ast\operatorname{1}$，则 $f&#x3D;F\ast\mu$。</p><blockquote><p><strong>证明</strong></p><p>由 $\mu\ast\operatorname{1}&#x3D;\epsilon$ 和 $F&#x3D;f\ast\operatorname{1}$ 进行推导。</p><p>由 $F&#x3D;f\ast\operatorname{1}$ 可得 $F\ast\mu&#x3D;f\ast\operatorname{1}\ast \mu$，再由 $\mu * 1&#x3D;\epsilon$ 可得 $F<em>\mu&#x3D;f</em>\epsilon&#x3D;f$。</p><p>即 $F*\mu&#x3D;f$。</p><p>证毕</p></blockquote><p>由此可以推导出两条重要结论：</p><ol><li>$\epsilon(n)&#x3D;\sum\limits_{d\mid n}\mu(d)$，也就是 $\epsilon&#x3D;\mu*\operatorname{1}$。</li><li>$n&#x3D;\sum\limits_{d\mid n}\varphi(d)$，也即 $\operatorname{Id}&#x3D;\varphi<em>\operatorname{1}$，或 $\mu</em>\operatorname{Id}&#x3D;\varphi$。</li></ol><p>第一条我们在补充函数- $\mu$ 函数中已经证明，下面给出第二条的证明。</p><blockquote><p><strong>证明</strong></p><p>由欧拉函数的定义得到 $\varphi(n)&#x3D;\sum\limits_{i&#x3D;1}^n[\gcd(i,n)&#x3D;1]&#x3D;\sum\limits_{i&#x3D;1}^n\epsilon(\gcd(i,n))$，由第一条得到原式 $&#x3D;\sum\limits_{i&#x3D;1}^n\sum\limits_{d\mid i,d\mid n}\mu(d)$，改变求和顺序，能够得到原式 $&#x3D;\sum\limits_{d\mid n} \mu(d)\sum\limits_{d\mid i} 1&#x3D;\sum\limits_{d\mid n}\mu(d)\frac{n}{d}&#x3D;\sum\limits_{d\mid n}\mu(d)\operatorname{Id}(\frac{n}{d})$，然后反过来就得到 $\operatorname{Id}&#x3D;\varphi*\operatorname{1}$。</p><p>证毕</p></blockquote><h2 id="小技巧：整除分块"><a href="#小技巧：整除分块" class="headerlink" title="小技巧：整除分块"></a>小技巧：整除分块</h2><h3 id="求：-sum-limits-i-1-n-left-lfloor-frac-n-i-right-rfloor"><a href="#求：-sum-limits-i-1-n-left-lfloor-frac-n-i-right-rfloor" class="headerlink" title="求：$\sum\limits_{i&#x3D;1}^n\left\lfloor\frac{n}{i}\right\rfloor$"></a>求：$\sum\limits_{i&#x3D;1}^n\left\lfloor\frac{n}{i}\right\rfloor$</h3><p>我们注意到：$\left\lfloor\frac{n}{i}\right\rfloor$ 的取值至多只有 $O(\sqrt n)$ 的数量级，因此我们只需要知道每个取值有多少个 $i$ 能够取到就可以在 $O(\sqrt{n})$ 内求出这个值。如何快速求出有多少个 $i$ 能取到呢？下面给出定理：</p><p>定理：$\frac{n}{i}$ 的取值中能够取到最大的 $i$ 是 $\left\lfloor\frac{n}{\left\lfloor\frac{n}{i}\right\rfloor}\right\rfloor$。</p><p>下面给出证明：</p><blockquote><ul><li><p>充分性：设 $j&#x3D;\left\lfloor\frac{n}{\left\lfloor\frac{n}{i}\right\rfloor}\right\rfloor$，那么显然有 $\left\lfloor\frac{n}{j}\right\rfloor&#x3D;\left\lfloor\frac{n}{\left\lfloor\frac{n}{\left\lfloor\frac{n}{i}\right\rfloor}\right\rfloor}\right\rfloor&#x3D;\left\lfloor\frac{n}{i}\right\rfloor$</p></li><li><p>必要性：因为 $\left\lfloor\frac{n}{i}\right\rfloor&#x3D;\left\lfloor\frac{n}{j}\right\rfloor$，所以 $\left\lfloor\frac{n}{j}\right\rfloor\ge\left\lfloor\frac{n}{i}\right\rfloor$，即 $\frac{n}{j}\ge\left\lfloor\frac{n}{i}\right\rfloor$。</p><p>两边同取倒数，得到 $\frac{j}{n}\le\frac{1}{\left\lfloor\frac{n}{i}\right\rfloor}$,最后同乘以 $n$ 得到 $j\le \left\lfloor\frac{n}{\left\lfloor\frac{n}{i}\right\rfloor}\right\rfloor$。</p></li></ul><p>证毕。</p></blockquote><h3 id="进阶：求-sum-i-cdot-left-lfloor-frac-n-i-right-rfloor"><a href="#进阶：求-sum-i-cdot-left-lfloor-frac-n-i-right-rfloor" class="headerlink" title="进阶：求 $\sum i\cdot\left\lfloor\frac{n}{i}\right\rfloor$"></a>进阶：求 $\sum i\cdot\left\lfloor\frac{n}{i}\right\rfloor$</h3><p>我们拆分一下，把所有结果一致的 $i$ 提出来，能够得到原式 $&#x3D;\sum\limits_{k&#x3D;i}^j k\times \left\lfloor\frac{n}{k}\right\rfloor$，其中 $i,j$ 满足 $\left\lfloor\frac{n}{i}\right\rfloor&#x3D;\left\lfloor\frac{n}{j}\right\rfloor$，且 $i,j$ 分别是这个取值区间的左右端点。因此 $\Leftrightarrow\left\lfloor\frac{n}{i}\right\rfloor\sum\limits_{k&#x3D;i}^j k&#x3D;\left\lfloor\frac{n}{i}\right\rfloor\cdot\frac{(i+j)(j-i+1)}{2}$。</p><p>由此不难看出对于求 $\sum\limits_{i&#x3D;1}^nf(i)\times \left\lfloor\frac{n}{i}\right\rfloor$ 的问题，可以直接将 $\frac{n}{i}$ 相等的 $i$ 取值写成 $\frac{n}{i}\times (s_j-s_{i-1})$，其中 $s_n&#x3D;\sum\limits_{i&#x3D;1}^nf(i)$。</p><h2 id="线性筛法求-mu-函数"><a href="#线性筛法求-mu-函数" class="headerlink" title="线性筛法求 $\mu$ 函数"></a>线性筛法求 $\mu$ 函数</h2><p>性质2：$\mu(x\cdot p)&#x3D;-\mu(x)$，其中 $p$ 为素数且 $p\not\ \mid x$。</p><p>这个定理读者自证即可。</p><p>由此，这性质很适配线性筛。在 <code>i%p[j]==0</code> 时令 <code>mu[i*p[j]]=0</code> 即可，因为至少含有一个完全平方因子 $p^2$。再其它时候都有 <code>i%p[j]!=0</code>，应用性质 2 不难得出 <code>mu[i*p[j]]=-mu[i]</code>。</p><p>下面看几道例题：</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><p>求 $\sum\limits_{i&#x3D;1}^n\sum\limits_{j&#x3D;1}^m[\gcd(i,j)&#x3D;1]$。</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><p>容易看出 $[\gcd(i,j)&#x3D;1]\Leftrightarrow \epsilon(\gcd(i,j))$，又根据 $\epsilon&#x3D;\mu *1$ 不难得到 $\epsilon(\gcd(i,j))\Leftrightarrow \sum\limits_{d\mid \gcd(i,j)}\mu(d)\Leftrightarrow \sum\limits_{d\mid i,d\mid j}\mu(d)$。因此原式可以写成</p><p>$$\sum\limits_{i&#x3D;1}^n\sum\limits_{j&#x3D;1}^m\sum\limits_{d\mid i,d\mid j}\mu(d)$$</p><p>我们改变枚举顺序首先枚举 $d$ 就能够得到</p><p>$$\sum\limits_{d&#x3D;1}^{\min(n,m)}\mu(d)\sum\limits_{d\mid i}^n\sum\limits_{d\mid j}^m1&#x3D;\sum\limits_{d&#x3D;1}^{\min(n,m)}\mu(d)\left\lfloor\frac{n}{d}\right\rfloor\left\lfloor\frac{m}{d}\right\rfloor$$</p><p>于是 $O(\sqrt n)$ 内即可完成一次询问。</p><h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><p>求 $\sum\limits_{i&#x3D;1}^n\sum\limits_{j&#x3D;1}^m[\gcd(i,j)&#x3D;k]$</p><h3 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h3><p>这里先把 $k$ 提出得到</p><p>$$\sum\limits_{i&#x3D;1}^{\left\lfloor\frac{n}{k}\right\rfloor}\sum\limits_{j&#x3D;1}^{\left\lfloor\frac{m}{k}\right\rfloor}[\gcd(i,j)&#x3D;1]$$</p><p>然后按照例 1 就可以得到答案。</p><h3 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h3><p>设素数集合为 $\mathcal{P}$，求 $\sum\limits_{k\in \mathcal{P}}\sum\limits_{i&#x3D;1}^n\sum\limits_{j&#x3D;1}^m[\gcd(i,j)&#x3D;k]$</p><h3 id="Solution3"><a href="#Solution3" class="headerlink" title="Solution3"></a>Solution3</h3><p>首先按照例 2 把二三层求和化简成</p><p>$$\sum\limits_{k\in \mathcal{P}}\sum\limits_{d&#x3D;1}^{\min(\left\lfloor\frac{n}{k}\right\rfloor,\left\lfloor\frac{m}{k}\right\rfloor)}\mu(d)\left\lfloor\frac{n}{k\times d}\right\rfloor\left\lfloor\frac{m}{k\times d}\right\rfloor$$</p><p>然后有一个常用的小技巧，我们枚举 $T&#x3D;k\times d$，得到</p><p>$$\sum\limits_{T&#x3D;1}^{\min(n,m)}\left\lfloor\frac{n}{T}\right\rfloor\left\lfloor\frac{m}{T}\right\rfloor\sum\limits_{k\in \mathcal{P},k\mid T}\mu(\frac{T}{k})$$</p><p>注意到最后一个求和是可以预处理的，它只与一个变量 $T$ 有关，我们枚举 $k\in \mathcal{P}$ 然后给它的 $i$ 倍加上 $\mu(i)$ 即可。</p><h3 id="例4"><a href="#例4" class="headerlink" title="例4"></a>例4</h3><p>求 $\sum\limits_{i&#x3D;1}^n\sum\limits_{j&#x3D;1}^md(ij)$，其中 $d(x)&#x3D;\sum\limits_{d\mid x}1$。</p><h3 id="Solution4"><a href="#Solution4" class="headerlink" title="Solution4"></a>Solution4</h3><p>首先摆出公式 $d(i,j)&#x3D;\sum\limits_{x\mid i}\sum\limits_{y\mid j}[\gcd(x,y)&#x3D;1]$。</p><p>于是式子就变成了</p><p>$$\sum\limits_{i&#x3D;1}^n\sum\limits_{j&#x3D;1}^m\sum\limits_{x\mid i}\sum\limits_{y\mid j}[\gcd(x,y)&#x3D;1]$$</p><p>先枚举 $x,y$ 得到</p><p>$$\sum\limits_{x&#x3D;1}^n\sum\limits_{y&#x3D;1}^m\left\lfloor\frac{n}{x}\right\rfloor\left\lfloor\frac{m}{y}\right\rfloor\epsilon(\gcd(x,y))$$</p><p>按习惯改写 $x,y$ 为 $i,j$，然后把 $\epsilon$ 莫比乌斯反演，得到：</p><p>$$\sum\limits_{i&#x3D;1}^n\sum\limits_{j&#x3D;1}^m\left\lfloor\frac{n}{i}\right\rfloor\left\lfloor\frac{m}{j}\right\rfloor\sum\limits_{d\mid i,d\mid j}\mu(d)$$</p><p>改而枚举 $d$ 得到</p><p>$$\sum\limits_{d&#x3D;1}^{\min(n,m)}\mu(d)\sum\limits_{i&#x3D;1}^{\left\lfloor\frac{n}{d}\right\rfloor}\sum\limits_{j&#x3D;1}^{\left\lfloor\frac{m}{d}\right\rfloor}\left\lfloor\frac{n}{i}\right\rfloor\left\lfloor\frac{m}{j}\right\rfloor&#x3D;\sum\limits_{d&#x3D;1}^{\min(n,m)}\mu(d)(\sum\limits_{i&#x3D;1}^{\left\lfloor\frac{n}{d}\right\rfloor}\left\lfloor\frac{n}{i}\right\rfloor)(\sum\limits_{j&#x3D;1}^{\left\lfloor\frac{m}{d}\right\rfloor}\left\lfloor\frac{m}{j}\right\rfloor)$$</p><p>最后套上整除分治就可以在 $O(T\times \sqrt N)$ 内得到答案。</p><p>关于 $d(ij)&#x3D;\sum\limits_{x\mid i}\sum\limits_{y\mid j}[\gcd(i,j)&#x3D;1]$ 的证明：</p><blockquote><p><strong>证明</strong></p><p>我们考虑对 $ij$ 的每一个因子进行唯一映射，即构建自变量为 $ij$ 的因子的函数。显然，如果一个因子包含 $p^{\alpha_1}$，而 $i$ 中含有 $p^{\alpha_2}$，$j$ 中含有 $p^{\alpha_3}$，那么当 $\alpha_2&gt;\alpha_1$ 时，我们规定用所有的 $i$ 中的 $p$，否则规定用 $\alpha_1-\alpha_2$ 个 $j$ 的 $p$，这样分别计为 $i_{\alpha_2}$ 和 $j_{\alpha_1-\alpha_2}$，因此 $i$ 与 $j$ 不会同时出现一个因子，即枚举到的两个因子互质。</p><p>证毕。</p></blockquote><h3 id="例题5"><a href="#例题5" class="headerlink" title="例题5"></a>例题5</h3><p>有 $t$ 次询问，每一次询问包含两个数 $n,m$，求：</p><p>$$\prod_{i&#x3D;1}^n\prod_{j&#x3D;1}^mf_{\gcd(i,j)}\pmod {10^9+7}$$</p><p>其中 $f_x$ 表示的是斐波那契数列。即：</p><p>$$f_n&#x3D;\begin{cases}0, &amp;x&#x3D;0\ 1, &amp; x&#x3D;1\ f_{n-1}+f_{n-2}, &amp;x\ge 2\end{cases}$$</p><h3 id="Solution5"><a href="#Solution5" class="headerlink" title="Solution5"></a>Solution5</h3><p>首先，我们考虑枚举 $d &#x3D; \gcd(i,j)$：</p><p>$$\begin{equation}\begin{aligned}\prod_{i&#x3D;1}^n\prod_{j&#x3D;1}^mf_{\gcd(i,j)}&amp;&#x3D;\prod_{d&#x3D;1}^n\prod_{i&#x3D;1}^n\prod_{j&#x3D;1}^m[\gcd(i,j)&#x3D;d]f_{\gcd(i,j)}\&amp;&#x3D;\prod_{d&#x3D;1}^nf_{d}^{\sum\limits_{i&#x3D;1}^{\left\lfloor\frac{n}{d}\right\rfloor}\sum\limits_{j&#x3D;1}^{\left\lfloor\frac{m}{d}\right\rfloor}[\gcd(i,j)&#x3D;1]}\end{aligned}\nonumber\end{equation}$$</p><p>单独拿出来指数的部分，得到：</p><p>$$\begin{equation}\begin{aligned}\sum_{i&#x3D;1}^{\left\lfloor\frac{n}{d}\right\rfloor}\sum_{j&#x3D;1}^{\left\lfloor\frac{m}{d}\right\rfloor}[\gcd(i,j)&#x3D;1]&#x3D;&amp;\sum_{x&#x3D;1}^{\left\lfloor\frac{n}{d}\right\rfloor}\mu(x)\left\lfloor\frac{n}{dx}\right\rfloor\left\lfloor\frac{m}{dx}\right\rfloor\end{aligned}\nonumber\end{equation}$$</p><p>显然，这个式子可以整除分块，然后外面再套一层整除分块和一个快速幂，就完成了 $O(n\log n)$ 处理一次询问。但是仍然不够。</p><p>考虑设 $T &#x3D; dx$，于是有</p><p>$$\begin{equation}\begin{aligned}<br>\prod_{d&#x3D;1}^nf_{d}^{\sum\limits_{x&#x3D;1}^{\left\lfloor\frac{n}{d}\right\rfloor}\mu(x)\left\lfloor\frac{n}{dx}\right\rfloor\left\lfloor\frac{m}{dx}\right\rfloor}<br>&#x3D;&amp;\prod_{T&#x3D;1}^n\prod_{d\mid T}f_d^{\mu(\frac{T}{d})\left\lfloor\frac{n}{T}\right\rfloor\left\lfloor\frac{m}{T}\right\rfloor}<br>\&#x3D;&amp;\prod_{T&#x3D;1}^n(\prod_{d\mid T}f_d^{\mu(\frac{T}{d})})^{\left\lfloor\frac{n}{T}\right\rfloor\left\lfloor\frac{m}{T}\right\rfloor}<br>\end{aligned}\nonumber\end{equation}$$</p><p>这一步变换是因为我们把 $f_d$ 上的指数 $\sum\limits_{x&#x3D;1}^{\left\lfloor\frac{n}{d}\right\rfloor}\mu(x)\left\lfloor\frac{n}{dx}\right\rfloor\left\lfloor\frac{m}{dx}\right\rfloor$ 拆开来看。对于每一个 $d$ 的倍数 $kd$，我们令它贡献到 $f_d$ 的指数上一个 $\mu(k)\left\lfloor\frac{n}{kd}\right\rfloor\left\lfloor\frac{m}{kd}\right\rfloor$，也就和原来的式子是相等的。</p><p>这样，我们就可以预处理上式括号中括进去的东西，复杂度为调级数，而整体的复杂度变成 $O(\sqrt{n}\log n)$。于是正道题目的复杂度为 $O(T\sqrt n\log n + n\ln n)$。</p><h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><h3 id="常用公式"><a href="#常用公式" class="headerlink" title="常用公式"></a>常用公式</h3><h4 id="最基本的公式"><a href="#最基本的公式" class="headerlink" title="最基本的公式"></a>最基本的公式</h4><p>首先，就是莫比乌斯反演的基本公式：</p><p>$$\mu\ast \operatorname{1}&#x3D;\epsilon$$</p><p>使用普通的形式，即：</p><p>$$[n&#x3D;1]&#x3D;\sum_{d\mid n}\mu(d)$$</p><h4 id="稍加变形"><a href="#稍加变形" class="headerlink" title="稍加变形"></a>稍加变形</h4><p>对于 $[n&#x3D;k]$ 的情况，我们可以把 $k$ 提出来，也就是看成 $[\frac{n}{k}&#x3D;1]$，即</p><p>$$[n&#x3D;k]&#x3D;[\frac{n}{k}&#x3D;1]&#x3D;\sum_{d\mid \frac{n}{k}}\mu(d)$$</p><h4 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h4><p>稍微加入一点应用，即求</p><p>$$\sum_{i&#x3D;1}^n\sum_{j&#x3D;1}^n\epsilon(\gcd(i,j))$$</p><p>这个直接变形 $\epsilon$，然后改变枚举顺序即可：</p><p>$$\begin{equation}\begin{aligned}<br>\sum_{i&#x3D;1}^n\sum_{j&#x3D;1}^n\epsilon(\gcd(i,j))<br>&#x3D;&amp;\sum_{i&#x3D;1}^n\sum_{j&#x3D;1}^n\sum_{d\mid i,d\mid j}\mu(d)<br>\&#x3D;&amp;\sum_{d&#x3D;1}^n\mu(d)\sum_{i&#x3D;1}^{id\le n}\sum_{j&#x3D;1}^{jd\le n}1<br>\&#x3D;&amp;\sum_{d&#x3D;1}^n\mu(d)\sum_{i&#x3D;1}^{\left\lfloor\frac{n}{d}\right\rfloor}\sum_{j&#x3D;1}^{\left\lfloor\frac{n}{d}\right\rfloor}1<br>\&#x3D;&amp;\sum_{d&#x3D;1}^n\mu(d)\left\lfloor\frac{n}{d}\right\rfloor ^2<br>\end{aligned}\nonumber\end{equation}$$</p><h4 id="再加一点小技巧"><a href="#再加一点小技巧" class="headerlink" title="再加一点小技巧"></a>再加一点小技巧</h4><p>考虑求下面这个东西：</p><p>$$\sum_{i&#x3D;1}^n\sum_{j&#x3D;1}^n[\gcd(i,j)&#x3D;p]\ (p\in \mathcal{P})$$</p><p>显然，我们首先枚举 $p$：</p><p>$$\sum_{i&#x3D;1}^n\sum_{j&#x3D;1}^n[\gcd(i,j)&#x3D;p]\ (p\in \mathcal{P})&#x3D;\sum_{p&#x3D;1,p\in \mathcal{P}}^n\sum_{i&#x3D;1}^n\sum_{j&#x3D;1}^n[\gcd(i,j)&#x3D;p]$$</p><p>然后莫比乌斯反演：</p><p>$$\begin{equation}\begin{aligned}\sum_{p&#x3D;1,p\in \mathcal{P}}^n\sum_{i&#x3D;1}^n\sum_{j&#x3D;1}^n[\gcd(i,j)&#x3D;p]&#x3D;&amp;\sum_{p&#x3D;1,p\in \mathcal{P}}^n\sum_{i&#x3D;1}^{\left\lfloor\frac{n}{p}\right\rfloor}\sum_{j&#x3D;1}^{\left\lfloor\frac{n}{d}\right\rfloor}\sum_{d\mid i,d\mid j}\mu(d)\&#x3D;&amp;\sum_{p&#x3D;1,p\in \mathcal{P}}^n\sum_{d&#x3D;1}^n\mu(d)\sum_{i&#x3D;1}^{\left\lfloor\frac{n}{pd}\right\rfloor}\sum_{j&#x3D;1}^{\left\lfloor\frac{n}{pd}\right\rfloor}1\&#x3D;&amp;\sum_{p&#x3D;1,p\in \mathcal{P}}^n\sum_{d&#x3D;1}^n\mu(d)\left\lfloor\frac{n}{pd}\right\rfloor^2\end{aligned}\nonumber\end{equation}$$</p><p>再然后。。。似乎优化不了了。但是我们可以设 $T&#x3D;pd$，然后转而枚举 $T$，就能够得到：</p><p>$$\sum_{p&#x3D;1,p\in \mathcal{P}}^n\sum_{d&#x3D;1}^n\mu(d)\left\lfloor\frac{n}{pd}\right\rfloor^2$$</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;莫比乌斯反演&quot;&gt;&lt;a href=&quot;#莫比乌斯反演&quot; class=&quot;headerlink&quot; title=&quot;莫比乌斯反演&quot;&gt;&lt;/a&gt;莫比乌斯反演&lt;/h1&gt;&lt;h2 id=&quot;反演&quot;&gt;&lt;a href=&quot;#反演&quot; class=&quot;headerlink&quot; title=&quot;反演&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="算法笔记" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Tree 题解</title>
    <link href="http://example.com/2024/07/01/Tree/"/>
    <id>http://example.com/2024/07/01/Tree/</id>
    <published>2024-07-01T13:30:21.000Z</published>
    <updated>2024-07-01T13:31:34.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tree-CF1111E"><a href="#Tree-CF1111E" class="headerlink" title="Tree (CF1111E)"></a>Tree (CF1111E)</h1><h2 id="Des"><a href="#Des" class="headerlink" title="Des"></a>Des</h2><p>给定一棵树和若干次询问。每次询问有若干个数，前三个为 $k,m,r$ 分别表示节点数量，分组数量和根节点。即选中树上的 $k$ 个节点，在 $r$ 为根的情况下至多分成 $m$ 组有多少种分法，要求每个组内不能出现祖先关系。</p><p>其中 $\sum k\le 10^5, m\le 300$。</p><h2 id="Sol"><a href="#Sol" class="headerlink" title="Sol"></a>Sol</h2><p>是不是一眼虚树，但其实完全没必要。考虑动态规划。我们发现一个点能分到哪几个组里只与它有多少个关键节点祖先有关。因此，我们可以假设我们已经知道了它有多少个祖先，并且都做完了这些祖先的动态规划，然后试着转移当前节点。</p><p>因为 $m$ 很小，所以我们完全可以设成二维的状态 $f_{i,j}$ 表示前 $i$ 个点分成 $j$ 组的方案数。那么一个点可以分到原来的组里面，也可以自己一个组。而它不能分到祖先在的组里面。因此，我们设 $s(u)$ 表示 $u$ 有多少个关键节点祖先，那么很容易得到转移方程：</p><p>$$f_{i,j} &#x3D; \max{ j - s(i), 0}\times f_{i-1, j} + f_{i-1, j-1}$$</p><p>然后就可以考虑如何先计算祖先。我们发现可以提前把点按照 $dfn$ 排序，这样就一定能够保证祖先在 $u$ 之前就被处理到。但是每一次的根节点不一样，因此我们可以考虑先计算出 $s(u)$，这样 $s(u)$ 小的一定是大的的祖先。那么 $s(u)$ 使用树剖求 $(r, u)$ 路径上的关键节点数量即可。复杂度 $O(n\log^2n +nm)$。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,PII&gt; PIII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">3e2</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,q,m,k,r;</span><br><span class="line"><span class="type">int</span> a[N], s[N], f[N][M];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> BIT&#123;</span><br><span class="line"><span class="type">int</span> b[N];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123; <span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))b[i]+=k;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123; <span class="type">int</span> ans=<span class="number">0</span>; <span class="keyword">for</span>(<span class="type">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))ans+=b[i]; <span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> lowbit</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> cut&#123;</span><br><span class="line"><span class="type">int</span> dfn[N], rk[N], top[N], siz[N], son[N], dep[N], fa[N], idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fat)</span></span>&#123;</span><br><span class="line">fa[x] = fat, siz[x] = <span class="number">1</span>, dep[x] = dep[fat]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y:g[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(y==fat)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(y,x);</span><br><span class="line">siz[x]+=siz[y];</span><br><span class="line"><span class="keyword">if</span>(siz[y]&gt;siz[son[x]])son[x]=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> tp)</span></span>&#123;</span><br><span class="line">top[x] = tp, dfn[x] = ++idx, rk[idx] = x;</span><br><span class="line"><span class="keyword">if</span>(son[x])<span class="built_in">dfs2</span>(son[x], tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y:g[x])</span><br><span class="line"><span class="keyword">if</span>(y!=son[x] &amp;&amp; y!=fa[x])<span class="built_in">dfs2</span>(y, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x] != top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])<span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="comment">// cout&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;&quot; &quot;&lt;&lt;top[x]&lt;&lt;endl;</span></span><br><span class="line">ans += BIT::<span class="built_in">query</span>(dfn[x]) - BIT::<span class="built_in">query</span>(dfn[top[x]]<span class="number">-1</span>);</span><br><span class="line">x = fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&lt;dep[y])<span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="comment">// cout&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">return</span> ans + BIT::<span class="built_in">query</span>(dfn[x]) - BIT::<span class="built_in">query</span>(dfn[y]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>, x, y; i&lt;=n; ++i)cin&gt;&gt;x&gt;&gt;y, g[x].<span class="built_in">pb</span>(y), g[y].<span class="built_in">pb</span>(x);</span><br><span class="line">cut::<span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>), cut::<span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line">cin&gt;&gt;k&gt;&gt;m&gt;&gt;r;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;++i)cin&gt;&gt;a[i], BIT::<span class="built_in">update</span>(cut::dfn[a[i]], <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;++i)s[i] = cut::<span class="built_in">query</span>(a[i], r) - <span class="number">1</span>;</span><br><span class="line"><span class="comment">// for(int i=1;i&lt;=k;++i)cout&lt;&lt;s[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line"><span class="built_in">sort</span>(s+<span class="number">1</span>, s+<span class="number">1</span>+k);</span><br><span class="line">f[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i&lt;=k; ++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>, _end = <span class="built_in">min</span>(i, m); j&lt;=_end; ++j)</span><br><span class="line">f[i][j] = (<span class="built_in">max</span>(j-s[i], <span class="number">0ll</span>) * f[i<span class="number">-1</span>][j] % MOD + f[i<span class="number">-1</span>][j<span class="number">-1</span>]) % MOD;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)ans = (ans + f[k][i]) % MOD;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;++i)BIT::<span class="built_in">update</span>(cut::dfn[a[i]], <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Tree-CF1111E&quot;&gt;&lt;a href=&quot;#Tree-CF1111E&quot; class=&quot;headerlink&quot; title=&quot;Tree (CF1111E)&quot;&gt;&lt;/a&gt;Tree (CF1111E)&lt;/h1&gt;&lt;h2 id=&quot;Des&quot;&gt;&lt;a href=&quot;#Des&quot; c</summary>
      
    
    
    
    
    <category term="题解笔记" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>平衡树</title>
    <link href="http://example.com/2024/07/01/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    <id>http://example.com/2024/07/01/%E5%B9%B3%E8%A1%A1%E6%A0%91/</id>
    <published>2024-07-01T13:30:21.000Z</published>
    <updated>2024-07-01T13:31:23.646Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h1><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>我一般写二叉搜索树&#x2F;平衡树的时候习惯用指针来写。它可以做到纯动态内存，但是同样的，写的时候会增加很多不必要的麻烦。比如说每次需要判断当前的指针是不是 <code>null</code>。下面介绍一些指针需要用到的基本操作：</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>很常见的一个错误的定义方式是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node* ls, rs;</span><br></pre></td></tr></table></figure><p>这里的 <code>*</code> 是修饰 <code>ls</code> 的，而非 <code>node</code>。因此，定义的时候应写成：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node *ls, *rs;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node *son[<span class="number">2</span>];</span><br></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><p>对于结构体</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    node *son[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> siz, cnt, val, key;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>调用 <code>root</code> 中的 <code>val</code> 应写成 <code>root-&gt;val</code> 而非 <code>root.val</code>，一般的，它也可以嵌套使用，比如 <code>root-&gt;son[0]-&gt;siz</code>。</p><h3 id="判空"><a href="#判空" class="headerlink" title="判空"></a>判空</h3><p>在 <code>pointer</code> 类型中，判空的方法是 <code>root == nullptr</code>，或者 <code>root == NULL</code>。我习惯性写上：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> null nullptr</span></span><br></pre></td></tr></table></figure><p>来简化代码。</p><h3 id="新建指针"><a href="#新建指针" class="headerlink" title="新建指针"></a>新建指针</h3><p>因为要做到完全动态，所以内存就需要不断地申请和释放。于是申请内存就可以在结构体内定义一个初始化函数 <code>node</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    node *son[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> siz, val, cnt, key;</span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> val): <span class="built_in">siz</span>(<span class="number">1</span>), <span class="built_in">cnt</span>(<span class="number">1</span>), <span class="built_in">val</span>(val)&#123; key=<span class="built_in">rand</span>(), son[<span class="number">0</span>]=son[<span class="number">1</span>]=null; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样，在定义的时候就只需要：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newnode = <span class="keyword">new</span> <span class="built_in">node</span>(val);</span><br></pre></td></tr></table></figure><h3 id="删除指针"><a href="#删除指针" class="headerlink" title="删除指针"></a>删除指针</h3><p>这里如果我们需要删除一个 <code>root</code>，类型为 <code>node*</code>，则：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> root, root = null;</span><br></pre></td></tr></table></figure><p>注意第二个语句不能省略，否则在某些情况下可能会导致错误。</p><h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><p><code>tuple</code> 是 <code>pair</code> 的一个拓展，是真正的多元变量。即它可以表示一个 $n$ 元组 $(x_1,x_2,\dots,x_n)$。使用方法和 <code>pair</code> 差不多，如由 <code>double double string</code> 组成的三元组可以写成 <code>tuple&lt;double, double, string&gt;</code>。而另一个函数 <code>tie</code> 功能与 <code>make_pair</code> 类似。它可以表示一个 $n$ 元组。如在赋值的时候就可以使用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tie</span>(l, mid, r) = <span class="built_in">SplitByRank</span>( root-&gt;son[<span class="number">0</span>], rk);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Warning</strong></p><p>当函数的返回类型为 <code>tuple&lt;&gt;</code> 时，我们不能返回 <code>tie</code> 函数形成的多元组，而应该直接用大括号把所有的元素括起来。如 <code>return &#123;root-&gt;son[0], mid, r&#125;;</code>。</p></blockquote><h2 id="二叉搜索树（Balanced-Search-Tree）"><a href="#二叉搜索树（Balanced-Search-Tree）" class="headerlink" title="二叉搜索树（Balanced Search Tree）"></a>二叉搜索树（Balanced Search Tree）</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul><li>对于一个节点 $p$，如果它的权值为 $val$，它的左儿子的权值小于 $val$，右儿子的权值大于 $val$。</li><li>它的左儿子和右儿子也是二叉搜索树。</li></ul><p>我们称满足这样性质的树叫做二叉搜索树。这其实也就是说，对二叉搜索树进行中序遍历，遍历的结果是单调不降的。</p><p>一般的，一棵二叉搜索树需要维护以下五个信息：</p><ul><li><code>ls</code>，即左儿子，其中 <code>ls-&gt;val &lt; root-&gt;val</code>。</li><li><code>rs</code>，即右儿子，其中 <code>rs-&gt;val &gt; root-&gt;val</code>。</li><li><code>val</code>，即该点的权值。</li><li><code>cnt</code>，即该权值的点的数量。</li><li><code>siz</code>，即当前节点为根的子树的大小。</li></ul><p>如果用指针维护，那么写成 <code>struct</code> 就是这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    node *ls, *rs;</span><br><span class="line">    <span class="type">int</span> siz, cnt, val;</span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> val): <span class="built_in">val</span>(val), <span class="built_in">cnt</span>(<span class="number">1</span>), <span class="built_in">siz</span>(<span class="number">1</span>), <span class="built_in">ls</span>(null), <span class="built_in">rs</span>(null) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们设搜索树高度为 $h$，于是可以支持一下操作：</p><h3 id="插入一个数（Insert）"><a href="#插入一个数（Insert）" class="headerlink" title="插入一个数（Insert）"></a>插入一个数（Insert）</h3><p>对于当前根节点 $p$ 和要插入的权值 $val$，我们进行一下操作：</p><ul><li>如果进入空间点，新建一个节点并且值设成 $val$。</li><li>如果 <code>p-&gt;val &gt; val</code>，那么进入 <code>insert(p-&gt;ls, val)</code>。</li><li>如果 <code>p-&gt;val &lt; val</code>，那么进入 <code>insert(p-&gt;rs, val)</code>。</li><li>如果 <code>p-&gt;val == val</code>，那么直接 <code>p-&gt;cnt ++, p-&gt;siz ++</code> 即可。</li></ul><p>其中，修改完之后我们需要一次 <code>push_up</code> 来维护 <code>siz</code>。这个 <code>push_up</code> 可以写在 <code>struct</code> 的里面，即：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    node *ls, *rs;</span><br><span class="line">    <span class="type">int</span> siz, cnt, val;</span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> val): <span class="built_in">val</span>(val), <span class="built_in">cnt</span>(<span class="number">1</span>), <span class="built_in">siz</span>(<span class="number">1</span>), <span class="built_in">ls</span>(null), <span class="built_in">rs</span>(null) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">()</span></span>&#123;</span><br><span class="line">        siz=cnt;</span><br><span class="line">        <span class="keyword">if</span>(son[<span class="number">0</span>]!=null)    siz+=son[<span class="number">0</span>]-&gt;siz;</span><br><span class="line">        <span class="keyword">if</span>(son[<span class="number">1</span>]!=null)    siz+=son[<span class="number">1</span>]-&gt;siz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Warning</strong></p><p>注意这里每一次加之前需要判断是否为空节点。</p></blockquote><p>具体地，我们代码可以写成这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(node *&amp;root, <span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==null)  <span class="keyword">return</span> (<span class="type">void</span>)(root = <span class="keyword">new</span> <span class="built_in">node</span>(val));</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;val==val)  <span class="keyword">return</span> (<span class="type">void</span>)(root-&gt;siz++ ,root-&gt;cnt++);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;val&lt;val)  <span class="built_in">insert</span>(root-&gt;rs, val);</span><br><span class="line">    <span class="keyword">else</span>    <span class="built_in">insert</span>(root-&gt;ls, val);</span><br><span class="line">    root-&gt;<span class="built_in">push_up</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除（Delete）"><a href="#删除（Delete）" class="headerlink" title="删除（Delete）"></a>删除（Delete）</h3><p>与插入类似，只是需要判断是否需要 <code>delete</code> 掉当前节点，另外如果需要 <code>delete</code>，那么还需要判断删掉当前节点之后剩下的树的结构怎么办。</p><p>其中，如果当前节点需要被删除，做以下讨论：</p><ul><li>若果该节点的 左&#x2F;右 儿子是空的，我们直接把 右&#x2F;左 儿子作为当前节点即可。</li><li>否则，寻找 左儿子中最大的节点&#x2F;右儿子中最小的节点 作为当前的根。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">node* <span class="title">remove</span><span class="params">(node *root, <span class="type">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root==null)<span class="keyword">return</span> null;</span><br><span class="line"><span class="keyword">if</span>(root-&gt;key&gt;value)root-&gt;ls=<span class="built_in">remove</span>(root-&gt;ls, value);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;key&lt;value)root-&gt;rs=<span class="built_in">remove</span>(root-&gt;rs, value);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root-&gt;count&gt;<span class="number">1</span>)--root-&gt;count;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root-&gt;ls==null)&#123;</span><br><span class="line">node *tmp = root-&gt;rs;</span><br><span class="line"><span class="keyword">delete</span> root; <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;rs==null)&#123;</span><br><span class="line">node *tmp = root-&gt;ls;</span><br><span class="line"><span class="keyword">delete</span> root; <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">node *tmp = <span class="built_in">FindMin</span>(root-&gt;rs);</span><br><span class="line">root-&gt;key=tmp-&gt;key, root-&gt;count=tmp-&gt;count;</span><br><span class="line">root-&gt;rs=<span class="built_in">remove</span>(root-&gt;rs,tmp-&gt;key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_up</span>(root);</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="根据排名查数值（Get-Value-By-Rank）"><a href="#根据排名查数值（Get-Value-By-Rank）" class="headerlink" title="根据排名查数值（Get Value By Rank）"></a>根据排名查数值（Get Value By Rank）</h3><p>这个跟线段树很类似，就是分别判断在 左儿子&#x2F;当前节点&#x2F;右儿子 即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> size(x) (x==null?0:x-&gt;siz)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetValueByRank</span><span class="params">(node *root, <span class="type">int</span> rk)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==null)  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(rk&lt;=<span class="built_in">size</span>(root-&gt;son[<span class="number">0</span>]))  <span class="keyword">return</span> <span class="built_in">GetValueByRank</span>(root-&gt;son[<span class="number">0</span>], rk);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(rk&lt;=<span class="built_in">size</span>(root-&gt;son[<span class="number">0</span>])+root-&gt;cnt)   <span class="keyword">return</span> root-&gt;val;</span><br><span class="line">    <span class="keyword">else</span>    <span class="keyword">return</span> <span class="built_in">GetValueByRank</span>(root-&gt;son[<span class="number">1</span>], rk-<span class="built_in">size</span>(root-&gt;son[<span class="number">0</span>])-root-&gt;cnt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="根据数值查排名（Get-Rank-By-Value）"><a href="#根据数值查排名（Get-Rank-By-Value）" class="headerlink" title="根据数值查排名（Get Rank By Value）"></a>根据数值查排名（Get Rank By Value）</h3><p>这个也是根据 <code>BST</code> 的性质做就行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetRankByValue</span><span class="params">(node *root, <span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==null)  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(val==root-&gt;val)  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(val&gt;root-&gt;val)<span class="keyword">return</span> <span class="built_in">GetRankByValue</span>(root-&gt;son[<span class="number">1</span>], val) + <span class="built_in">size</span>(root-&gt;son[<span class="number">0</span>]) + root-&gt;cnt;</span><br><span class="line"><span class="keyword">else</span><span class="keyword">return</span> <span class="built_in">GetRankByValue</span>(root-&gt;son[<span class="number">0</span>], val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h1><p>不难看出，我们上述讲的所有的操作复杂度都是 $O(h)$。但是，如果树退化成一根链，我们每一次的复杂度就都变成了 $O(n)$，这显然是不能够满足我们的。因此，我们需要一些操作，在满足 $\text{BST}$ 的性质的同时，使得它最 <strong>平衡</strong>。也就是说，我们需要进行一些操作，使得它最终的形态接近于完全二叉树。这样，我们就能够使得深度在 $O(\log n)$，进而保证时间复杂度正确。</p><h2 id="Treap"><a href="#Treap" class="headerlink" title="Treap"></a>Treap</h2><p>$\text{Treap}$，即为 $\text{Tree}$ 和 $\text{Heap}$ 的结合。我们在 $\text{BST}$ 的基础上，给每一个节点一个关键字 $key$ 用于存储它在该堆上的值的大小。也就是说，$\text{Treap}$ 不仅要满足 $\text{BST}$ 的性质，同时仍然对于关键字 $\text{key}$ 要满足堆的性质。而如果我们对于每一个节点随机生成一个 $\text{key}$，则有证明可以保证堆的深度期望是在 $O(\log n)$ 的。</p><h3 id="有旋-text-Treap"><a href="#有旋-text-Treap" class="headerlink" title="有旋 $\text{Treap}$"></a>有旋 $\text{Treap}$</h3><p>在 <strong>有旋 $\text{Treap}$</strong> 中，我们通过 <strong>旋转（$\text{Rotate}$）</strong> 来维护堆的性质。</p><p>具体地，它又分为 <strong>左旋（zag）</strong> 和 <strong>右旋（zig）</strong>。</p><h4 id="构建结构体"><a href="#构建结构体" class="headerlink" title="构建结构体"></a>构建结构体</h4><p>根据上述，我们需要的是一个值 <code>val</code>，一个关键字 <code>key</code>，大小 <code>siz</code> 和当前数的数量 <code>cnt</code>。同时，我们需要记录左儿子 <code>ls</code> 和右儿子 <code>rs</code>。于是结构台就是下面这个样子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">node *son[<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> siz, cnt, val, key;</span><br><span class="line"><span class="built_in">node</span>(<span class="type">int</span> val): <span class="built_in">val</span>(val), <span class="built_in">siz</span>(<span class="number">1</span>), <span class="built_in">cnt</span>(<span class="number">1</span>), <span class="built_in">key</span>(<span class="built_in">rand</span>())&#123;</span><br><span class="line">son[<span class="number">0</span>] = son[<span class="number">1</span>] = null;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">()</span></span>&#123;</span><br><span class="line">siz=cnt;</span><br><span class="line"><span class="keyword">if</span>(son[<span class="number">0</span>]!=null)siz+=son[<span class="number">0</span>]-&gt;siz;</span><br><span class="line"><span class="keyword">if</span>(son[<span class="number">1</span>]!=null)siz+=son[<span class="number">1</span>]-&gt;siz;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h4><p>如图所示：</p><p><img src="/BT.png"></p><p>左边的图右旋之后变成了右边的图，右边的图左旋之后变成了左边的图。</p><p>其实，这里不难发现，我们 左&#x2F;右 旋转无非就是把原来的祖先变成儿子，儿子变成祖先，这样就可以保证我们维护了堆的性质，进而保证了树的时间复杂度的正确性。具体地，因为两种旋转操作的操作非常类似，所以我们可以直接封装到一个函数里面：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Rotate</span><span class="params">(node *&amp; root, <span class="type">bool</span> type)</span></span>&#123; <span class="comment">//右旋为0，左旋为1</span></span><br><span class="line">node *tmp = root-&gt;son[type];</span><br><span class="line">root-&gt;son[type] = tmp -&gt; son[!type], tmp-&gt;son[!type] = root;</span><br><span class="line">root -&gt; <span class="built_in">push_up</span>(), tmp -&gt; <span class="built_in">push_up</span>();</span><br><span class="line">root = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><ul><li>如果进入空节点，直接新建一个节点。</li><li>如果当前节点的值等于插入的值，该节点的数的数量加一。</li><li>否则，进入 左&#x2F;右 儿子继续查询。</li></ul><p>其中，值得注意的是在查入完之后要注意维护堆的结构。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(node *&amp;root, <span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root==null)<span class="keyword">return</span> (<span class="type">void</span>)(root = <span class="keyword">new</span> <span class="built_in">node</span>(val));</span><br><span class="line"><span class="keyword">if</span>(val==root-&gt;val)<span class="keyword">return</span> (<span class="type">void</span>)(++root-&gt;cnt, ++root-&gt;siz);</span><br><span class="line"><span class="keyword">if</span>(val&lt;root-&gt;val)&#123;</span><br><span class="line"><span class="built_in">Insert</span>(root-&gt;son[<span class="number">0</span>], val);</span><br><span class="line"><span class="keyword">if</span>(root-&gt;son[<span class="number">0</span>]-&gt;key&lt;root-&gt;key)<span class="built_in">Rotate</span>(root, <span class="number">0</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(val&gt;root-&gt;val)&#123;</span><br><span class="line"><span class="built_in">Insert</span>(root-&gt;son[<span class="number">1</span>], val);</span><br><span class="line"><span class="keyword">if</span>(root-&gt;son[<span class="number">1</span>]-&gt;key&lt;root-&gt;key)<span class="built_in">Rotate</span>(root, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">root-&gt;<span class="built_in">pushup_siz</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>与插入大同小异，唯一需要注意的是要大力分讨删除的节点的儿子状态。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Delete</span><span class="params">(node *&amp;root, <span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(val&gt;root-&gt;val)<span class="built_in">Delete</span>(root-&gt;son[<span class="number">1</span>], val);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(val&lt;root-&gt;val)<span class="built_in">Delete</span>(root-&gt;son[<span class="number">0</span>], val);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root-&gt;cnt&gt;<span class="number">1</span>)<span class="built_in">return</span> (<span class="type">void</span>)(root-&gt;cnt--, root-&gt;siz--);</span><br><span class="line"><span class="type">bool</span> fl=root-&gt;son[<span class="number">0</span>]!=null;</span><br><span class="line"><span class="type">bool</span> fr=root-&gt;son[<span class="number">1</span>]!=null;</span><br><span class="line">node *tmp = root;</span><br><span class="line"><span class="keyword">if</span>(!fl&amp;&amp;!fr)<span class="keyword">return</span> (<span class="type">void</span>)(<span class="keyword">delete</span> root, root=null);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(fl&amp;&amp;!fr)root=tmp-&gt;son[<span class="number">0</span>], <span class="keyword">delete</span> tmp;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!fl&amp;&amp;fr)root=tmp-&gt;son[<span class="number">1</span>], <span class="keyword">delete</span> tmp;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">bool</span> type = root-&gt;son[<span class="number">0</span>]-&gt;key &lt; root-&gt;son[<span class="number">1</span>]-&gt;key ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line"><span class="built_in">Rotate</span>(root, type), <span class="built_in">Delete</span>(root-&gt;son[!type], val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">root-&gt;<span class="built_in">pushup_siz</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询前驱后继"><a href="#查询前驱后继" class="headerlink" title="查询前驱后继"></a>查询前驱后继</h4><p>我们以查询前驱为例子，在查询值小于等于根节点的值的时候，我们不断往左儿子跳，否则跳右儿子，并且记录下来当前的值。最后记录下来的值一定就是前驱。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> pretmp, suftmp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindPre</span><span class="params">(node *root, <span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="comment">// cout&lt;&lt;root-&gt;val&lt;&lt;&quot; &quot;&lt;&lt;val&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(val&lt;=root-&gt;val)&#123;</span><br><span class="line"><span class="keyword">if</span>(root-&gt;son[<span class="number">0</span>]!=null)<span class="keyword">return</span> <span class="built_in">FindPre</span>(root-&gt;son[<span class="number">0</span>], val);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// cout&lt;&lt;&quot;QAQ&quot;&lt;&lt;endl;</span></span><br><span class="line">pretmp = root-&gt;val;</span><br><span class="line"><span class="keyword">if</span>(root-&gt;son[<span class="number">1</span>]!=null)<span class="built_in">FindPre</span>(root-&gt;son[<span class="number">1</span>], val);</span><br><span class="line"><span class="keyword">return</span> pretmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindSuf</span><span class="params">(node *root, <span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(val&gt;=root-&gt;val)&#123;</span><br><span class="line"><span class="keyword">if</span>(root-&gt;son[<span class="number">1</span>]!=null)<span class="keyword">return</span> <span class="built_in">FindSuf</span>(root-&gt;son[<span class="number">1</span>], val);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">suftmp = root-&gt;val;</span><br><span class="line"><span class="keyword">if</span>(root-&gt;son[<span class="number">0</span>])<span class="built_in">FindSuf</span>(root-&gt;son[<span class="number">0</span>], val);</span><br><span class="line"><span class="keyword">return</span> suftmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无旋-text-Treap"><a href="#无旋-text-Treap" class="headerlink" title="无旋 $\text{Treap}$"></a>无旋 $\text{Treap}$</h3><p>在 <strong>无旋 $\text{Treap}$</strong> 中，我们通过 <strong>分裂（$\text{Split}$）</strong> 和 <strong>合并（$\text{Merge}$）</strong> 两种操作来维护堆的结构。</p><h4 id="分裂（Split）"><a href="#分裂（Split）" class="headerlink" title="分裂（Split）"></a>分裂（Split）</h4><p>分裂分为 <strong>按值分裂</strong> 和 <strong>按大小分裂</strong> 两种。</p><p>先介绍按值分裂。</p><p>这里，<strong>分裂</strong> 的意思就是把 $\le val$ 的分裂成一棵平衡树，而 $&gt;val$ 的分到另一棵。很明显，在进入一棵子树 $root$ 时，要做如下判断：</p><ul><li>如果 <code>root-&gt;val&lt;=val</code>，则显然，该子树的左子树都小于 $val$，因此我们只需要进入右子树继续递归即可，但注意右子树可能仍然有小于 <code>val</code> 的。</li><li>如果 <code>root-&gt;val&gt;val</code>，则说明该子树右子树都大于 <code>val</code>，直接进入左子树继续递归即可。但注意左子树可能仍然有大于 $val$ 的。</li></ul><p>如果</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二叉搜索树&quot;&gt;&lt;a href=&quot;#二叉搜索树&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树&quot;&gt;&lt;/a&gt;二叉搜索树&lt;/h1&gt;&lt;h2 id=&quot;指针&quot;&gt;&lt;a href=&quot;#指针&quot; class=&quot;headerlink&quot; title=&quot;指针&quot;&gt;&lt;/a&gt;指</summary>
      
    
    
    
    
    <category term="算法笔记" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>树上染色 题解</title>
    <link href="http://example.com/2024/07/01/%E6%A0%91%E4%B8%8A%E6%9F%93%E8%89%B2/"/>
    <id>http://example.com/2024/07/01/%E6%A0%91%E4%B8%8A%E6%9F%93%E8%89%B2/</id>
    <published>2024-07-01T13:30:21.000Z</published>
    <updated>2024-07-01T13:31:48.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="F-树上染色"><a href="#F-树上染色" class="headerlink" title="F - 树上染色"></a>F - 树上染色</h1><h2 id="Des"><a href="#Des" class="headerlink" title="Des"></a>Des</h2><p>给定一棵树，要求在树上把 $m$ 个点染成黑色，并有价值函数</p><p>$$v(E’) &#x3D; \sum_{v_1,v_2\in E’} dis(v_1,v_2) + \sum_{v_1,v_2\in E-E’} dis(v_1,v_2)$$</p><p>求一种染色方式使得最大化 $v(E’)$。</p><h2 id="Sol"><a href="#Sol" class="headerlink" title="Sol"></a>Sol</h2><p>仍然考虑动态规划。</p><p>$f_{u,k}$ 表示 $u$ 子树内选择 $k$ 个 <strong>对答案的贡献</strong>。考虑这和 $f_{u,k}$ 表示 $u$ 子树内选择 $k$ 个 <strong>的价值</strong> 有什么不同。</p><p>对于答案的贡献，我们是默认在 $u$ 子树之外已经选择了 $m-k$ 个其他的黑色节点的，因此对于边 $u\to v$，若有 $v$ 子树内已经选择了 $k$ 个，那么边 $u\to v$ 经过的次数就是 $k\times(m-k)$ 次，因此对答案的贡献就是 $w\times k\times (m-k)$。同理可以计算得到白点的贡献。</p><p>而价值指的是 $u$ 子树内选择 $k$ 个，而 $v$ 子树内选择 $k’$ 个的贡献，这是不好被统计的。</p><p>由第一个设的状态，我们有转移方程：</p><p>$$f_{u,j} &#x3D; \max{f_{v,k} + f_{u,j-k} + w\times k\times (m-k) + w\times (sz_v-k)\times (n-m-sz_v+k)}$$</p><p>但是这样显然会 $\text{TLE}$。这是因为我们需要 $DFS$，并且每个点枚举一个 $j$ 和一个 $k$，复杂度 $O(nk^2)$。无法接受。</p><p>我们做一个上下界优化。显然，$j$ 的上下界是 $[0,\min(m,sz_u)]$，其中 $u$ 是已经遍历到的 $u$ 子树的大小。而 $k$ 的范围是 $[\max(j-sz_u+sz_v,0),\min(sz_v,m)]$。因此，式子就变成了：</p><p>$$f_{u,j} &#x3D; \max_{j&#x3D;0}^{\min(m,sz_u)}\max_{k&#x3D;\max(j-sz_u+sz_v,0)}^{\min(sz_v,m)}{f_{v,k} + f_{u,j-k} + w\times k\times (m-k) + w\times (sz_v-k)\times (n-m-sz_v+k)}$$</p><p>为啥复杂度是对的前几篇题解写得也已经很明确了。这里需要注意的是 $j$ 需要倒序枚举，否则答案会不正确。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;random&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DBG cerr &lt;&lt; __LINE__ &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; __FUNCTION__ &lt;&lt; endl</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DRE default_random_engine</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UID uniform_int_distribution</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 Y1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pi acos(-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> eps (1e-8)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> null nullptr</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,PII&gt; PIII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">5e2</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f[N][N], n, m, siz[N];</span><br><span class="line">vector&lt;PII&gt; g[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">siz[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(PII y:g[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(y.fi == fa)  <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">solve</span>(y.fi, x);</span><br><span class="line">siz[x] += siz[y.fi];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="built_in">max</span>(siz[x], m); j&gt;=<span class="number">0</span>; --j)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="built_in">max</span>(j - siz[x] + siz[y.fi], <span class="number">0ll</span>); k &lt;= <span class="built_in">min</span>(j, siz[y.fi]); ++k)</span><br><span class="line">f[x][j] = <span class="built_in">max</span>(f[x][j], f[y.fi][k] + f[x][j-k] + y.se * k * (m-k) + y.se * (siz[y.fi]-k) * (n-m-siz[y.fi]+k));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x,y,z;i&lt;n;++i)  cin&gt;&gt;x&gt;&gt;y&gt;&gt;z, g[x].<span class="built_in">pb</span>(<span class="built_in">mk</span>(y,z)), g[y].<span class="built_in">pb</span>(<span class="built_in">mk</span>(x,z));</span><br><span class="line"><span class="built_in">solve</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">cout&lt;&lt;f[<span class="number">1</span>][m]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;F-树上染色&quot;&gt;&lt;a href=&quot;#F-树上染色&quot; class=&quot;headerlink&quot; title=&quot;F - 树上染色&quot;&gt;&lt;/a&gt;F - 树上染色&lt;/h1&gt;&lt;h2 id=&quot;Des&quot;&gt;&lt;a href=&quot;#Des&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="题解笔记" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>P1445 [Violet] 樱花 题解</title>
    <link href="http://example.com/2024/07/01/P1445%20[Violet]%20%E6%A8%B1%E8%8A%B1/"/>
    <id>http://example.com/2024/07/01/P1445%20[Violet]%20%E6%A8%B1%E8%8A%B1/</id>
    <published>2024-07-01T13:30:21.000Z</published>
    <updated>2024-07-01T13:30:37.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="P1445-Violet-樱花-题解"><a href="#P1445-Violet-樱花-题解" class="headerlink" title="P1445 [Violet] 樱花 题解"></a>P1445 [Violet] 樱花 题解</h1><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>给定正整数 $n$，求有多少组正整数有序数对 $(x,y)$ 满足 $\frac{1}{x}+\frac{1}{y}&#x3D;\frac{1}{n!}$。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="拆式子"><a href="#拆式子" class="headerlink" title="拆式子"></a>拆式子</h3><p>观察式子 $\frac{1}{x}+\frac{1}{y}&#x3D;\frac{1}{n!}$，同分后移项得到 $x\times y-n!\times (x+y)&#x3D;0$，注意到这个式子中既含有 $x$ 与 $y$ 的乘积又含有它们的和，想到韦达定理，因此两边添加二次项 $(n!)^2$，然后因式分解得到：</p><p>$$(n!-x)(n!-y)&#x3D;(n!)^2$$</p><p>对于任意一个 $x,y$ 满足给定条件的，一定对应着一种 $(n!-x)(n!-y)$ 的乘积方式，也就一定对应着 $(n!)^2$ 的一种分解方式。即每一种 $a,b\in \N$ 使得 $a\times b&#x3D;(n!)^2$，就对应着唯一一组 $x,y$ 满足 $x&#x3D;n!-a, y&#x3D;n!-b$，也就对应着一组解。而行相对应的，一个 $a$ 就能得到唯一一个 $b&#x3D;\frac{(n!)^2}{a}$，因此对于每一个 $a|n$ 都能得到一个整数对 $x,y$ 作为一组解。</p><p>于是问题就转化成了 $(n!)^2$ 有多少个因子。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>设 $n!&#x3D;\prod p_i^{\alpha_i}$，那么 $(n!)^2&#x3D;\prod p_i^{2\times \alpha_i}$，最后的答案就是 $\prod(2\times \alpha_i+1)$。</p><p>于是很自然地想到线性筛出 $n$ 以内的指数作为唯一分解定理中的 $p_i$，在指数上，每隔 $p_i$ 就能够乘一次 $p_i$，而每隔 $p_i^2$ 个数 $p_i$ 又能被多乘一次，因此指数上就是</p><p>$$\sum_{j&#x3D;1}^{p_i^j\le n}\frac{n}{p_i^j}$$</p><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,p[N],cnt,ans=<span class="number">1</span>,a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prime</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!p[i])p[++cnt]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;p[j]*i&lt;=n;++j)&#123;</span><br><span class="line">p[p[j]*i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i%p[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n; <span class="built_in">prime</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=p[i];j&lt;=n;j=j*p[i])a[i]+=n/j;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)</span><br><span class="line">ans=ans*(<span class="number">2</span>*a[i]+<span class="number">1</span>)%MOD;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;P1445-Violet-樱花-题解&quot;&gt;&lt;a href=&quot;#P1445-Violet-樱花-题解&quot; class=&quot;headerlink&quot; title=&quot;P1445 [Violet] 樱花 题解&quot;&gt;&lt;/a&gt;P1445 [Violet] 樱花 题解&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    
    <category term="题解笔记" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>P3557 题解</title>
    <link href="http://example.com/2024/07/01/P3557%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2024/07/01/P3557%E9%A2%98%E8%A7%A3/</id>
    <published>2024-07-01T13:30:21.000Z</published>
    <updated>2024-07-01T13:32:14.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="P3557-题解"><a href="#P3557-题解" class="headerlink" title="P3557 题解"></a>P3557 题解</h1><h2 id="Des"><a href="#Des" class="headerlink" title="Des"></a>Des</h2><p>给定一张无向图，其中有 $n$ 个点 $m$ 条边，保证存在一个长度为 $k$ 的序列 $p_k$ 使得标记 $p_k$ 即 $p_k$ 一步能够到达的地方之后，所有的点都被标记。现在要求标记两步之内能够到达的点，求一种构造的方法使得所有点被标记。</p><h2 id="Sol"><a href="#Sol" class="headerlink" title="Sol"></a>Sol</h2><p>首先摆出结论：</p><blockquote><p>对于一张图，我们计 <code>vis[x]</code> 表示节点 $x$ 的标记情况。每一次更新的时候，我们找到一个 $x$ 使得 <code>vis[x]==false</code>，然后标记所有 $x$ 两步之内能够到达的点，最后统计一下我们进行了多少次操作即可。</p></blockquote><p>下面我们来 <strong>证明这个 <del>显而易见</del></strong> 的结论：</p><p>首先，对于原图，我们知道，对于任意一个点 $x$，总存在 $i\in [1,k]$ 使得 $\operatorname{dis}(x,p_i)&#x3D;1$ 或 $x&#x3D;p_i$。</p><ul><li>如果 $\operatorname{dis}(x,p_i)&#x3D;1$，则我们在这里标记一定会在距离为 $1$ 的地方标记到 $p_i$，进而标记 $p_i$ 原来标记到的点。这样显然不劣。</li><li>如果 $x&#x3D;p_i$，那么同样地，$x$ 可以标记到 $p_i$ 原来标记得到和一些原来标记不到的点，因此也是不劣的。</li></ul><p>又，对于每一个新标记的点，至少会覆盖到一个 $p_i$ 使得之后不需要再标记。因此新的标记的点的数量总不超过 $k$。</p><p>于是我们就可以遍历 $1-n$，遇到没有标记的就标记一下。但是注意要遍历所有的两个距离之内能够到达的点，否则可能会因为标记卡住了而无法继续标记新的节点。</p><p>但这样复杂度为什么是对的呢？</p><p>我们考虑对于一个点标记点 $p_i$，之后 $p_i$ 和 $p_i$ 一步能够到达的点会遍历一次所有的边。而它们周围一步能够到达的点都已经都标记完了，下一次再遍历到它们一定是距离标记点 $2$ 时。这时就不需要再遍历它们的边了。因此，每个点的边只会被遍历一次，这就保证了复杂度的正确性。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, m, k, st[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans, g[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> st)</span></span>&#123;</span><br><span class="line">vis[x] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(st == <span class="number">2</span>)<span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y:g[x])<span class="built_in">dfs</span>(y, st+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x,y;i&lt;=m;++i)cin&gt;&gt;x&gt;&gt;y, g[x].<span class="built_in">pb</span>(y), g[y].<span class="built_in">pb</span>(x);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">if</span>(!vis[i])ans.<span class="built_in">pb</span>(i), <span class="built_in">dfs</span>(i, <span class="number">0</span>);</span><br><span class="line">cout&lt;&lt;ans.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x:ans)cout&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;P3557-题解&quot;&gt;&lt;a href=&quot;#P3557-题解&quot; class=&quot;headerlink&quot; title=&quot;P3557 题解&quot;&gt;&lt;/a&gt;P3557 题解&lt;/h1&gt;&lt;h2 id=&quot;Des&quot;&gt;&lt;a href=&quot;#Des&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="题解笔记" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Counting Arrays 题解</title>
    <link href="http://example.com/2024/07/01/Counting%20Arrays/"/>
    <id>http://example.com/2024/07/01/Counting%20Arrays/</id>
    <published>2024-07-01T13:30:21.000Z</published>
    <updated>2024-07-01T13:30:50.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Counting-Arrays"><a href="#Counting-Arrays" class="headerlink" title="Counting Arrays"></a>Counting Arrays</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定数 $x,y$ 求序列 $a_y$ 的个数使得 $\prod_{i&#x3D;1}^ya_i&#x3D;x$。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h3><p>要将 $n$ 个完全一样的小球放进 $m$ 个盒子里面，要求不能有空盒子，就可以在 $n-1$ 个缝隙中插入 $m-1$ 个板子将 $n$ 分成 $m$ 份，于是容易得到方案数为 $\binom{n-1}{m-1}$。</p><p>但如果每个盒子中可以为空，就可以再加入 $m$ 个小球使得每个盒子必然被分到一个，然后在这 $n+m$ 个小球中插入 $m-1$ 块板子，于是最后答案就变成 $\binom{n+m-1}{m-1}$.</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>设 $x&#x3D;\prod_{i&#x3D;1}^kp_i^{\alpha_i}$，那么我们可以将这 $\sum\alpha_i$ 个质因数扔给 $y$ 个盒子，注意到这些质因子可能不同，因此不能整体使用插板法求方案数，而应该每个 $\alpha_i$ 分别做一次插板再乘起来。即答案为：</p><p>$$\prod \binom{\alpha_i+y-1}{y-1}$$</p><p>但注意到 $a_i$ 可以为负数，这样我们就可以令前 $y-1$ 个数可以正也可以负，最后一个来决定整个乘积的正负性，即答案有多乘以 $2^{y-1}$。</p><p>于是最终的答案就是:</p><p>$$2^{y-1}\times \prod\binom{\alpha_i+y-1}{y-1}$$</p><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t,x,y,fact[N],infact[N],p[N],prime[N],cnt,minn[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(m)&#123;</span><br><span class="line"><span class="keyword">if</span>(m&amp;<span class="number">1</span>)ans=ans*x%MOD;</span><br><span class="line">x=x*x%MOD; m&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;m)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> fact[n]*infact[n-m]%MOD*infact[m]%MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Prime</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">1000000</span>;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!prime[i])prime[++cnt]=i, minn[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;i*prime[j]&lt;=<span class="number">1000000</span>;++j)&#123;</span><br><span class="line">prime[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">minn[i*prime[j]]=prime[j];</span><br><span class="line"><span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">Prime</span>();</span><br><span class="line">fact[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N<span class="number">-10</span>;++i)fact[i]=fact[i<span class="number">-1</span>]*i%MOD;</span><br><span class="line">infact[N<span class="number">-10</span>]=<span class="built_in">ksm</span>(fact[N<span class="number">-10</span>],MOD<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=N<span class="number">-11</span>;i&gt;=<span class="number">0</span>;--i)infact[i]=infact[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%MOD;</span><br><span class="line">p[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000000</span>;++i)p[i]=p[i<span class="number">-1</span>]*<span class="number">2</span>%MOD;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="type">int</span> ans=p[y<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span>(x&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>, xx=x;</span><br><span class="line"><span class="keyword">while</span>(xx%minn[x]==<span class="number">0</span>)xx/=minn[x], ++sum;</span><br><span class="line">ans=ans*<span class="built_in">C</span>(sum+y<span class="number">-1</span>,y<span class="number">-1</span>)%MOD;</span><br><span class="line">x=xx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x!=<span class="number">1</span>)ans=ans*<span class="built_in">C</span>(y,y<span class="number">-1</span>)%MOD;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Counting-Arrays&quot;&gt;&lt;a href=&quot;#Counting-Arrays&quot; class=&quot;headerlink&quot; title=&quot;Counting Arrays&quot;&gt;&lt;/a&gt;Counting Arrays&lt;/h1&gt;&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="题解笔记" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CF615D 题解</title>
    <link href="http://example.com/2024/07/01/CF615D%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2024/07/01/CF615D%E9%A2%98%E8%A7%A3/</id>
    <published>2024-07-01T13:30:21.000Z</published>
    <updated>2024-07-01T13:31:05.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CF615D题解"><a href="#CF615D题解" class="headerlink" title="CF615D题解"></a>CF615D题解</h1><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>以给定质因子的形式给定一个数 $n$，并给出具体的质因子，求：</p><p>$$\prod_{d\mid n}d$$</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>我们唯一分解 $n$，使得 $n&#x3D;\prod p_i^{\alpha_i}$，我们考虑对于每一个素数 $p_i$，它在质因子中可能以 $p_i^k(0\le k\le \alpha_i)$ 的形式出现，即一共 $\frac{\alpha_i\times(\alpha_i+1)}{2}$ 次。并且对于每个幂 $k$，都会在别的质因子取任何值的时候出现，即对于一个 $p_i^k$，它会出现 $\frac{\prod_j(\alpha_j+1)}{\alpha_i+1}$ 次，因此它的贡献就是</p><p>$$p_i^{\frac{\prod_j(\alpha_j+1)}{\alpha_i+1}\times\frac{\alpha_i\times(\alpha_i+1)}{2}}&#x3D;p_i^{\frac{\alpha_i\prod(\alpha_i+1)}{2}}$$</p><p>这个东西就计算 $\prod(\alpha_i+1)$，然后每次乘 $\alpha_i$ 放在 $p_i$ 的指数上。</p><p>记 $s&#x3D;\prod(\alpha_i+1)$，于是现在的答案就是</p><p>$$\prod p_i^{\frac{s\times \alpha_i}{2}}$$</p><p>但是 $s\times \alpha_i$ 可能会非常大，而且它在指数上，因此我们用拓展欧拉公式对指数进行降幂。</p><p>因为 $\alpha_i$ 与 $\alpha_i+1$ 都在乘积中，因此除以二一定为整数。但对于模数的情况下，我们并不能保证是整数，因此我们还需要进行判断。</p><ul><li><p>对于 $\alpha_i+1$ 有偶数的情况，再求乘积的时候就将某个 $\alpha_i+1$ 除以二，后面直接乘 $\alpha_i$ 就行。</p></li><li><p>对于 $\alpha_i+1$ 全部为奇数，即 $\alpha_i$ 全部为偶数，直接在最后计算的时候将 $\alpha_i$ 除以二再乘进去就可以了。</p></li></ul><p>具体的看代码吧。</p><h3 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,phi=MOD<span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> t[N],cnt,sum=<span class="number">1</span>;</span><br><span class="line"><span class="type">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(k)&#123;</span><br><span class="line"><span class="keyword">if</span>(k&amp;<span class="number">1</span>)ans=ans*x%MOD;</span><br><span class="line">x=x*x%MOD; k&gt;&gt;=<span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x;i&lt;=n;++i)cin&gt;&gt;x, t[x]++, m=<span class="built_in">max</span>(m,x);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>((t[i]+<span class="number">1</span>)%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;!flag)sum=sum*(t[i]+<span class="number">1</span>)/<span class="number">2</span>%phi, flag=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span>sum=sum*(t[i]+<span class="number">1</span>)%phi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(t[i]==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"><span class="keyword">if</span>(flag)y=sum*t[i]%phi;</span><br><span class="line"><span class="keyword">else</span>y=sum*t[i]/<span class="number">2</span>%phi;</span><br><span class="line">ans=ans*<span class="built_in">ksm</span>(i,y+phi)%MOD;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CF615D题解&quot;&gt;&lt;a href=&quot;#CF615D题解&quot; class=&quot;headerlink&quot; title=&quot;CF615D题解&quot;&gt;&lt;/a&gt;CF615D题解&lt;/h1&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="题解笔记" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Trailing Loves 题解</title>
    <link href="http://example.com/2024/07/01/Trailing%20Loves/"/>
    <id>http://example.com/2024/07/01/Trailing%20Loves/</id>
    <published>2024-07-01T13:29:21.000Z</published>
    <updated>2024-07-01T13:30:03.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Trailing-Loves"><a href="#Trailing-Loves" class="headerlink" title="Trailing Loves"></a>Trailing Loves</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个数 $n$ 求 $n!$ 在 $b$ 进制下末尾 0 的个数。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>很容易想到的是 $n!$ 中有多少个因子 $b$ 就能在末尾产生多少个 0。那么假设</p><p>$$b&#x3D;\prod_{i&#x3D;1}^{k} p_i^{\alpha_i}，n!&#x3D;\prod_{j&#x3D;1}^{m} p_j^{\beta_j}$$</p><p>那么我们就只需要一一对应 $b$ 含有的质因子，取</p><p>$$\min_{i&#x3D;1}^k{\frac{\beta_i}{\alpha_i}}$$</p><p>为答案即可。</p><p>其中 $n!$ 的因子 $p_j$ 的指数可以表示为</p><p>$$\beta_j&#x3D;\sum_{i&#x3D;1}^{p_i\le n}\frac{n}{p^i}$$</p><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,b,p[N],minn=INF,cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> m=n;</span><br><span class="line"><span class="keyword">while</span>(m)    ans+=m/x, m/=x;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;b;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i*i&lt;=b;++i)&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(b%i==<span class="number">0</span>)++sum, b/=i;</span><br><span class="line"><span class="keyword">if</span>(sum==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">minn=<span class="built_in">min</span>(minn,<span class="built_in">fun</span>(i)/sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(b!=<span class="number">1</span>)minn=<span class="built_in">min</span>(minn,<span class="built_in">fun</span>(b));</span><br><span class="line">cout&lt;&lt;minn&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Trailing-Loves&quot;&gt;&lt;a href=&quot;#Trailing-Loves&quot; class=&quot;headerlink&quot; title=&quot;Trailing Loves&quot;&gt;&lt;/a&gt;Trailing Loves&lt;/h1&gt;&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot;</summary>
      
    
    
    
    
    <category term="题解笔记" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2024/06/19/6.15%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2024/06/19/6.15%E9%A2%98%E8%A7%A3/</id>
    <published>2024-06-19T14:54:52.850Z</published>
    <updated>2024-06-18T13:43:52.635Z</updated>
    
    <content type="html"><![CDATA[<h1 id="6-15-题解"><a href="#6-15-题解" class="headerlink" title="6.15 题解"></a>6.15 题解</h1><h2 id="A-星际蛋糕推销"><a href="#A-星际蛋糕推销" class="headerlink" title="A - 星际蛋糕推销"></a>A - 星际蛋糕推销</h2><h3 id="Des"><a href="#Des" class="headerlink" title="Des"></a>Des</h3><p>你有 $n$ 个数，我们希望这 $n$ 个数都是奇数。因此，我们每一次会对于最左边的一个偶数进行减半操作，即把 $a_i$ 变成两个 $\frac{a_i}{2}$ 并放在原位置上。完成操作后求有 $m$ 个询问求第 $i$ 个位置是什么。</p><h3 id="Sol"><a href="#Sol" class="headerlink" title="Sol"></a>Sol</h3><p>显然，若将 $a_i$ 质因数分解，则有：</p><p>$$a_i &#x3D; \prod_{p\in \mathcal{P}} p_i^{\alpha_i}$$</p><p>其中 $p_1&#x3D;2$，因此它会被切 $2^{\alpha_1}$ 次。这样，我们就能够知道每一个数会被分成多少个数，维护一个前缀和表示每个数产生的数截止到哪里，然后每一次二分查找答案即可。复杂度 $O(n\log n)$。</p><h2 id="B-狡猾的商人"><a href="#B-狡猾的商人" class="headerlink" title="B - 狡猾的商人"></a>B - 狡猾的商人</h2><h3 id="Des-1"><a href="#Des-1" class="headerlink" title="Des"></a>Des</h3><p>给定 $m$ 次询问并告诉你答案。具体的，每一次询问形如 $l,r,s$，表示 $\sum\limits_{i&#x3D;l}^ra_i&#x3D;s$。你需要判断存不存在数列 $a_i$ 满足条件。</p><h3 id="Sol-1"><a href="#Sol-1" class="headerlink" title="Sol"></a>Sol</h3><p>让我们把询问写成前缀和的形式。具体的，对于询问 $l,r,s$，我们有 $s_r-s_{l-1} &#x3D; s$。也就是说，从 $l-1\to r$ 经过了 $s$ 才能到达。这个东西我们考虑建图，那么它们合法当且仅当图上的环都自洽。也就是说，如果有 $u\to x$ 权值为 $a$，$x\to v$ 权值为 $b$，则一定有 $u\to v$ 权值为 $a+b$。</p><p>具体的，对于询问 $l,r,s$，我们建立边 $(l-1, r, s)$ 和 $(r, l-1, -s)$，然后跑一遍 $\text{Floyd}$ 传递闭包，如果某一条边不存在就更新，否则就判断是否有 <code>ma[i][j] = ma[i][k] + ma[k][j]</code>。</p><p>（听说这个题还有 $O(n·\alpha(n))$ 的并查集做法，但是 $100$ 的 $n$ 为什么不跑一个简单优美的 $\text{Floyd}$ 呢&#x2F;doge）</p><h2 id="C-字串距离"><a href="#C-字串距离" class="headerlink" title="C - 字串距离"></a>C - 字串距离</h2><h3 id="Des-2"><a href="#Des-2" class="headerlink" title="Des"></a>Des</h3><p>对于两个字符串 $s_1$，$s_2$，我们可以在任意地方补足任意的空格，使得最终的两个字符串长度相等。这样，我们有代价的公式：</p><p>$$\sum_{i&#x3D;1}^{len} |s1_i-s2_i|$$</p><p>其中若 $s1_i$ 或 $s2_i$ 为空格，则规定 $|s1_i-s2_i|&#x3D;k$，而若 $s1_i$ 和 $s2_i$ 都为空格，则有 $|s1_i-s2_i| &#x3D; 0$。</p><h3 id="Sol-2"><a href="#Sol-2" class="headerlink" title="Sol"></a>Sol</h3><p>不难想到，我们设 $f_{i,j}$ 表示 $s1$ 进行到 $i$，$s2$ 进行到 $j$ 的最小代价。其中 $f_{i,j}$ 可以由 $f_{i-1,j}$、$f_{i,j-1}$、$f_{i-1,j-1}$ 三个状态转移过来。其中前两个表示分别用空格去匹配别的字符，而第三个表示用 $s1_{i-1}$ 去匹配 $s2_{j-1}$，因此，就有如下转移方程：</p><p>$$f_{i,j} &#x3D; \min{f_{i-1,j}+k, f_{i,j-1}+k,f_{i-1,j-1}+|s1_{i-1}-s2_{j-1}|}$$</p><p>复杂度 $O(n^2)$。</p><h2 id="D-Marvolo-Gaunt’s-Ring"><a href="#D-Marvolo-Gaunt’s-Ring" class="headerlink" title="D - Marvolo Gaunt’s Ring"></a>D - Marvolo Gaunt’s Ring</h2><h3 id="Des-3"><a href="#Des-3" class="headerlink" title="Des"></a>Des</h3><p>给定序列 $a_n$ 和常数 $p,q,r$，求三元组 $(i,j,k)$ 满足 $i\le j\le k$ 且最小化 $pa_i+qa_j+ra_k$。</p><h3 id="Sol-3"><a href="#Sol-3" class="headerlink" title="Sol"></a>Sol</h3><p>维护一个前缀最大、前缀最小、后缀最大、后缀最小。然后枚举中间点 $j$，向前向后分别 $O(1)$ 求出 $pa_i+ra_k$ 的最大值即可。</p><p>注意要根据 $p,r$ 的正负情况分类讨论。</p><h2 id="E-Running-S"><a href="#E-Running-S" class="headerlink" title="E - Running S"></a>E - Running S</h2><h3 id="Des-4"><a href="#Des-4" class="headerlink" title="Des"></a>Des</h3><p>小可喜欢跑步。</p><p>他每天早上疲惫值为 $0$，在第 $i$ 分钟可以跑 $d_i$ 米，会增加 $1$ 的疲惫值。他疲惫值最多为 $m$。同时，他也可以选择休息。但是选择休息就必须休息到 $0$ 疲惫值，其中疲惫值每分钟降低 $1$。同时，在疲惫值为 $0$ 时，他也可以选择啥也不干，并且最终的疲惫值必须为 $0$。问他最多能跑多远。</p><h3 id="Sol-4"><a href="#Sol-4" class="headerlink" title="Sol"></a>Sol</h3><p>考虑动态规划。</p><p>首先我们想到的是 $f_{i,j}$ 表示前 $i$ 分钟疲惫值为 $j$ 时最远能跑多少。那么显然有转移方程：</p><p>$$f_{i,j} &#x3D; f_{i-1,j-1} + d_i, j\not &#x3D; 0$$</p><p>$$f_{i,0} &#x3D; \min\limits_{j&#x3D;i}^{\max(i-m,0)} f_{j,i-j}$$</p><p>方程 $1$ 很好弄，$O(1)$ 直接搞定，但是第二个可能需要复杂度退化一个 $m$，这不能接受。</p><p>我们考虑一种一遍填表一边刷表的方式。也就是当我们转移完 $f_{i,j}(j\not &#x3D; 0)$ 时，我们令 $f_{i+j,0}\leftarrow f_{i,j}$ 即可。这样就保证了复杂度的正确性。</p><h2 id="F-树上染色"><a href="#F-树上染色" class="headerlink" title="F - 树上染色"></a>F - 树上染色</h2><h3 id="Des-5"><a href="#Des-5" class="headerlink" title="Des"></a>Des</h3><p>给定一棵树，要求在树上把 $m$ 个点染成黑色，并有价值函数</p><p>$$v(E’) &#x3D; \sum_{v_1,v_2\in E’} dis(v_1,v_2) + \sum_{v_1,v_2\in E-E’} dis(v_1,v_2)$$</p><p>求一种染色方式使得最大化 $v(E’)$。</p><h3 id="Sol-5"><a href="#Sol-5" class="headerlink" title="Sol"></a>Sol</h3><p>仍然考虑动态规划。</p><p>$f_{u,k}$ 表示 $u$ 子树内选择 $k$ 个 <strong>对答案的贡献</strong>。考虑这和 $f_{u,k}$ 表示 $u$ 子树内选择 $k$ 个 <strong>的价值</strong> 有什么不同。</p><p>对于答案的贡献，我们是默认在 $u$ 子树之外已经选择了 $m-k$ 个其他的黑色节点的，因此对于边 $u\to v$，若有 $v$ 子树内已经选择了 $k$ 个，那么边 $u\to v$ 经过的次数就是 $k\times(m-k)$ 次，因此对答案的贡献就是 $w\times k\times (m-k)$。同理可以计算得到白点的贡献。</p><p>而价值指的是 $u$ 子树内选择 $k$ 个，而 $v$ 子树内选择 $k’$ 个的贡献，这是不好被统计的。</p><p>由第一个设的状态，我们有转移方程：</p><p>$$f_{u,j} &#x3D; \max{f_{v,k} + f_{u,j-k} + w\times k\times (m-k) + w\times (sz_v-k)\times (n-m-sz_v+k)}$$</p><p>但是这样显然会 $\text{TLE}$。这是因为我们需要 $DFS$，并且每个点枚举一个 $j$ 和一个 $k$，复杂度 $O(nk^2)$。无法接受。</p><p>我们做一个上下界优化。显然，$j$ 的上下界是 $[0,\min(m,sz_u)]$，其中 $u$ 是已经遍历到的 $u$ 子树的大小。而 $k$ 的范围是 $[\max(j-sz_u+sz_v,0),\min(sz_v,m)]$。因此，式子就变成了：</p><p>$$f_{u,j} &#x3D; \max_{j&#x3D;0}^{\min(m,sz_u)}\max_{k&#x3D;\max(j-sz_u+sz_v,0)}^{\min(sz_v,m)}{f_{v,k} + f_{u,j-k} + w\times k\times (m-k) + w\times (sz_v-k)\times (n-m-sz_v+k)}$$</p><p>为啥复杂度是对的前几篇题解写得也已经很明确了。这里需要注意的是 $j$ 需要倒序枚举，否则答案会不正确。</p><h2 id="G-LCA"><a href="#G-LCA" class="headerlink" title="G - LCA"></a>G - LCA</h2><h3 id="Des-6"><a href="#Des-6" class="headerlink" title="Des"></a>Des</h3><p>给定一棵树，有 $q$ 次询问，每次询问形如 $l,r,x$，求：</p><p>$$\sum_{i&#x3D;l}^r \operatorname{dep}[\operatorname{lca}(i,x)]$$</p><h3 id="Sol-6"><a href="#Sol-6" class="headerlink" title="Sol"></a>Sol</h3><p>首先，我们想到把 $l,r$ 拆成两个询问，即 ${l-1, -1}$ 和 ${r,1}$，表示答案乘上 $-1&#x2F;1$ 贡献到 $i$ 中。然后使用扫描线扫描当前的到了第几个节点，并且标记好以方便我们进行查询操作。</p><p>于是，现在的问题就是如何进行修改和查询。</p><p>注意到，如果有些点在 $x$ 的子树内，那么它们的 $lca$ 一定是 $x$，也就是贡献 $\operatorname{dep}[x]$。我们记 $s_x$ 表示 $x$ 子树内被标记的点的数量，那么答案一定有 $s_x\times \operatorname{dep}[x]$。</p><p>再往上一层，我们记 $y&#x3D;fa_x$ 表示 $x$ 的父亲，那么显然，对于所有在 $y$ 子树内但不在 $x$ 子树内的节点和 $x$ 的最近公共祖先显然就是 $y$，那么贡献就是 $(s_y-s_x) \times \operatorname{dep}[y]$。再往上一层，记 $z &#x3D; fa_y$，则有贡献 $(s_z-s_y)\times \operatorname{dep}[z]$。全部加起来，就可以得到 $s_x\times \operatorname{dep}[x] + (s_y-s_x)\operatorname{dep}[y]+(s_z-s_y)\operatorname{dep}[z]&#x3D;s_x(\operatorname{dep}[x]-\operatorname{dep}[y])+s_y(\operatorname{dep}[y]-\operatorname{dep[z]})+s_z\operatorname{dep}[z]$，其中 $\operatorname{dep}[x]-\operatorname{dep}[y]&#x3D;\operatorname{dep}[y]-\operatorname{dep}[z]&#x3D;\operatorname{dep}[z]&#x3D;1$，于是式子就是 $s_x+s_y+s_z$。</p><p>通过上面的式子我们不难推出，询问 $x$ 的值就是 $x$ 及 $x$ 所有的父亲的 $s_x$ 之和。换句话说，是 $(1,x)$ 路径上的 $s_x$ 和。</p><p>我们再来看修改会带来什么影响。我们想知道的是每个点的子树中被标记的点的数量，那么对于一个点 $x$，当它加入了树中，他所有的祖先的 $s_x$ 都应该加一。也就是在路径 $(1,x)$ 上区间 $+1$。</p><p>在回头梳理一下解题过程：</p><ul><li>将询问 $l,r,x$ 拆成 $l-1,x,-1$ 和 $r,x,1$。</li><li>从左到右扫描节点，先进行修改再处理询问。</li><li>修改操作使用树剖在 $(1,x)$ 的路径上区间 $+1$。</li><li>查询操作使用树剖求 $(1,x)$ 路径上的区间和。</li></ul><p>使用树剖+线段树即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;6-15-题解&quot;&gt;&lt;a href=&quot;#6-15-题解&quot; class=&quot;headerlink&quot; title=&quot;6.15 题解&quot;&gt;&lt;/a&gt;6.15 题解&lt;/h1&gt;&lt;h2 id=&quot;A-星际蛋糕推销&quot;&gt;&lt;a href=&quot;#A-星际蛋糕推销&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2024/06/19/6.13%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2024/06/19/6.13%E9%A2%98%E8%A7%A3/</id>
    <published>2024-06-19T14:54:38.131Z</published>
    <updated>2024-06-19T14:54:18.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="6-13-题解"><a href="#6-13-题解" class="headerlink" title="6.13 题解"></a>6.13 题解</h1><h2 id="D-Glass-Carving"><a href="#D-Glass-Carving" class="headerlink" title="D - Glass Carving"></a>D - Glass Carving</h2><h3 id="Des"><a href="#Des" class="headerlink" title="Des"></a>Des</h3><p>有一个 $w\times h$ 的玻璃每一次可以在 横&#x2F;竖 方向上某一个位置切一刀，求最后的最大的矩形面积。</p><h3 id="Sol"><a href="#Sol" class="headerlink" title="Sol"></a>Sol</h3><p>首先，一个显而易见的结论是，对于横方向和纵方向，我们都取最大值，于是答案就是它们的乘积。</p><p>考虑如何维护横方向和纵方向的最大值。</p><p>因为切刀是在 $(x,x+1)$ 的中间切的，这很不好，因此我们把矩形变成 $(2w-1)\times(2h-1)$ 大小，其中对于 $\forall i \in [1,n)$，第 $2i$ 个位置表示原来 $(i,i+1)$ 的 <strong>缝隙</strong>。这样，我们在修改的时候就可以精确地找到它的位置。</p><p>于是我们使用两只线段树，分别统计横向和纵向的切割情况。初始线段树都设成 $1$，对于一次修改 $x$，我们把 $2x$ 这个地方修改成 $-\infty$，于是最长的长度就是整只线段树的最大子段和。记 $ans$ 是最大子段和，那么它还原回去的最大长度就是 $\frac{ans+1}{2}$。</p><p>当然，你也可以发明一个最长连续 $1$ 的个数，这个东西和最大子段和很像，也不是太难写 <del>（我就是这么写的$QwQ$）</del></p><h2 id="E-树"><a href="#E-树" class="headerlink" title="E - 树"></a>E - 树</h2><h3 id="Des-1"><a href="#Des-1" class="headerlink" title="Des"></a>Des</h3><p>给定一棵树，支持两种操作：</p><ul><li>标记一个点 $x$。</li><li>查询一个点 $x$ 的祖先中，距离 $x$ 最近的被标记的点是哪个。</li></ul><p>其中 $1$ 是根，并且最开始就被标记了。</p><h3 id="Sol-1"><a href="#Sol-1" class="headerlink" title="Sol"></a>Sol</h3><p>这里提供一个很臭的 $n\log^3 n$ 做法。<del>（但是是三个常数很小的 $\log$，因此可以过去。）</del></p><p>首先，如果我们打标记就相当于给节点的权值 $+1$，那么问题就变成了找到 <strong>深度最小的节点使得它到 $x$ 之间没有节点被打标记</strong>，然后输出这个节点的父亲。然后，我们发现，在 $1-x$ 不断向下查找的过程之中，$1-u$ 的标记的点的数量显然是单调不增的。也就是说，如果 $x-u$ 之间存在打标记的点，那么对于 $f &#x3D; fa_u$，显然有 $x-f$ 之间有打标记的点。于是，我们就想到了用倍增来解决这个问题。我们从大到小不断改变二的次幂，凑出一个长度使得 $x-u$ 之间不存在打标记的点。输出 $fa_u$ 即可。</p><p>然后修改就是树上单点修，查询就是树上路径查询，直接剖即可。</p><p>复杂度 $O(n\log ^3 n)$，其中剖和树状数组常数都很小，而倍增是稳定的一个 $\log$。</p><h2 id="F-魔法树"><a href="#F-魔法树" class="headerlink" title="F - 魔法树"></a>F - 魔法树</h2><p>剖的板子，不讲了。</p><h2 id="G-二进制方程"><a href="#G-二进制方程" class="headerlink" title="G - 二进制方程"></a>G - 二进制方程</h2><h3 id="Des-2"><a href="#Des-2" class="headerlink" title="Des"></a>Des</h3><p>有方程形如：</p><p>$$\overline{x_1x_2\dots x_n} &#x3D; \overline{y_1y_2\dots y_n}$$</p><p>其中 $x$ 或 $y$ 的某一些区间会被未知数替代，比如说 $x$ 中的区间 $[3,5]$ 可能会变成 $a$，那么 $a$ 就代表三位二进制数 $\overline{pqr}$。</p><p>若给定一共有多少个未知数、每个未知数占据多少位，求可能的等式的数量。</p><h3 id="Sol-2"><a href="#Sol-2" class="headerlink" title="Sol"></a>Sol</h3><p>我们把两个二进制数拆开来写：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/v667ymag.png"></p><p>如果，我们有 $x[3,5] &#x3D; y[1,3] &#x3D; a$，$x[1,2]&#x3D;y[6,7]&#x3D;b$，则有如下网络关系：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/b017u21j.png"></p><p>也就是有联通块关系如下：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/yywb8mk0.png"></p><p>有两种联通块，也就是有两种不同的选择，于是答案就是 $2^2$。</p><p>但是我们没有考虑方程中 $0$ 和 $1$ 的情况。也就是说，如果某一个位置，比如 $y_2&#x3D;1$，那么总有 $2,4,7$ 这三个地方都是 $1$，也就是说，它们不能自由选择了。于是这里的答案应该是 $2^1&#x3D;2$。</p><p>因此，我们把 $k$ 个变量展开来，再把 $X$ 和 $Y$ 展开来。设 $i$ 个变量的长度为 $len_i$，我们给 $0,1$ 分配一个位置，给变量 $i$ 分配 $len_i$ 个位置并分别标号。对于 $X$ 和 $Y$ 中的一个位置 $X_i$ 和 $Y_i$，总能对应带我们给出的类似于内存条的东西上的一个位置上，我们把这个东西记录下来，然后在并查集上合并 $X_i$ 和 $Y_i$，最后二的联通块个数次幂就是答案。</p><p>值得注意的是，对于 $0$ 和 $1$ 在一个联通块的情况，总需要输出 $0$。</p><h2 id="H-运输计划"><a href="#H-运输计划" class="headerlink" title="H - 运输计划"></a>H - 运输计划</h2><h3 id="Des-3"><a href="#Des-3" class="headerlink" title="Des"></a>Des</h3><p>给定一棵树，在树上有 $m$ 条路径，其中每一条路径形如 $(u,v)$。要求将其中的一条边 $x\to y$ 边权改成 $0$，使得最小化</p><p>$$\max_{i&#x3D;1}^m dis(u_i,v_i)$$</p><h3 id="Sol-3"><a href="#Sol-3" class="headerlink" title="Sol"></a>Sol</h3><p>首先，一个显而易见的结论是，改变的那条边一定在最长的路径之上，否则，答案一定是那条最长的路径。</p><p>于是我们考虑枚举最长路径上的每一条边。对于一条边 $(u,v,w)$，显然，如果将 $w\leftarrow 0$，则所有的路径可以分为两种。一种是经过边 $(u,v,w)$ 的路径；另一种是不经过边 $(u,v,w)$。其中，经过该边的路径显然都需要把最终的答案减去 $w$，而最长的路径又一定经过该边，因此经过该边的路径的长度最大值就是最长的路径长度减去 $w$。</p><p>然后我们再来讨论没有经过该边的路径。</p><p>首先，我们考虑能不能在线求出，但是显然我们并不能够在能够接受的复杂度之内算出不经过该边的路径有哪些，那我们不妨提前都预处理出来。</p><p>对于一条路径 $(u,v,t)$，其中 $t &#x3D; dis(u,v)$，它不经过的边在计算不经过该边的最大路径长度的时候都会把它计算到，因此我们把这些路径跟 $t$ 取一个 $\max$，这样，在处理完所有路径的时候，每条边的 $\max$ 就是不经过该边的最长路径长度。接下来我们考虑如何快速在一条路径之外取 $\max$。由树剖，我们知道，树上的一条路径可以唯一分解成最多 $\log n$ 条 $dfn$ 连续的链，因此，我们把这些连续的 $dfn$ 段记录下来，然后按照左端点排序，这样我们就得到了一堆按照先后排序的没有交的区间。我们把这些区间在 $[1,n]$ 的全集意义下取反集，就可以知道那些边是会被修改的。</p><p>有的同学会问，我们怎么统计边的信息呢？这就用到了一个方法，把边权放到点上统计。具体地，对于外向边 $x\to y$，我们可以把权值 $z$ 统计到 $y$ 上。也就是说，如果有边 $x\to fa_x$，我们把这条边的信息统计到 $x$ 而不是 $fa_x$ 上。特别地，$1$ 号节点不统计任何信息。</p><p>这样，我们就完成了这道题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;6-13-题解&quot;&gt;&lt;a href=&quot;#6-13-题解&quot; class=&quot;headerlink&quot; title=&quot;6.13 题解&quot;&gt;&lt;/a&gt;6.13 题解&lt;/h1&gt;&lt;h2 id=&quot;D-Glass-Carving&quot;&gt;&lt;a href=&quot;#D-Glass-Carving&quot; c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>长链剖分</title>
    <link href="http://example.com/2024/06/11/%E9%95%BF%E9%93%BE%E5%89%96%E5%88%86/"/>
    <id>http://example.com/2024/06/11/%E9%95%BF%E9%93%BE%E5%89%96%E5%88%86/</id>
    <published>2024-06-11T14:52:21.000Z</published>
    <updated>2024-06-11T14:51:38.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="长链剖分"><a href="#长链剖分" class="headerlink" title="长链剖分"></a>长链剖分</h1><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>注意到，有一个和它名字特别相近的算法叫做 <strong>重链剖分</strong>。它是每一次找到大小最大的儿子作为重儿子，这样树的规模就至少缩小了 $\frac{1}{2}$，于是从底部的某一个节点到达根节点的重链数量最多也就 $O(\log n)$ 个。</p><p>它可以帮助我们解决很多问题。比如说我们要在树上维护路径加路径求和，那么就需要它帮助我们在 $O(q \log ^2 n)$ 的复杂度内完成题目。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>作为一个较为重要的辅助工具，我们需要一些定义：</p><ul><li><strong>重儿子：</strong> 最大深度最大的一个儿子。形式化的，$son_u &#x3D; \operatorname{Id} (\max\limits_{v\in son_u} len_v)$，其中 $len_u$ 表示 $u$ 子树中的最大深度。</li><li><strong>重边：</strong> 一个点到它重儿子的那条边叫做重边。形式化的，集合 $E &#x3D; { (u, son_u)}$ 的元素叫做重边。</li><li><strong>重链的顶端：</strong> 若一个点 $u$ 不是它父亲的重儿子，那么它是一条重链的顶端。形式化的，集合 $V &#x3D; {u\mid u \not &#x3D; son_{fa_u}}$ 中的点叫做重链的顶端。</li><li><strong>重链：</strong> 从一个重链的顶点出发，不断跳它的重儿子产生的链叫做重链。形式化的，我们设 $x$ 为一个重链的端点，$y$ 为一个叶子结点，且它们在一条重链上，则称集合 ${(x, y)}$ 中的元素为重链。</li></ul><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>与 <strong>重链剖分</strong> 类似的，我们改一改求 $son_u$ 的过程即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">dep[x] = dep[fa[x][<span class="number">0</span>]] + <span class="number">1</span>, mx[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=t;++i)</span><br><span class="line">fa[x][i] = fa[fa[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y:g[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(y==fa[x][<span class="number">0</span>])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(y);</span><br><span class="line"><span class="keyword">if</span>(mx[y]&gt;mx[son[x]])son[x] = y;</span><br><span class="line">&#125;</span><br><span class="line">mx[x] = mx[son[x]] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> tp)</span></span>&#123;</span><br><span class="line">top[x] = tp;</span><br><span class="line"><span class="keyword">if</span>(x==tp)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, xx = x; i&lt;=mx[x]; ++i, xx = fa[xx][<span class="number">0</span>]) fd[x].<span class="built_in">pb</span>(xx);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, xx = x; i&lt;=mx[x]; ++i, xx = son[xx])sd[x].<span class="built_in">pb</span>(xx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(son[x])<span class="built_in">dfs2</span>(son[x], tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y:g[x])</span><br><span class="line"><span class="keyword">if</span>(y!=fa[x][<span class="number">0</span>]&amp;&amp;y!=son[x])<span class="built_in">dfs2</span>(y, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ul><li>我们设所有重链的顶点的集合为 $V$，则 $\sum\limits_{u\in V} mx_u &#x3D; n$。即所有重链的长度和等于 $n$。<blockquote><p><strong>证明</strong></p><p>显然，对于一个点 $u$ 它属于且仅属于一条重链。于是得证。</p></blockquote></li><li>若一个点 $x$ 的 $k$ 级祖先为 $y$，则 $y$ 所在的重链的长度至少为 $k$。<blockquote><p><strong>证明</strong></p><p>显然，因为 $y$ 的深度至少为 $x$，$y$ 所在的重链再小也不会小于 $x$ 到 $y$ 的距离。因此至少为 $k$。</p></blockquote></li><li>树中的任意一个点 $x$ 到达根节点的路径上走过的长链数量最多为 $O(\sqrt n)$ 个。<blockquote><p><strong>证明</strong></p><p>考虑如何构造一个树使得它达到 $O(\sqrt n)$ 的长链数量。我们设树上一共有 $O(n^2)$ 个点，而且是一棵二叉树。那么每个节点的左儿子是一个深度为 $n$ 的链，而右儿子是一个和当前节点形态基本一致的。也就是说，右儿子节点也是左儿子一条链右儿子形态一样，这样就保证了我们每一次都会选择左儿子当做重儿子，把右儿子当做轻儿子，于是最右下的那个点到根节点也就经过了 $O(n)$ 条长链。数量级也就是 $O(\sqrt n)$ 的。</p></blockquote></li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="求树上的-k-级祖先"><a href="#求树上的-k-级祖先" class="headerlink" title="求树上的 $k$ 级祖先"></a>求树上的 $k$ 级祖先</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>首先我们可以想到使用倍增解决，复杂度 $O(n<br>log n) - O(\log n)$。</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>使用树链剖分解决这个问题也是不错的选择，可以先跳重链来确定 $k$ 级祖先在哪一个重链上，然后通过 $\operatorname{dfn}$ 序就可以 $O(1)$ 求出 $k$ 级祖先。复杂度 $O(n) - O(\log n)$。</p><h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><p>也就是长链剖分了。</p><p>我们需要需处理两个东西：</p><ol><li>和倍增一样的，我们需要维护每个节点的二的非负次幂级祖先在哪里。</li><li>对于每一个重链的端点，我们设该重链的深度为 $d$，那么我们要记录它所在的重链和它的 $1-d$ 级祖先。</li></ol><p>首先我们证明它们复杂度的正确性。第一条肯定是正确的，我们在倍增的时候已经使用过它了。关于第二条，由长链剖分的性质，我们知道所有 $\sum\limits_{u\in V} dep_u &#x3D; n$，也就是说，我们记录所有长链和与长链相等的祖先的信息，最多记录 $O(n)$ 条。这也就保证了第二个预处理的复杂度。</p><p>其次，我们叙述算法过程。</p><ol><li>首先，找到最大的 $i$ 使得 $2^i\le k$。并且令：<br>$$x\leftarrow top_{fa_{x, 2^i}}$$<br>$$k \leftarrow k-2^i$$ </li><li>我们保证了 $i$ 的最大性，也就是说，$2^i\le k&lt;2^{i+1}$。而对于更新完的 $k$，有 $0\le k&lt; 2^i$，而我们通过长链剖分的性质可以知道，因为更新后的 $x$ 已经是某一个点的 $2^i$ 级祖先了，因此 $x$ 所在长链的顶点的深度一定会大于 $2^i$。因此，只要我们到达了更新后的 $x$ 节点，通过我们记录的第 $2$ 条信息，就可以 $O(1)$ 地查询 $k$ 级祖先。</li></ol><p><strong>CODE</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,PII&gt; PIII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> ui;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">ui seed;</span><br><span class="line"><span class="type">int</span> n, q, fa[N][<span class="number">20</span>], root, x, lst, k, dep[N], top[N], mx[N], son[N], t;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N], fd[N], sd[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ui <span class="title">get</span><span class="params">(ui x)</span></span>&#123;</span><br><span class="line">x ^= x &lt;&lt; <span class="number">13</span>; x ^= x &gt;&gt; <span class="number">17</span>; x ^= x &lt;&lt; <span class="number">5</span>;</span><br><span class="line"><span class="keyword">return</span> seed = x; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">dep[x] = dep[fa[x][<span class="number">0</span>]] + <span class="number">1</span>, mx[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=t;++i)</span><br><span class="line">fa[x][i] = fa[fa[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y:g[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(y==fa[x][<span class="number">0</span>])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(y);</span><br><span class="line"><span class="keyword">if</span>(mx[y]&gt;mx[son[x]])son[x] = y;</span><br><span class="line">&#125;</span><br><span class="line">mx[x] = mx[son[x]] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> tp)</span></span>&#123;</span><br><span class="line">top[x] = tp;</span><br><span class="line"><span class="keyword">if</span>(x==tp)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, xx = x; i&lt;=mx[x]; ++i, xx = fa[xx][<span class="number">0</span>]) fd[x].<span class="built_in">pb</span>(xx);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, xx = x; i&lt;=mx[x]; ++i, xx = son[xx])sd[x].<span class="built_in">pb</span>(xx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(son[x])<span class="built_in">dfs2</span>(son[x], tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y:g[x])</span><br><span class="line"><span class="keyword">if</span>(y!=fa[x][<span class="number">0</span>]&amp;&amp;y!=son[x])<span class="built_in">dfs2</span>(y, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>)<span class="keyword">return</span> x;</span><br><span class="line"><span class="type">int</span> tt = <span class="built_in">log</span>(k) / <span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">x = fa[x][tt], k -= (<span class="number">1</span>&lt;&lt;tt);</span><br><span class="line"><span class="type">int</span> up = dep[x] - dep[top[x]];</span><br><span class="line">x = top[x], k-=up;</span><br><span class="line"><span class="keyword">if</span>(k&lt;<span class="number">0</span>)<span class="keyword">return</span> sd[x][-k];</span><br><span class="line"><span class="keyword">else</span><span class="keyword">return</span> fd[x][k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;q&gt;&gt;seed; t = <span class="built_in">log</span>(n) / <span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)&#123;</span><br><span class="line">cin&gt;&gt;fa[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(fa[i][<span class="number">0</span>]==<span class="number">0</span>)root = i;</span><br><span class="line">g[i].<span class="built_in">pb</span>(fa[i][<span class="number">0</span>]), g[fa[i][<span class="number">0</span>]].<span class="built_in">pb</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(root), <span class="built_in">dfs2</span>(root, root);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=q; ++i)&#123;</span><br><span class="line"><span class="type">int</span> x = (<span class="built_in">get</span>(seed) ^ lst) % n + <span class="number">1</span>, k = (<span class="built_in">get</span>(seed) ^ lst) % dep[x];</span><br><span class="line">lst = <span class="built_in">query</span>(x, k);</span><br><span class="line">ans ^= <span class="number">1ll</span> * i * lst;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="长链剖分优化动态规划"><a href="#长链剖分优化动态规划" class="headerlink" title="长链剖分优化动态规划"></a>长链剖分优化动态规划</h3><h4 id="CF1009F"><a href="#CF1009F" class="headerlink" title="CF1009F"></a><a href="https://www.luogu.com.cn/problem/CF1009F">CF1009F</a></h4><p>就是上一场模拟赛的 $F$ 题。这个题除了线段树合并以外，还可以使用长链剖分优化来实现线性做法。</p><p>我们已经知道需要记录每个节点每个深度有多少个节点。我们可以长链剖分之后，对于重重儿子，我们直接继承，而对于轻儿子，我们暴力合并。这样，因为每条重链只会被合并一次，因此我们就可以线性地完成此题。</p><p>对于写法，仍然有很多需要注意的地方。一来是继承的时候需要注意深度的改变。我们不能够直接原封不动的继承过来，而是要把所有的深度都加一。这里有两种解决方法：一是使用指针，让指针后移一位，然后在第一位加上当前节点；二是使用向量 <code>vector</code>，使用动态内存，但是要注意的是存的顺序是反的。也就是说，第 $0$ 个节点其实是深度最大的地方，而 $mx$ 个节点才是深度最小的地方。</p><p>这里提供 <code>vector</code> 写法的 <code>Code</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,PII&gt; PIII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> ui;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, dep[N], son[N], mx[N], fa[N], ans[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N], f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fat)</span></span>&#123;</span><br><span class="line">fa[x] = fat, dep[x] = dep[fat] + <span class="number">1</span>, mx[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y:g[x])</span><br><span class="line"><span class="keyword">if</span>(y!=fat)&#123;</span><br><span class="line"><span class="built_in">dfs1</span>(y, x);</span><br><span class="line"><span class="keyword">if</span>(mx[y]&gt;mx[son[x]])son[x] = y;</span><br><span class="line">&#125;</span><br><span class="line">mx[x] = mx[son[x]] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getans</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(son[x])<span class="built_in">getans</span>(son[x]), <span class="built_in">swap</span>(f[x], f[son[x]]), ans[x] = ans[son[x]];</span><br><span class="line"><span class="comment">// cout&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;son[x]&lt;&lt;&quot; &quot;&lt;&lt;ans[son[x]]&lt;&lt;endl;</span></span><br><span class="line">f[x].<span class="built_in">pb</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// for(int y:f[x])cout&lt;&lt;y&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y:g[x])</span><br><span class="line"><span class="keyword">if</span>(y!=fa[x]&amp;&amp;y!=son[x])&#123;</span><br><span class="line"><span class="built_in">getans</span>(y);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = mx[x] - mx[y] - <span class="number">1</span>; i&lt;mx[y]; ++i, ++j)&#123;</span><br><span class="line">f[x][j] += f[y][i];</span><br><span class="line"><span class="keyword">if</span>(f[x][j]&gt;f[x][ans[x]] || f[x][j]==f[x][ans[x]] &amp;&amp; j&gt;ans[x])ans[x] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f[x][mx[x]<span class="number">-1</span>]&gt;=f[x][ans[x]])ans[x] = mx[x]<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y; i&lt;n; ++i)</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y, g[x].<span class="built_in">pb</span>(y), g[y].<span class="built_in">pb</span>(x);</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>); <span class="built_in">getans</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">cout&lt;&lt;mx[i] - ans[i] - <span class="number">1</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="P5904-HOT-Hotels"><a href="#P5904-HOT-Hotels" class="headerlink" title="P5904 HOT-Hotels"></a><a href="https://www.luogu.com.cn/problem/P5904">P5904 HOT-Hotels</a></h4><p>这里我就放出来给出的 $DP$ 状态和柿子吧，真不知道为什么会有人想到这个题。</p><p>我们设 $f_{u,j} &#x3D; \sum\limits_{v\in \operatorname{subtree}(u)} [d(u,v)&#x3D;j]$，$g_{u,j} &#x3D; \sum\limits_{v_1, v_2\in \operatorname{subtree}(u), v_1\not &#x3D; v_2}[\operatorname{dis}(\operatorname{lca}(v_1,v_2),v_1)&#x3D;\operatorname{dis}(\operatorname{lca}(v_1,v_2),v_2)&#x3D;\operatorname{dis}(\operatorname{lca}(v_1,v_2),u)+j]$。</p><p>于是我们有如下转移：</p><p>$$ans\leftarrow \sum_{u} g_{u,0}$$</p><p>$$ans\leftarrow \sum_{v_1,v_2\in \operatorname{son}(u),v_1\not &#x3D; v_2} f_{v_1,j-1}\times g_{v_2,j+1}$$</p><p>$$g_{u,j}\leftarrow \sum_{x,y\in \operatorname{son}(u), x\not &#x3D; y} f_{x, j-1} \times f_{y, j-1}$$</p><p>$$g_{u,j}\leftarrow \sum_{x\in \operatorname{son}(u)}g_{x, j+1}$$</p><p>$$f_{u,j}\leftarrow \sum_{v\in \operatorname{son}(u)}f_{x, j-1}$$</p><p>然后直接套长链剖分即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,PII&gt; PIII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> ui;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, dep[N], mx[N], fa[N], son[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v[N];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> *f[N], *g[N], p[N&lt;&lt;<span class="number">2</span>], *o = p, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fat)</span></span>&#123;</span><br><span class="line">dep[x] = dep[fat] + <span class="number">1</span>, mx[x] = <span class="number">1</span>, fa[x] = fat;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y:v[x])</span><br><span class="line"><span class="keyword">if</span>(y!=fat)&#123;</span><br><span class="line"><span class="built_in">dfs</span>(y, x);</span><br><span class="line"><span class="keyword">if</span>(mx[y]&gt;mx[son[x]])son[x] = y;</span><br><span class="line">&#125;</span><br><span class="line">mx[x] = mx[son[x]] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(son[x])f[son[x]] = f[x] + <span class="number">1</span>, g[son[x]] = g[x] - <span class="number">1</span>, <span class="built_in">solve</span>(son[x]);</span><br><span class="line">f[x][<span class="number">0</span>] = <span class="number">1</span>, ans += g[x][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y:v[x])</span><br><span class="line"><span class="keyword">if</span>(y!=son[x]&amp;&amp;y!=fa[x])&#123;</span><br><span class="line">f[y] = o, o += mx[y]&lt;&lt;<span class="number">1</span>, g[y] = o, o += mx[y]&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">solve</span>(y);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;mx[y];++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(i)ans += f[x][i<span class="number">-1</span>] * g[y][i];</span><br><span class="line">ans += f[y][i] * g[x][i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;mx[y];++i)&#123;</span><br><span class="line">g[x][i+<span class="number">1</span>] += f[x][i+<span class="number">1</span>] * f[y][i];</span><br><span class="line"><span class="keyword">if</span>(i)g[x][i<span class="number">-1</span>] += g[y][i];</span><br><span class="line">f[x][i+<span class="number">1</span>] += f[y][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x, y ; i&lt;n; ++i)cin&gt;&gt;x&gt;&gt;y, v[x].<span class="built_in">pb</span>(y), v[y].<span class="built_in">pb</span>(x);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>); f[<span class="number">1</span>] = o, o += mx[<span class="number">1</span>]&lt;&lt;<span class="number">1</span>, g[<span class="number">1</span>] = o, o += mx[<span class="number">1</span>]&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">solve</span>(<span class="number">1</span>);</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;长链剖分&quot;&gt;&lt;a href=&quot;#长链剖分&quot; class=&quot;headerlink&quot; title=&quot;长链剖分&quot;&gt;&lt;/a&gt;长链剖分&lt;/h1&gt;&lt;h2 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h</summary>
      
    
    
    
    
    <category term="算法笔记" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>6.8 模拟赛题解</title>
    <link href="http://example.com/2024/06/08/%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2024/06/08/%E9%A2%98%E8%A7%A3/</id>
    <published>2024-06-08T14:50:21.000Z</published>
    <updated>2024-06-11T14:51:05.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="6-8-模拟赛题解"><a href="#6-8-模拟赛题解" class="headerlink" title="6.8 模拟赛题解"></a>6.8 模拟赛题解</h1><h2 id="A-Cut-Ribbon-CF189A"><a href="#A-Cut-Ribbon-CF189A" class="headerlink" title="A. Cut Ribbon (CF189A)"></a>A. Cut Ribbon (CF189A)</h2><h3 id="Des"><a href="#Des" class="headerlink" title="Des"></a>Des</h3><p>给定四个数 $n,a,b,c$，要求把 $n$ 长度的绸带划分为若干段，每一段的长度必须是 $a,b$ 或者 $c$。求最长的划分段数。</p><h3 id="Sol"><a href="#Sol" class="headerlink" title="Sol"></a>Sol</h3><p>显然，我们设 $f_i$ 表示前 $i$ 的长度最长能分多少段，然后显然有：</p><p>$$\left{\begin{matrix} &amp;f_i &#x3D; f_{i-a}+1, \text{if } i\ge a \&amp; f_i&#x3D;f_{i-b}+1, \text{if }i\ge b \&amp; f_i&#x3D;f_{i-c}+1,\text{if }i\ge c\end{matrix} \right.$$</p><p>于是这道题就做完了。复杂度 $O(n)$。</p><h2 id="B-Boredom-CF455A"><a href="#B-Boredom-CF455A" class="headerlink" title="B. Boredom (CF455A)"></a>B. Boredom (CF455A)</h2><h3 id="Des-1"><a href="#Des-1" class="headerlink" title="Des"></a>Des</h3><p>给定一个数列 $a_n$，要求进行若干次操作。每次操作选择一个数 $a_k$，删除所有等于 $a_k-1$ 和 $a_k+1$ 的数，并且获得 $a_k$ 的收益。求最大收益。</p><h3 id="Sol-1"><a href="#Sol-1" class="headerlink" title="Sol"></a>Sol</h3><h6 id="关于我刚开始读错题了以为删除-a-k-1-和-a-k-1-这件事"><a href="#关于我刚开始读错题了以为删除-a-k-1-和-a-k-1-这件事" class="headerlink" title="关于我刚开始读错题了以为删除 $a_{k-1}$ 和 $a_{k+1}$ 这件事"></a><del>关于我刚开始读错题了以为删除 $a_{k-1}$ 和 $a_{k+1}$ 这件事</del></h6><p>显然，如果我们选择了 $a_k$，则之后可以无代价地选择所有等于 $a_k$ 的数，因此我们可以视作一次操作选完了所有等于 $a_k$ 的数。注意到 $a_k$ 的值域只有 $1e5$，因此直接计一个桶 $s_i&#x3D;\sum\limits_{j&#x3D;1}^n [a_j&#x3D;&#x3D;i]\times a_j$，然后进行动态规划。</p><p>设 $f_i$ 表示选到 $i$ 时的最大收益。显然，我们可以选择 $i$，这样最多就只能再选择 $f_{i-2}$；也可以不选择 $i$，这样就等于 $f_{i-1}$，因此，得到转移方程：</p><p>$$f_i&#x3D;\max{ f_{i-2}+s_i, f_{i-1}}$$</p><h2 id="C-奶酪-Luogu-P3958"><a href="#C-奶酪-Luogu-P3958" class="headerlink" title="C. 奶酪 (Luogu P3958)"></a>C. 奶酪 (Luogu P3958)</h2><h3 id="Des-2"><a href="#Des-2" class="headerlink" title="Des"></a>Des</h3><p>给定一些空间坐标系中半径都为 $r$ 的球，两个球两两可达，当且仅当它们相切或相交。问能否从 $z&#x3D;0$ 的平面到达 $z&#x3D;h$ 的平面。</p><h3 id="Sol-2"><a href="#Sol-2" class="headerlink" title="Sol"></a>Sol</h3><p>显然，我们枚举 $\forall i,j\in [1,n]$，并且判断可不可达，可达就连边。顺便判断每个球是否可达 $z&#x3D;0$ 或 $z&#x3D;h$。然后从 $z&#x3D;0$ 开始跑看能否到达 $z&#x3D;h$ 即可。</p><h2 id="D-Pair-of-Numbers"><a href="#D-Pair-of-Numbers" class="headerlink" title="D. Pair of Numbers"></a>D. Pair of Numbers</h2><h3 id="Des-3"><a href="#Des-3" class="headerlink" title="Des"></a>Des</h3><p>给定一个长度为 $n$ 的数列，求最长的区间 $[l,r]$ 使得 $\exist i\in [l,r]$，对于 $\forall j\in [l,r]$ 都有 $a_i\mid a_j$。并且求这些最长区间的左端点。</p><h3 id="Sol-3"><a href="#Sol-3" class="headerlink" title="Sol"></a>Sol</h3><p>显然，题意转化一下就变成了求最长区间 $[l,r]$ 使得</p><p>$$\gcd\limits_{i&#x3D;l}^r a_i&#x3D;\min\limits_{i&#x3D;l}^r a_i$$</p><p>但我们不想求 $\min$，因此可以枚举那个被整除的数 $a_i$，然后向两边拓展。这里可以使用 $ST$ 表来维护区间 $\gcd$，因为 $\gcd$ 显然是数越多值越小，因此可以向两边二分求端点。这样的复杂度是 $ST$ 表一个 $\log$，$\gcd$ 一个 $\log$，查询一个 $\log$，二分一个 $\log$，因此是 $n\log ^2n$。</p><h2 id="E-Cows-POJ-2481"><a href="#E-Cows-POJ-2481" class="headerlink" title="E. Cows (POJ 2481)"></a>E. Cows (POJ 2481)</h2><h3 id="Des-4"><a href="#Des-4" class="headerlink" title="Des"></a>Des</h3><p>给定一些区间 $l_i, r_i$，求每一个区间被多少个别的区间包含。这里，$j$ 区间包含 $i$ 区间被定义为 $l_j\le l_i$ 且 $r_j\ge r_i$ 且 $len_j&gt;len_i$。</p><h3 id="Sol-4"><a href="#Sol-4" class="headerlink" title="Sol"></a>Sol</h3><p>显然，我们可以按照左端点排序，使得一定满足 $l_j\le l_i$。然后在扫过去之后可以让右端点的地方 $+1$，然后统计一下所有 $&gt;r_i$ 的地方有多少个区间，同时统计 $r_i$ 上有多少个与 $i$ 不同的区间即可。</p><p>这里有一些细节。比如说按照左端点排序，左端点相同时按照区间长度从大到小排序。而且统计与 $i$ 相等的区间数量的时候不能提前统计，而是需要早扫描的过程中逐个统计。</p><h2 id="F-Dominant-Indices-CF1009F"><a href="#F-Dominant-Indices-CF1009F" class="headerlink" title="F. Dominant Indices (CF1009F)"></a>F. Dominant Indices (CF1009F)</h2><h3 id="Des-5"><a href="#Des-5" class="headerlink" title="Des"></a>Des</h3><p>给定一棵树，对于树上的每个节点 $u$，求：</p><p>$$f(u) &#x3D; \max\limits_d {\sum_{v\in \text{subtree}(u)} [\operatorname{dis}(v, u)&#x3D;d]}$$</p><h3 id="Sol-5"><a href="#Sol-5" class="headerlink" title="Sol"></a>Sol</h3><p>翻译一下题目，就是对于一棵树上的每一个点 $u$，求 $u$ 的子树内节点数量最多的一层。其中如果有许多层数量相同就选择深度最小的一层。</p><p>本来这个题可以 $O(n)$ 使用长链剖分解决，但是我们不会长链剖分，怎么办呢。显然这个题可以使用线段树合并，也就是从叶子结点开始统计，每一次在自己深度的地方 $+1$，然后父亲合并每一个儿子。线段树的话就需要维护坐左边的最大值即可。</p><h2 id="H-萌萌哒-Luogu-P3295"><a href="#H-萌萌哒-Luogu-P3295" class="headerlink" title="H. 萌萌哒 (Luogu P3295)"></a>H. 萌萌哒 (Luogu P3295)</h2><h3 id="Des-6"><a href="#Des-6" class="headerlink" title="Des"></a>Des</h3><p>要求你填一个 $n$ 位的没有前导零的数，并且有 $m$ 个限制，每个限制形如 $l, r, L,R$，即 $l,r$ 内的数一定要和 $L,R$ 内的一样。求有多少种填法。</p><h3 id="Sol-6"><a href="#Sol-6" class="headerlink" title="Sol"></a>Sol</h3><p>首先看看怎么暴力。显然，对于操作 $l,r,L,R$，我们直接使用并查集，令：</p><p>$$fa_{find(i+l)} &#x3D; find(i+L) (i\in [0, r-l])$$</p><p>然后令 $ans&#x3D;\frac{9}{10}$，输出</p><p>$$ans\times \prod_{i&#x3D;1}^n10^{[find(i)&#x3D;i]}$$</p><p>即可。</p><p>但是显然暴力不能够通过本题。因此我们考虑怎么优化。</p><p>这就不得不谈到一个并查集的 $\text{trick}$。就是建处 $\text{ST}$ 表，然后每一次并查集操作我们拆成两个 $\text{ST}$ 表上的并查集操作。也就是说，对于操作 $l,r,L,R$，我们计 $t&#x3D;\log (r-l)$，则就可以只连接 $f_{l, t} &#x3D; f_{L, t}$ 和 $f_{r-2^{t}+1,t} &#x3D; f_{R-2^t-1, t}$ 即可。</p><p>然后，在下传标记的时候，如果一个点 $i$ 有 $find(i,t) \not &#x3D;i$ 那么就需要下传标记。计 $y &#x3D; find(i,t)$，则 $f_{i, t-1} &#x3D; f_{y, t-1}$，$f_{i+2^{t-1}, t-1} &#x3D; f_{y+2^{t-1}, t-1}$ 即可。</p><p>另外，特别值得注意的一点是，我们总是希望从小到大传递标记，也就是说，在令 $f_{i, t} &#x3D; f{j, t}$ 的时候，我们总希望 $i&lt;j$，这样就可以保证不出现死循环。</p><h2 id="I-Tree-CF1111E"><a href="#I-Tree-CF1111E" class="headerlink" title="I. Tree (CF1111E)"></a>I. Tree (CF1111E)</h2><h3 id="Des-7"><a href="#Des-7" class="headerlink" title="Des"></a>Des</h3><p>给定一棵树。每次询问有若干个数，前三个为 $k,m,r$ 分别表示节点数量，分组数量和根节点。即选中树上的 $k$ 个节点，在 $r$ 为根的情况下至多分成 $m$ 组有多少种分发，要求每个组内不能出现祖先关系。</p><h3 id="Sol-7"><a href="#Sol-7" class="headerlink" title="Sol"></a>Sol</h3><p>是不是一眼虚树，但其实完全没必要。我们发现一个点能分到哪几个组里只与它有多少个关键节点祖先有关。因此，我们可以假设我们已经知道了它有多少个祖先，并且都做完了这些祖先的动态规划，然后试着转移当前节点。</p><p>我们设 $f_{i,j}$ 表示前 $i$ 个点分成 $j$ 组的方案数。那么一个点可以分到原来的组里面，也可以自己一个组。而它不能分到祖先在的组里面。因此，我们设 $s(u)$ 表示 $u$ 有多少个关键节点祖先，那么很容易得到转移方程：</p><p>$$f_{i,j} &#x3D; \max{ j - s(i), 0}\times f_{i-1, j} + f_{i-1, j-1}$$</p><p>然后就可以考虑如何先计算祖先。我们发现可以提前把点按照 $dfn$ 排序，这样就一定能够保证祖先在 $u$ 之前就被处理到。但是每一次的根节点不一样，因此我们可以考虑先计算出 $s(u)$，这样 $s(u)$ 小的一定是大的的祖先。那么 $s(u)$ 使用树剖求 $(r, u)$ 路径上的关键节点数量即可。复杂度 $O(n\log^2n +nm)$。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;6-8-模拟赛题解&quot;&gt;&lt;a href=&quot;#6-8-模拟赛题解&quot; class=&quot;headerlink&quot; title=&quot;6.8 模拟赛题解&quot;&gt;&lt;/a&gt;6.8 模拟赛题解&lt;/h1&gt;&lt;h2 id=&quot;A-Cut-Ribbon-CF189A&quot;&gt;&lt;a href=&quot;#A-Cut-</summary>
      
    
    
    
    
    <category term="题解笔记" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>虚树</title>
    <link href="http://example.com/2024/05/26/Virtual%20Tree/"/>
    <id>http://example.com/2024/05/26/Virtual%20Tree/</id>
    <published>2024-05-26T14:41:21.000Z</published>
    <updated>2024-05-26T14:41:09.615Z</updated>
    
    <content type="html"><![CDATA[<h1 id="虚树-Virtual-Tree"><a href="#虚树-Virtual-Tree" class="headerlink" title=" 虚树 (Virtual Tree) "></a><center> 虚树 (Virtual Tree) </center></h1><h2 id="引入"><a href="#引入" class="headerlink" title=" 引入 "></a><center> 引入 </center></h2><h3 id="消耗战"><a href="#消耗战" class="headerlink" title="消耗战"></a><a href="https://www.luogu.com.cn/problem/P2495">消耗战</a></h3><p>有 $n$ 个点的树和 $m$ 次询问，每次询问先给出一个 $k$，然后给出 $k$ 个数，分别为 $h_i,i\in [1,k]$。求将这些给定点与 $1$ 号点分离的代价。这过程中只允许删除边，并且删除 $(u,v)$ 之间的边需要 $w$ 的代价。</p><p>$1\le n\le 2.5\times 10^5$，$1\le m\le 5\times 10^5$，$\sum\limits k\le 5\times 10^5$。</p><h3 id="朴素做法"><a href="#朴素做法" class="headerlink" title="朴素做法"></a>朴素做法</h3><p>不妨称每次询问给出的点为 <strong>关键点</strong>，考虑动态规划。</p><p>设 $f_u$ 表示隔离以 $u$ 为根节点的子树需要的代价，于是不难得出以下状态转移：</p><ul><li>如果 $u$ 是关键点，那么删除 $\min\limits_{v\in fa_u}{(u,v)}$ 这条边，并加上代价。</li><li>如果 $u$ 不是关键点，那么获得 $\min{\min\limits_{v\in fa_u}{(u,fa_u)},\sum\limits_{v\in son_u}f_v}$ 的代价。</li></ul><p>但是这样每一次动态规划是 $O(n)$ 的，显然无法满足我们的需要。</p><p>注意到 $m$ 与 $k$ 几乎相同的数量级，这就说明 $k$ 在大多数时候相对于 $n$ 来说是极其稀疏的。换句话说，我们在动态规划的时候记录了许多并没有价值和意义的状态。例如我们有树上的链 $u\to\dots\to t\to\dots\to v$，长度为 $500$，但是，只有 $u,v$ 是关键点，那么我们中间记录的 $t$ 就是多余的。</p><p>于是，虚树，出现了 $······$</p><h2 id="虚树"><a href="#虚树" class="headerlink" title=" 虚树 "></a><center> 虚树 <center></h2><p>对于一类需要考虑的点相对于原树很稀疏的、并不需要考虑关键点与关键点之间多余状态的问题，我们可以使用虚树在 $k\log k$ 的复杂度内将问题规模缩小至 $\sum k$ 的数量级，将所需要的状态从原树中提炼出来达到均摊复杂度的目的。</p><p>具体地，对于关键点 $h_i,i\in [1,k]$，我们把它们任意两个点的 $lca$ 加入虚树中，同时再把这些 $lca$ 的 $lca$、$lca$ 的 $lca$ 的 $lca$ 加入 $······$ 直到加入所有点的总 $lca$ 就结束。特别地，一般为了方便，我们总加入我们钦定的根节点 $1$ 或者你的 $root$ 进虚树。这随意的加入是因为虚树本来就是化简原树的结构，显然与原树越相似并不会影响其正确性，只需要我们的关键点都在这里面即可。</p><p>也即，虚树的点集可以表示为：</p><p>$$V&#x3D;{v|\sum_{i&#x3D;1}^m\sum_{j&#x3D;i+1}^m\epsilon(\operatorname{lca}(p_i,p_j)&#x3D;v)}$$</p><blockquote><p><strong>复杂度正确性证明</strong></p><p>找两个节点公共祖先的过程，看起来需要 $n^2 \log n$ 的复杂度。但是我们注意到很多点对的 $\operatorname{lca}$ 是重复的，或者说是不需要被计算的。因此，我们可以给出一种求 $\operatorname{lca}$ 的方式，使得我们至多只计算 $k\log k$ 次就得出虚树的结构。这就需要用到 $\operatorname{dfn}$ 的性质了。</p><p>对于一棵 $n$ 个节点的树，给定关键节点 ${p_m}$，我们按照 $\operatorname{dfn}$ 排序，那么显然，刚开始的 $p_1$ 与 $p_2$ 会产生一个 $\operatorname{lca}$，并且 $\operatorname{dfn}$ 相邻还保证了它的路径之上不再会有关键节点。那么，产生的新节点 $p_{m+1}$ 就继续与 $p_3$ 寻找最近公共祖先，这样，我们最多加入 $n-1$ 个点，就保证了虚数复杂度的正确性。</p></blockquote><h2 id="实现"><a href="#实现" class="headerlink" title=" 实现 "></a><center> 实现 </center></h2><p>这里我着重介绍单调栈维护链的方法（因为另一个方法没有把院里搞冥摆。</p><h3 id="二次排序"><a href="#二次排序" class="headerlink" title="二次排序"></a>二次排序</h3><p>根据我们的叙述，显然可以得到一个二次排序的做法：</p><ul><li>将关键点数组 ${p_k}$ 按照 $\operatorname{dfn}$ 排序。</li><li>对于 $\forall i\in[1,k-1]$，将 $\operatorname{lca}(p_i,p_{i+1})$ 加进数组 $p$ 中，然后再次排序、去重，得到长度为 $m$ 的序列。</li><li>对于 $\forall i\in[1,m-1]$，在 $\operatorname{lca}(p_i,p_{i+1})$ 与 $p_{i+1}$ 之间建一条边。</li></ul><p>然后虚树就建完了。</p><blockquote><p><strong>正确性证明</strong></p><p>第一个排序与随后的处理是我们在 <strong>虚数</strong> 中就已经给过证明了。现在我们证明为什么只需要连边 $(\operatorname{lca}(p_i,p_{i+1}),p_{i+1})$。</p><p>对于 $x,y$，如果 $\operatorname{lca}(x,y)&#x3D;x$，那么就在 $x\to y$ 建边。其中 $\operatorname{dfn}$ 的排序保证了 $x\to y$ 中间不包含其它关键节点。</p><p>否则，如果 $\operatorname{lca}(x,y)&#x3D;l$，那么就把 $l$ 当成 $y$ 的祖先，同样 $\operatorname{dfn}$ 保证了路径上2不会有其它关键节点。</p><p>注意到 $y$ 是祖先的情况是不可能出现的。这是因为 $x$ 的 $\operatorname{dfn}$ 比 $y$ 的要小。</p><p>而且，我们将 $p_1$ 钦定成 $1$ 的话，那么显然会有一条 $(1,p_2)$ 的边，然后剩下的就正常连接即可。这显然对于任何一个点都会正确地连接到树上。边一共 $m-1$ 条。</p></blockquote><p>下面举个栗子：</p><p><img src="/../img/xs1.png"></p><p>关键节点是：</p><p><img src="/../img/xs2.png"></p><p>然后就可以得到需要被加进去的点：</p><p><img src="/../img/xs3.png"></p><p>于是现在点集排序后的顺序是：$1,2,8,5,9,10,11,3,14$。</p><ul><li><p>对一个点对 $(1,0)$，加入边 $1\to 2$。</p></li><li><p>对第二个点对 $(2,8)$，加入 $2\to 8$。</p></li><li><p>第三个点对 $(8,5)$ 加入 $2\to 5$。</p><p>  $\vdots$</p></li><li><p>最后一个点对 $(3,14)$，加入 $3\to 14$。</p></li></ul><p>最后得到虚树：</p><p><img src="/../img/xs4.png"></p><p>提取出来就是这个东西：</p><p><img src="/../img/xs5.png"></p><p>这就建完了虚树。</p><h3 id="单调栈法"><a href="#单调栈法" class="headerlink" title="单调栈法"></a>单调栈法</h3><p>在单调栈中，里面所有的点构成了虚树上的一条链（其实也是原树上的一条链）。我们不断维护链的过程，在弹出的时候就可以顺带着建立边。</p><p>那么问题就变成了如何维护一条链。</p><p>首先，我们仍然需要将数组以 $\operatorname{dfn}$ 序进行排序。</p><p>我们假设现在单调栈 $s$ 中已经有一条链，并且栈中相邻的两个点之间的路径上不包含关键节点，现在加入一个点 $v$，栈顶元素（也就是链上深度最大的点）为 $u$，那么，我们计算 $l&#x3D;\operatorname{lca}(u,v)$，然后分类讨论：</p><ul><li>如果 $l&#x3D;u$，那么 $v$ 就是 $u$ 的儿子，直接把 $v$ 弹进单调栈中即可。</li><li>如果 $l\not &#x3D;u$。此时，显然有 $dfn_l&lt;dfn_u$，但是如果直接在 $l\to u$ 连边却不对。因为我们没有性质保证 $l\to u$ 之间没有关键节点。因此，我们还需要判断 $s_{top-1}$ 的 $\operatorname{dfn}$ 与 $dfn_l$ 的关系。我们记 $f&#x3D;s_{top-1}$，并做以下判断：</li><li><ul><li>如果 $dfn_f&gt;dfn_l$，也就是说，$f$ 仍然是 $l$ 的儿子，那么显然 $f$ 与 $u$ 之间已经没有关键节点，直接连边 $f\to u$ 即可。然后令 $top-1\to top$，并继续执行这一判断。</li></ul></li><li><ul><li>否则，$dfn_f&lt; dfn_l$，也就是说，$l$ 是 $f$ 的儿子。那么此时显然需要建立 $l\to s_{top}$ 的边，然后，弹出 $s_{top}$ 并加入 $l$，然后再加入 $v$，跳出循环。</li></ul></li><li><ul><li>否则，如果 $dfn_f&#x3D;dfn_l$，也就是说，$l&#x3D;f$，那么此时就不需要加入 $l$ 的操作，直接加入 $v$ 即可，跳出循环。</li></ul></li></ul><p>这就是单调栈建立虚树的方法。</p><p>这个建立虚树的正确性。。。应该也是好证的。在我刚刚的步骤中，每一次加入边时，都加入一句 <strong>根据 $\operatorname{dfn}$ 的性质可知边中不包含其它任何关键节点</strong> 即可。</p><p>代码的话就按照我讲的步骤写就行了，建议大家先写然后再对照，能自己调出来先自己调。</p><p><del>哦对了，最后别忘清空栈，顺便把栈里面的边都加上。</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(h+<span class="number">1</span>,h+<span class="number">1</span>+k,cmp);</span><br><span class="line">tp=<span class="number">0</span>; st[++tp]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(h[i]==<span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> lca=<span class="built_in">callca</span>(h[i],st[tp]);</span><br><span class="line"><span class="keyword">if</span>(lca!=st[tp])&#123;</span><br><span class="line"><span class="keyword">while</span>(dfn[st[tp<span class="number">-1</span>]]&gt;dfn[lca])vir[st[tp<span class="number">-1</span>]].<span class="built_in">pb</span>(st[tp]), --tp;</span><br><span class="line"><span class="keyword">if</span>(dfn[st[tp<span class="number">-1</span>]]&lt;dfn[lca])vir[lca].<span class="built_in">pb</span>(st[tp]), st[tp]=lca;</span><br><span class="line"><span class="keyword">else</span>vir[lca].<span class="built_in">pb</span>(st[tp]), --tp;</span><br><span class="line">&#125;</span><br><span class="line">st[++tp]=h[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(tp&gt;<span class="number">1</span>)vir[st[tp<span class="number">-1</span>]].<span class="built_in">pb</span>(st[tp]), --tp;</span><br></pre></td></tr></table></figure><h2 id="回到消耗战"><a href="#回到消耗战" class="headerlink" title=" 回到消耗战"></a><center> 回到消耗战</h2><p>建出虚树之后，我们在虚树上 $dfs$，就可以得到答案。具体地，我们记录一个 $minn$ 表示 $1\to u$ 的路径上边权最小值，$f$ 表示 $u$ 子树内的答案，于是得到转移：</p><ul><li>如果 $u$ 是关键节点，那么 $f_u&#x3D;minn_u$。</li><li>否则，$f_u\min{\sum\limits_{v\in son_u}f_v,minn_u}$。</li></ul><p>然后输出 $f_1$ 即可。</p><h2 id="习题选讲"><a href="#习题选讲" class="headerlink" title="习题选讲"></a>习题选讲</h2><h3 id="共享单车"><a href="#共享单车" class="headerlink" title="共享单车"></a><a href="https://www.luogu.com.cn/problem/P5680">共享单车</a></h3><p>与 <strong>消耗战</strong> 一样，<del>只不过这道题更加侧重于考阅读理解。</del></p><p>调侃：P5680 [GZOI2017] 共享单车 |【模板】读题。</p><h3 id="ygg"><a href="#ygg" class="headerlink" title="ygg"></a><a href="https://www.luogu.com.cn/problem/P3233">ygg</a></h3><p>这个题也是在虚树上树形 $dp$，主要记录的是树上在所有关键点中，距离关键点 $u$ 最近的点的数量。这里用到了一个小 $\text{trick}$，也即在虚树的一条边上进行倍增。众所周知，虚树上的一条边代表了原树上的一条链，而如果我们知道虚树上的边 $u\to v$，想要找到 $v$ 的在 $u$ 子树内的距离 $u$ 最近的祖先，就可以使用 $dep+$ 倍增实现，和倍增 $lca$ 差不多。</p><h3 id="树上的毒瘤"><a href="#树上的毒瘤" class="headerlink" title="树上的毒瘤"></a><a href="https://www.luogu.com.cn/problem/P4242">树上的毒瘤</a></h3><p>题如其名，这题真的很毒瘤。</p><p>题目的意思大致是维护一棵树并支持两个操作：</p><ol><li>给定点 $u,v$ 和颜色 $col$，把 $u\to v$ 的路径上的点的颜色都改成 $col$。</li><li>给定 $m$ 个点 $A&#x3D;{a_i}$，对于每个点 $i$，求：<br>$$\sum\limits_{j\in A}T(i,j)$$<br>其中 $T(i,j)$ 表示 $i\to j$ 的简单路径上颜色段的数量。例如 $114514$ 含有 $5$ 个颜色段。</li></ol><p>最开始会给出树的形态和每个点的初始颜色。并且 $n\le 10^5, \sum m\le 2\times 10^5$。</p><h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>其实……思路什么的……最好想了。</p><p>首先，看到 $\sum m$ 的限制想到虚树，正好该询问与原树上的父子结构关系无关，因此初步确定使用虚树。然后维护点对的路径上颜色段数量，这里树上路径问题不难想到点分治维护，然后我们在建立虚树的时候可以把边权设置为两点之间的颜色段数量，但是询问一条路径上的颜色段数量我们也需要单独维护。容易想到先重链剖分然后使用线段树维护颜色段数量。</p><p>具体地，线段树上，我们维护 $lc,rc,sum$ 和 $tag$。其中 $lc,rc$ 分别表示该区间最左段 &#x2F; 右端的颜色是什么。$sum$ 表示该区间段的颜色段数，$tag$ 记录懒标记。合并时，我们使用左儿子的 $rc$ 匹配右儿子的 $lc$，匹配成功则将 <code>sum[p&lt;&lt;1]+sum[p&lt;&lt;1|1]-1-&gt;sum[p]</code> 否则 <code>sum[p&lt;&lt;1]+sum[p&lt;&lt;1|1]-&gt;sum[p]</code>。<code>push_down</code> 的时候直接将 $sum$ 置为 $1$ 即可。</p><p>特别地，我们需要特殊处理两条重链的交界处的颜色段，如果相同需要将答案 $-1$。但是，在 <code>caldis</code> 函数中，我们并不需要可以维护，因为对于 $u\to t\to v$ 的一条边，我们只需要求出 $u\to t$ 的颜色段和 $t\to v$ 的颜色段，求和之后 $-1$ 即可。因为这里 $t$ 这个颜色段无论如何都多算了一遍。在统计答案的时候，设现在点分治的根节点为 $root$，则 $x\to root\to y$ 的路径答案就是 $dis_x+dis_y-1$，也就无需讨论颜色问题。</p><p>时间复杂度虚树有一个 $O(\sum m\log m\log n)$，点分治有 $O(n\log^2 n)$。因此总复杂度就是 $O(\sum m \log n(\log nm))$</p><p>然后。。。写代码罢，我写了将近 $10Kib$，写的最长的一次。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;random&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DBG cerr &lt;&lt; __LINE__ &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; __FUNCTION__ &lt;&lt; endl</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DRE default_random_engine</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UID uniform_int_distribution</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y1 Y1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pi acos(-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> eps (1e-8)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,PII&gt; PIII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,t,col[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> seg&#123;</span><br><span class="line"><span class="type">int</span> lc[N&lt;&lt;<span class="number">2</span>], rc[N&lt;&lt;<span class="number">2</span>], sum[N&lt;&lt;<span class="number">2</span>], tag[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rc[p&lt;&lt;<span class="number">1</span>]==lc[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])sum[p]=sum[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+sum[p&lt;&lt;<span class="number">1</span>]<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span>sum[p]=sum[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+sum[p&lt;&lt;<span class="number">1</span>];</span><br><span class="line">lc[p]=lc[p&lt;&lt;<span class="number">1</span>], rc[p]=rc[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!tag[p])<span class="keyword">return</span> ;</span><br><span class="line">sum[p&lt;&lt;<span class="number">1</span>]=sum[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">lc[p&lt;&lt;<span class="number">1</span>]=rc[p&lt;&lt;<span class="number">1</span>]=lc[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=rc[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=tag[p];</span><br><span class="line">tag[p&lt;&lt;<span class="number">1</span>]=tag[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=tag[p];</span><br><span class="line">tag[p]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> left,<span class="type">int</span> right,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(left&lt;=l&amp;&amp;r&lt;=right)&#123;</span><br><span class="line">tag[p]=x, lc[p]=rc[p]=x, sum[p]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(p);</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(left&lt;=mid)<span class="built_in">update</span>(p&lt;&lt;<span class="number">1</span>,l,mid,left,right,x);</span><br><span class="line"><span class="keyword">if</span>(right&gt;mid)<span class="built_in">update</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,left,right,x);</span><br><span class="line"><span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">PIII <span class="title">query</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> left,<span class="type">int</span> right)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(left&lt;=l&amp;&amp;r&lt;=right)<span class="keyword">return</span> <span class="built_in">mk</span>(sum[p],<span class="built_in">mk</span>(lc[p],rc[p]));</span><br><span class="line"><span class="built_in">push_down</span>(p);</span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>, tls = <span class="number">0</span>, trs = <span class="number">0</span>;</span><br><span class="line">PIII ls, rs;</span><br><span class="line"><span class="keyword">if</span>(left&lt;=mid)tls=<span class="number">1</span>, ls=<span class="built_in">query</span>(p&lt;&lt;<span class="number">1</span>,l,mid,left,right);</span><br><span class="line"><span class="keyword">if</span>(right&gt;mid)trs=<span class="number">1</span>, rs=<span class="built_in">query</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,left,right);</span><br><span class="line"><span class="keyword">if</span>(!tls)<span class="keyword">return</span> rs;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!trs)<span class="keyword">return</span> ls;</span><br><span class="line"><span class="keyword">else</span><span class="keyword">return</span> <span class="built_in">mk</span>(ls.fi+rs.fi-(ls.se.se==rs.se.fi),<span class="built_in">mk</span>(ls.se.fi,rs.se.se));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line"><span class="keyword">namespace</span> cut&#123;</span><br><span class="line"><span class="type">int</span> dfn[N], rk[N], top[N], siz[N], fa[N][<span class="number">20</span>], dep[N], son[N], idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fat)</span></span>&#123;</span><br><span class="line">fa[x][<span class="number">0</span>]=fat, siz[x]=<span class="number">1</span>, dep[x]=dep[fat]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=t;++i)fa[x][i]=fa[fa[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y:g[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(y==fat)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(y,x);</span><br><span class="line">siz[x]+=siz[y];</span><br><span class="line"><span class="keyword">if</span>(siz[son[x]]&lt;siz[y])son[x]=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> tp)</span></span>&#123;</span><br><span class="line">top[x]=tp, dfn[x]=++idx, rk[idx]=x;</span><br><span class="line"><span class="keyword">if</span>(son[x])<span class="built_in">dfs2</span>(son[x],tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y:g[x])</span><br><span class="line"><span class="keyword">if</span>(y!=son[x]&amp;&amp;y!=fa[x][<span class="number">0</span>])<span class="built_in">dfs2</span>(y,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> col)</span></span>&#123;</span><br><span class="line"><span class="comment">// cout&lt;&lt;&quot;CUT::UPDATE &quot;&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;&quot; &quot;&lt;&lt;col&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])<span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="comment">// cout&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;top[x]&lt;&lt;endl;</span></span><br><span class="line">seg::<span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,idx,dfn[top[x]],dfn[x],col);</span><br><span class="line">x=fa[top[x]][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&lt;dep[y])<span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="comment">// cout&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;endl;</span></span><br><span class="line">seg::<span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,idx,dfn[y],dfn[x],col);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">PIII <span class="title">query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">PIII lst, now;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>, l=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])<span class="built_in">swap</span>(x,y);</span><br><span class="line">now=seg::<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,idx,dfn[top[x]],dfn[x]);</span><br><span class="line">ans+=now.fi-(now.se.se==lst.se.fi);</span><br><span class="line">lst=now; x=fa[top[x]][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(l==<span class="number">-1</span>)l=lst.se.fi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&lt;dep[y])<span class="built_in">swap</span>(x,y);</span><br><span class="line">now=seg::<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,idx,dfn[y],dfn[x]);</span><br><span class="line"><span class="keyword">if</span>(l==<span class="number">-1</span>)l=now.se.fi;</span><br><span class="line"><span class="comment">// cout&lt;&lt;now.fi&lt;&lt;&quot; &quot;&lt;&lt;now.se.fi&lt;&lt;&quot; &quot;&lt;&lt;now.se.se&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">mk</span>(ans+now.fi-(now.se.se==lst.se.fi),<span class="built_in">mk</span>(l,now.se.se));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])<span class="built_in">swap</span>(x,y);</span><br><span class="line">x=fa[top[x]][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dep[x]&lt;dep[y]?x:y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> allcol[N&lt;&lt;<span class="number">1</span>], cnt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">question</span>&#123;</span><br><span class="line"><span class="type">int</span> op,u,v,col,k;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; p;</span><br><span class="line">&#125;ques[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N], k, q, ans[N];</span><br><span class="line"><span class="type">bool</span> tag[N];</span><br><span class="line"><span class="keyword">namespace</span> Virtree&#123;</span><br><span class="line">vector&lt;PII&gt; vir[N];</span><br><span class="line"><span class="type">int</span> st[N], top, cnt;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123; <span class="keyword">return</span> cut::dfn[x]&lt;cut::dfn[y];&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> w=cut::<span class="built_in">query</span>(x,y).fi;</span><br><span class="line">vir[x].<span class="built_in">pb</span>(<span class="built_in">mk</span>(y,w)), vir[y].<span class="built_in">pb</span>(<span class="built_in">mk</span>(x,w));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+k,cmp);</span><br><span class="line">st[top=<span class="number">1</span>]=<span class="number">1</span>; cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> lca=cut::<span class="built_in">lca</span>(a[i],st[top]);</span><br><span class="line"><span class="keyword">if</span>(st[top]!=lca)&#123;</span><br><span class="line"><span class="keyword">while</span>(cut::dfn[st[top<span class="number">-1</span>]]&gt;cut::dfn[lca])<span class="built_in">add</span>(st[top<span class="number">-1</span>],st[top]), --top;</span><br><span class="line"><span class="keyword">if</span>(cut::dfn[st[top<span class="number">-1</span>]]&lt;cut::dfn[lca])<span class="built_in">add</span>(lca,st[top]), st[top]=lca, ++cnt;</span><br><span class="line"><span class="keyword">else</span><span class="built_in">add</span>(lca,st[top]), --top;</span><br><span class="line">&#125;</span><br><span class="line">st[++top]=a[i], ++cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(top&gt;<span class="number">1</span>)<span class="built_in">add</span>(st[top<span class="number">-1</span>],st[top]), --top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> PointDevide&#123;</span><br><span class="line"><span class="type">int</span> maxx[N], siz[N], sum, root;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">calsiz</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">maxx[x]=<span class="number">0</span>, siz[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(PII y:Virtree::vir[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[y.fi]||y.fi==fa)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">calsiz</span>(y.fi,x);</span><br><span class="line">siz[x]+=siz[y.fi];</span><br><span class="line">maxx[x]=<span class="built_in">max</span>(maxx[x],siz[y.fi]);</span><br><span class="line">&#125;</span><br><span class="line">maxx[x]=<span class="built_in">max</span>(maxx[x],sum-siz[x]);</span><br><span class="line"><span class="keyword">if</span>(maxx[x]&lt;maxx[root])root=x;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v, key, sub;</span><br><span class="line"><span class="type">int</span> dis[N];</span><br><span class="line"><span class="type">int</span> closest[N];</span><br><span class="line"><span class="type">int</span> subs, cols[N], subtot, coltot[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">caldis</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">v.<span class="built_in">pb</span>(x);</span><br><span class="line"><span class="keyword">if</span>(tag[x])key.<span class="built_in">pb</span>(x), sub.<span class="built_in">pb</span>(x);</span><br><span class="line"><span class="keyword">for</span>(PII y:Virtree::vir[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[y.fi]||y.fi==fa)<span class="keyword">continue</span>;</span><br><span class="line">closest[y.fi]=closest[x];</span><br><span class="line">dis[y.fi]=dis[x]+y.se<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">caldis</span>(y.fi,x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfz</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">vis[x]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(PII y:Virtree::vir[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[y.fi])<span class="keyword">continue</span>;</span><br><span class="line">dis[y.fi]=y.se; key.<span class="built_in">clear</span>(); closest[y.fi]=y.fi;</span><br><span class="line"><span class="type">int</span> coly = closest[y.fi];</span><br><span class="line"><span class="built_in">caldis</span>(y.fi,x);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> z:key)cols[coly]+=dis[z], ++coltot[coly], subs+=dis[z], ++subtot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y:sub)&#123;</span><br><span class="line"><span class="type">int</span> coly=closest[y];</span><br><span class="line">ans[y]+=(subtot-coltot[coly])*(dis[y]<span class="number">-1</span>)+(subs-cols[coly]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tag[x])&#123;</span><br><span class="line">ans[x]+=subs;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y:sub)ans[y]+=dis[y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y:v)</span><br><span class="line">cols[closest[y]]=coltot[closest[y]]=<span class="number">0</span>, dis[y]=closest[y]=<span class="number">0</span>;</span><br><span class="line">v.<span class="built_in">clear</span>(); key.<span class="built_in">clear</span>(); sub.<span class="built_in">clear</span>();</span><br><span class="line">subs=subtot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(PII y:Virtree::vir[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[y.fi])<span class="keyword">continue</span>;</span><br><span class="line">maxx[root=<span class="number">0</span>]=INF, sum=siz[y.fi];</span><br><span class="line"><span class="built_in">calsiz</span>(y.fi,<span class="number">-1</span>), <span class="built_in">calsiz</span>(root,<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">dfz</span>(root);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Virtree::init</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(PII y:vir[x])</span><br><span class="line"><span class="keyword">if</span>(y.fi!=fa)<span class="built_in">init</span>(y.fi,x);</span><br><span class="line">vir[x].<span class="built_in">clear</span>(), tag[x]=<span class="literal">false</span>, ans[x]=<span class="number">0</span>;</span><br><span class="line">PointDevide::vis[x]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;q; t=<span class="built_in">log</span>(n)/<span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;col[i], allcol[++cnt]=col[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x,y;i&lt;n;++i)cin&gt;&gt;x&gt;&gt;y, g[x].<span class="built_in">pb</span>(y), g[y].<span class="built_in">pb</span>(x);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;++i)&#123;</span><br><span class="line">cin&gt;&gt;ques[i].op;</span><br><span class="line"><span class="keyword">if</span>(ques[i].op==<span class="number">1</span>)cin&gt;&gt;ques[i].u&gt;&gt;ques[i].v&gt;&gt;ques[i].col, allcol[++cnt]=ques[i].col;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cin&gt;&gt;ques[i].k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>,x;j&lt;=ques[i].k;++j)cin&gt;&gt;x, ques[i].p.<span class="built_in">pb</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(allcol+<span class="number">1</span>, allcol+<span class="number">1</span>+cnt);</span><br><span class="line">cnt=<span class="built_in">unique</span>(allcol+<span class="number">1</span>,allcol+<span class="number">1</span>+cnt)-allcol<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)col[i]=<span class="built_in">lower_bound</span>(allcol+<span class="number">1</span>,allcol+<span class="number">1</span>+cnt,col[i])-allcol;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;++i)</span><br><span class="line"><span class="keyword">if</span>(ques[i].op==<span class="number">1</span>)ques[i].col=<span class="built_in">lower_bound</span>(allcol+<span class="number">1</span>,allcol+<span class="number">1</span>+cnt, ques[i].col)-allcol;</span><br><span class="line">cut::<span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>), cut::<span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">seg::<span class="built_in">update</span>(<span class="number">1</span>,<span class="number">1</span>,cut::idx,cut::dfn[i],cut::dfn[i],col[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(ques[i].op==<span class="number">1</span>)cut::<span class="built_in">update</span>(ques[i].u,ques[i].v,ques[i].col);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">Virtree::<span class="built_in">init</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> tot=<span class="number">0</span>; k=ques[i].k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x:ques[i].p)tag[x]=<span class="literal">true</span>, a[++tot]=x;</span><br><span class="line">Virtree::<span class="built_in">build</span>();</span><br><span class="line">PointDevide::maxx[PointDevide::root=<span class="number">0</span>]=INF, PointDevide::sum=Virtree::cnt;</span><br><span class="line">PointDevide::<span class="built_in">calsiz</span>(<span class="number">1</span>,<span class="number">-1</span>), PointDevide::<span class="built_in">calsiz</span>(PointDevide::root,<span class="number">-1</span>);</span><br><span class="line">PointDevide::<span class="built_in">dfz</span>(PointDevide::root);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x:ques[i].p)</span><br><span class="line">cout&lt;&lt;ans[x]+<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;虚树-Virtual-Tree&quot;&gt;&lt;a href=&quot;#虚树-Virtual-Tree&quot; class=&quot;headerlink&quot; title=&quot; 虚树 (Virtual Tree) &quot;&gt;&lt;/a&gt;&lt;center&gt; 虚树 (Virtual Tree) &lt;/center&gt;&lt;</summary>
      
    
    
    
    
    <category term="算法笔记" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>5 月 21 号模拟赛题解</title>
    <link href="http://example.com/2024/05/23/5.21Contest/"/>
    <id>http://example.com/2024/05/23/5.21Contest/</id>
    <published>2024-05-23T14:25:21.000Z</published>
    <updated>2024-05-23T14:59:51.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5-21-Contest-题解"><a href="#5-21-Contest-题解" class="headerlink" title="5.21 Contest 题解"></a>5.21 Contest 题解</h1><h2 id="A-Permutation"><a href="#A-Permutation" class="headerlink" title="A. Permutation"></a>A. Permutation</h2><blockquote><p>给定四个数 $a,b,c,d$ 求</p><p>$$\gcd(\prod_{i&#x3D;a}^bi,\prod_{i&#x3D;c}^di)$$</p><p>其中这样的询问有 $T(T\le 10)$ 次。$a,b,c,d \le 10^7$。</p></blockquote><p>考虑最大公倍数的另一种形式，如果</p><p>$$a&#x3D;\prod p_i^{\alpha_i}, b&#x3D;\prod p_i^{\beta_i}$$</p><p>则：</p><p>$$\gcd(a,b) &#x3D; \prod p_i^{\min(\alpha_i,\beta_i)}$$</p><p>于是，我们考虑对于每个质数，处理出来 $a!,b!,c!$ 和 $d!$ 有几个该质因子，然后 $\gcd$ 的质因子数量就是 $\min(b-a,d-c)$。</p><p>复杂度就是 $O(N+T\sum\limits_{p\in \mathcal{P}}\log_p N)$，是要严格小于 $O(NT)$ 的。这是因为质数一共只有 $\ln$ 个，但是质因子数量每次的底数都在增长。</p><h2 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B. Tree"></a>B. Tree</h2><blockquote><p>给定一棵树，每个点有点权，删去一条边的代价是每个边连接联通快的点权最大值之和，求全部删边的最小代价。</p></blockquote><p>首先，感性理解地，先删点权最大的周围的边是更好的。</p><p>于是就有一个做法是先确定删边顺序，然后逆向加边，使用并查集维护。</p><p>但是我没想到，于是搞了个乱搞做法。</p><p>我们有一个函数 $solve(root,type,from)$ 表示操作节点、操作类型和上一次操作的节点。另外维护一棵线段树来求最大点权的点的编号。</p><p>我们刚开始初始化 $dfn$，以 $1$ 为根，然后建立线段树。</p><p>然后考虑 $solve(x,type,fa)$ 操作。</p><ul><li><p>如果 $type&#x3D;0$：</p><p>那么我们 $x$ 子树中最大的点的编号，然后进入操作 $solve(y,1,x)$。</p><p>将 $y$ 子树内的权值覆盖成 $0$，再加上目前 $x$ 子树内的最大权值和 $a_y$，继续找最大值，直到没有。</p></li><li><p>如果 $type&#x3D;1$：</p><p>那么我们需要删除 $x$ 的连边。首先删除与它儿子的连边，然后加上贡献。</p><p>对于每一个被删除的边，我们进入它的操作 $solve(y,0,x)$。</p></li></ul><p>于是我们就可以操作了。</p><h2 id="C-Game"><a href="#C-Game" class="headerlink" title="C. Game"></a>C. Game</h2><p>首先考虑三维的转移。</p><p>设 $f_{i,x,y}$ 表示第 $i$ 层有一个人在 $x$，另一个人在 $y$。</p><p>但是这样显然不优，因为我们总是一个人在 $a_i$。</p><p>因此，我们只需要记录 $f_{i,j}$ 表示一个人在 $a_{i-1}$，另一个人在 $j$ 的时候的最大值。那么得到转移方程：</p><p>$$f_{i,j}&#x3D;\min(f_{i-1,j}+|a_i-a_{i-1}|,\min(f_{i-1,k}+|k-a_i|))$$</p><p>然后使用线段树优化即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;5-21-Contest-题解&quot;&gt;&lt;a href=&quot;#5-21-Contest-题解&quot; class=&quot;headerlink&quot; title=&quot;5.21 Contest 题解&quot;&gt;&lt;/a&gt;5.21 Contest 题解&lt;/h1&gt;&lt;h2 id=&quot;A-Permutation</summary>
      
    
    
    
    
    <category term="题解笔记" scheme="http://example.com/tags/%E9%A2%98%E8%A7%A3%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>01Trie 笔记</title>
    <link href="http://example.com/2024/05/21/01trie/"/>
    <id>http://example.com/2024/05/21/01trie/</id>
    <published>2024-05-21T14:59:21.000Z</published>
    <updated>2024-05-23T15:13:26.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-Trie"><a href="#01-Trie" class="headerlink" title="01-Trie"></a>01-Trie</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>$01-Trie$ 是一类解决有关异或问题的工具。它支持插入、删除、全局 $+1$、求异或和、求最大异或值的问题。</p><h2 id="异或和-01-Trie"><a href="#异或和-01-Trie" class="headerlink" title="异或和 $01-Trie$"></a>异或和 $01-Trie$</h2><h3 id="插入，删除操作"><a href="#插入，删除操作" class="headerlink" title="插入，删除操作"></a>插入，删除操作</h3><p>首先我们明确 $01-Trie$ 的基本形态。它类似于一个动态开点线段树。每个节点有两个儿子 $t_{p,0}$ 和 $t_{p,1}$ 分别表示下一位是 $0&#x2F;1$ 的编号是多少。这里我们的 $Trie$ 树维护的二进制串是从最低位开始的。而我们需要维护三个信息：</p><ul><li>$t_{p,0&#x2F;1}$，表示下一位是 $0&#x2F;1$ 时的儿子编号是多少。这与普通的 $Trie$ 相同。</li><li>$w_p$，表示最后落在 $p$ 子树内的数有多少个。也可以理解为经过 $(p,fa_p)$ 这条边的数的数量。</li><li>$sum_p$，表示 $p$ 子树内的异或和。注意这里以 $p$ 为根节点就不需要考虑 $p$ 以上的部分，也就是原来 $11010$ 的东西现在可能是 $01011,1011,011,11$ 或者 $1$。</li></ul><p>对于最终的异或和的答案，我们只关心在某一条 $1$ 边，它的 $w$ 是多少。因为只有权值是 $1$ 且经过次数为奇数的边才会对答案产生贡献。那么不难想到：</p><p>$$sum_{p}&#x3D;sum_{t_{p,0}}\times2+sum_{t_{p,1}}*2+(w_{t_{p,1}}% 2)$$</p><p>这表示左儿子和右儿子的异或和分别乘以二，然后看 $1$ 边的奇偶情况选择加不加。</p><p>于是代码也很简单了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ls(p) t[p][0]</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs(p) t[p][1]</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">w[p]=sum[p]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">ls</span>(p))w[p]+=w[<span class="built_in">ls</span>(p)], sum[p]^=sum[<span class="built_in">ls</span>(p)]&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">rs</span>(p))w[p]+=w[<span class="built_in">rs</span>(p)], sum[p]^=(sum[<span class="built_in">rs</span>(p)]&lt;&lt;<span class="number">1</span>)|(w[<span class="built_in">rs</span>(p)]&amp;<span class="number">1</span>);</span><br><span class="line">w[p]&amp;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> &amp;p,<span class="type">int</span> x,<span class="type">int</span> dep)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!p)p=++idx;</span><br><span class="line"><span class="keyword">if</span>(dep&gt;MAXN)<span class="keyword">return</span> (<span class="type">void</span>)(++w[p]);</span><br><span class="line"><span class="built_in">update</span>(t[p][x&amp;<span class="number">1</span>],x&gt;&gt;<span class="number">1</span>,dep+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，删除操作其实和增加没有区别。因为再增加一次就相当于在异或和当中把它删除掉了。</p><h3 id="全局-1"><a href="#全局-1" class="headerlink" title="全局 $+1$"></a>全局 $+1$</h3><p>首先我们观察二进制下加一的规律。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00000</span> + <span class="number">1</span> = <span class="number">00001</span></span><br><span class="line"><span class="number">00111</span> + <span class="number">1</span> = <span class="number">01000</span></span><br><span class="line"><span class="number">10101</span> + <span class="number">1</span> = <span class="number">10110</span></span><br></pre></td></tr></table></figure><p>相信大家已经观察出来了，对于某一位 $i$，它 $+1$ 就代表它由 $0\to 1$ 或者 $1\to 0$，而如果它的下一位仍然是 $1$，就继续到下一位进行操作。</p><p>这样就不难得出我们的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">alladd</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="built_in">swap</span>(<span class="built_in">ls</span>(p), <span class="built_in">rs</span>(p));</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">ls</span>(p))<span class="built_in">alladd</span>(<span class="built_in">ls</span>(p));</span><br><span class="line"><span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>其实和线段树的合并都差不多，分为以下几个步骤：</p><ol><li>如果 $p$ 或者 $q$ 为空，就直接返回 $p+q$。( $coduck$祖传)</li><li><code>w[p]+=w[q], sum[p]^=sum[q];</code></li><li>对左、右儿子继续进行合并操作。</li></ol><p>复杂度应该仍然是均摊 $n\log n$。注意这里不需要再 <code>push_up</code> 来更新了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!p||!q)<span class="keyword">return</span> p+q;</span><br><span class="line">w[p]+=w[q], sum[p]^=sum[q];</span><br><span class="line"><span class="built_in">ls</span>(p)=<span class="built_in">merge</span>(<span class="built_in">ls</span>(p),<span class="built_in">ls</span>(q)), <span class="built_in">rs</span>(p)=<span class="built_in">merge</span>(<span class="built_in">rs</span>(p),<span class="built_in">rs</span>(q));</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最大异或路径-01-Trie"><a href="#最大异或路径-01-Trie" class="headerlink" title="最大异或路径 $01-Trie$"></a>最大异或路径 $01-Trie$</h2><p>问题是给定序列，求</p><p>$$\max\limits_{i&#x3D;1,j&#x3D;1}^n a_i \oplus a_j$$</p><p>我们考虑便利 $i$，然后执行下列操作：</p><ul><li>在字典树中查询可以与 $i$ 组成的最大异或和的数，算入答案。</li><li>将 $i$ 插入字典树。</li></ul><p>关键在于如何查询。</p><h3 id="最大异或"><a href="#最大异或" class="headerlink" title="最大异或"></a>最大异或</h3><p>这个 $01-Trie$ 是从最高位开始插入的。我们一般设 <code>MAXN=31</code>。</p><p>插入与普通 $Trie$ 基本一样，但是，在查询的时候，我们需要自己选择路径走。我们设当前查询的数的二进制是 ${b_n}$，于是：</p><ul><li>如果 $t_{p,!b_i}$ 存在，那么进入 $t_{p,!b_i}$ 并且将 <code>1&lt;&lt;dep-1</code> 计入答案。</li><li>否则，如果 $t_{p,b_i}$ 存在，那么进入 $t_{p,b_i}$。</li><li>否则，返回 <code>ans</code>。</li></ul><p>因为我们知道 $\sum\limits_{i&#x3D;1}^n 2^i&lt; 2^{n+1}$，因此我们随时要保证最高位最大才能够保证最后结果最大。因此就有这上述的贪心做法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(_2 x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> p=<span class="number">0</span>, dep=<span class="number">31</span>, ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">31</span>;++i, --dep)</span><br><span class="line"><span class="keyword">if</span>(t[p][!x.b[i]])ans+=(<span class="number">1</span>&lt;&lt;dep<span class="number">-1</span>), p=t[p][!x.b[i]];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t[p][x.b[i]])p=t[p][x.b[i]];</span><br><span class="line"><span class="keyword">else</span><span class="keyword">return</span> ans;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-Trie&quot;&gt;&lt;a href=&quot;#01-Trie&quot; class=&quot;headerlink&quot; title=&quot;01-Trie&quot;&gt;&lt;/a&gt;01-Trie&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介</summary>
      
    
    
    
    
    <category term="算法笔记" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>快速傅里叶变换</title>
    <link href="http://example.com/2024/05/05/FFT/"/>
    <id>http://example.com/2024/05/05/FFT/</id>
    <published>2024-05-05T04:04:21.000Z</published>
    <updated>2024-05-04T16:12:55.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速傅里叶变换（FFT）"><a href="#快速傅里叶变换（FFT）" class="headerlink" title="快速傅里叶变换（FFT）"></a>快速傅里叶变换（FFT）</h1><h2 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h2><h3 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h3><p>我们对于实数域 $\R$ 进行扩充，因为我们注意到对于方程 $x^2&#x3D;-1$，我们无法在 $\R$ 内无法找到一个解。但是，我们总是相信一个 $n$ 次方程 $f_n(x)&#x3D;0$ 总会有 $n$ 个解。因此，我们对于实数域进行扩充，计 $i^2&#x3D;-1$，即可以用 $z&#x3D;a+bi$ 的形式来描述一个数，我们称这样的数叫做 <strong>复数</strong> (Complex)，记作 $\Complex$。</p><p>对于一个新的数域，我们需要定义一个加减乘除与之对应，特殊地，对于 $b&#x3D;0$ 的情况，也即 $z\in \R$ 时，需要满足实数和复数在这些运算上的一致性，同时，我们也希望复数的加减乘除满足交换、结合律等法则。</p><p>于是，我们得到了定义：</p><ul><li>$z_1&#x3D;a+ bi,z_2&#x3D;c+ di$，则 $z&#x3D;z_1\pm z_2&#x3D;(a+ c)\pm(b+ d)i$。</li><li>$z_1&#x3D;a+bi,z_2&#x3D;c+di$，则 $z&#x3D;z_1\cdot z_2&#x3D;(a+bi)\cdot(c+di)&#x3D;(ac-bd)+(ad+cb)i$。</li></ul><h3 id="复数的表示"><a href="#复数的表示" class="headerlink" title="复数的表示"></a>复数的表示</h3><h4 id="普通表示"><a href="#普通表示" class="headerlink" title="普通表示"></a>普通表示</h4><p>这就是我们经常用的 $z&#x3D;a+bi$ 的方式。这是最朴素的代数表示方法，虽然简单，但有的时候进行乘除操作时因多项式乘法会导致很多冗余的项，因此，我们希望一些更加具有鲜明几何意义的表示方法。</p><h4 id="复平面"><a href="#复平面" class="headerlink" title="复平面"></a>复平面</h4><p>我们发现，一个复数只需要两个参量就可以被决定。例如有序数对 $(x,y)$ 就可以表示一个复数 $x+yi$。不难得到，所有的二元组 $(x,y)$ 都可以一一对应一个复数。这个二元组不难让我们联想到坐标系下的点，于是，我们有了复平面。</p><p><img src="https://pic3.zhimg.com/v2-f5739b2aa624587b4d1c6ac0cbe2aab6_r.jpg?source=1940ef5c"></p><p>如图，我们定义横向的坐标轴为 **实轴 (Real)**，而纵向的坐标轴为 **虚轴 (Imagination)**，于是一个点 $(a,b)$ 就可以唯一地表示一个复数 $a+bi$，横坐标对应实部，纵坐标对应虚部即可。而我们又知道，坐标系内的一个点又可以唯一地对应一个向量 $\vec{r}$，因此，我们又知道一个复数 $a+bi$ 又可以使用向量 $\vec{r}&#x3D;(a,b)$ 来表示。</p><p>由此，我们知道了向量在复平面上的几何意义。进而，我们又可以引申出来一些概念：</p><ul><li><strong>复数的模</strong>，类似于向量，我们定义 $z&#x3D;a+bi$ 的模 $|z|&#x3D;\sqrt{a^2+b^2}$.</li><li><strong>负数的幅角</strong>，在复平面中，我们定义向量 $(a,b)$ 表示的复数 $a+bi$ 的幅角 $\theta$ 的正切值 $\tan \theta&#x3D;\frac{b}{a}$，也就是说，$\theta&#x3D;\arg (a,b)$。</li></ul><h4 id="三角表示"><a href="#三角表示" class="headerlink" title="三角表示"></a>三角表示</h4><p>我们已经知道了复数可以表示成向量，类似向量，我们也可以用三角函数表示复数。</p><p>具体地，对于 $\vec{r}&#x3D;(a,b)$，我们计 $|r|&#x3D;r$，$\arg r&#x3D;\theta$，那么根据复平面不难得出，$\vec{r}&#x3D;|r|(\cos \theta +i\sin \theta)$。</p><p>根据三角表示，我们推导乘法法则，不难得到：</p><p>$$|r_1|(\cos \theta_1+i\sin \theta_1)\times|r_2|(\cos \theta_2+i\sin \theta_2)&#x3D;|r_1||r_2|(\cos (\theta_1+\theta_2)+i\sin(\theta_1+\theta_2))$$</p><p>也就是说，复数乘法的几何意义就是辐角相加，模相乘。</p><h4 id="指数表示"><a href="#指数表示" class="headerlink" title="指数表示"></a>指数表示</h4><blockquote><p><strong>欧拉公式</strong></p><p>$$e^{ix}&#x3D;\cos x+i\sin x$$</p></blockquote><p>我们发现括号内与三角表示一样，因此，复数 $\vec{r}&#x3D;(a,b)&#x3D;r(\cos \theta+i\sin \theta)&#x3D;r\times e^{i\theta}$。</p><h3 id="单位根"><a href="#单位根" class="headerlink" title="单位根"></a>单位根</h3><p>对于 $n$ 次方程 $x^n&#x3D;1$，我们不难得到在 $\Complex$ 内可以得到 $n$ 个解，可以表示为 $w_n^k,k\in [0,n-1]$。其中 $w_n^1&#x3D;\cos \frac{2\pi}{n}+i\sin \frac{2\pi}{n}$，相应地，$w_{n}^k&#x3D;(w_{n}^1)^k&#x3D;e^{i\frac{2k\pi}{n}}$。于是，在复平面上，这些根可以看成是平分单位圆的 $n$ 条半径。它们具有以下性质：</p><ul><li>$w_{2n}^{2k}&#x3D;w_{n}^k$。这通过指数表示可以很方便得得出。</li><li>$w_{n}^{k+\frac{n}{2}}&#x3D;-w_{n}^{k}$。这里可以看作是绕单位圆绕了半圈（$\frac{2\frac{n}{2}\pi}{n}&#x3D;\pi$）。</li></ul><h2 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h2><p>这里我们只给出傅里叶变换的式子，至于式子与快速傅里叶变换的关系，我们在 <strong>快速傅里叶变换</strong> 的章节中再详细说明。</p><p>对于多项式 $f&#x3D;\sum\limits_{i&#x3D;0}^nf_ix^i$，我们进行变换：</p><p>$$y_k&#x3D;\sum\limits_{i&#x3D;0}^n f_ie^{i\frac{2\pi}{n}ki}$$</p><p>或者，对 $y_n$ 进行傅里叶逆变换：</p><p>$$c_k&#x3D;\sum\limits_{i&#x3D;0}^n f_ie^{-i\frac{2\pi}{n}ki}$$</p><p>我们称这样的变换为 <strong>离散傅里叶(逆)变换</strong>。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="多项式乘法思路"><a href="#多项式乘法思路" class="headerlink" title="多项式乘法思路"></a>多项式乘法思路</h3><p>多项式乘法有两种实现方式。第一种是用多项式的系数表示法，也即用 $(f_0,f_1,f_2,\dots,f_n)$ 表示一个多项式 $f$，于是不难得到 $f&#x3D;h\times g$ 的系数可以表示为</p><p>$$f_k&#x3D;\sum\limits_{i&#x3D;0}^kh_ig_{k-i}$$</p><p>于是枚举 $k$ 和 $i$ 一共需要 $O(n^2)$ 的复杂度。</p><p>还有一种方法是点值表示，如果我们知道 $n+1$ 个点 ${(x_0,y_0),(x_1,y_1),\dots,(x_n,y_n)}$ 表示一个多项式 $f$，那么函数 $f&#x3D;g\times h$ 可以表示为 ${(x_0,h_0\times g_0),(x_1,h_1\times g_1),\dots,(x_n,h_n\times g_n)}$。这样乘法的复杂度就是 $O(n)$，但是将系数表示转换成点值表示也需要枚举点并且 $O(n)$ 计算，也需要 $O(n^2)$ 的复杂度。</p><p>一时间我们想不到优化两种方法的方法，但是，我们想想是不是可以利用自变量的一些性质来快速求点值？</p><p>在实数范围内，我们似乎找不到具有特殊性质的自变量，但是，我们把目光投向了虚数，<strong>单位根</strong>。</p><p>对于多项式 $f&#x3D;f_0+f_1x+f_2x^2+f_3x^3+f_4x^4+f_5x^5+f_6x^6+f_7x^7$，我们考虑分治，将次幂的奇偶性作为标准进行分类，即：</p><p>$$f&#x3D;(f_0+f_2x^2+f_4x^4+f_6x^6)+(f_1x+f_3x^3+f_5x^5+f_7x^7)$$</p><p>$$&#x3D;(f_0+f_2x^2+f_4x^4+f_6x^6)+x(f_1+f_3x^2+f_5x^4+f_7x^6)$$</p><p>我们设：</p><p>$$g(x)&#x3D;f_0+f_2x+f_4x^2+f_6x^3$$</p><p>和</p><p>$$h(x)&#x3D;f_1+f_3x+f_5x^2+f_7x^3$$</p><p>于是 $f&#x3D;g(x^2)+x\times h(x^2)$。我们将 $w_n^k$ 和 $w_n^{k+\frac{n}{2}}$ 得到：</p><p>$$f(w_n^k)&#x3D;g(w_{n}^{2k})+w_{n}^kh(w_n^{2k} )$$</p><p>$$f(w_n^{k+\frac{n}{2}})&#x3D;g(w_{n}^{2k+n})+w_{n}^{k+\frac{k}{2}}h(w_{n}^{2k+n})$$</p><p>根据单位根的性质，不难得到</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;快速傅里叶变换（FFT）&quot;&gt;&lt;a href=&quot;#快速傅里叶变换（FFT）&quot; class=&quot;headerlink&quot; title=&quot;快速傅里叶变换（FFT）&quot;&gt;&lt;/a&gt;快速傅里叶变换（FFT）&lt;/h1&gt;&lt;h2 id=&quot;复数&quot;&gt;&lt;a href=&quot;#复数&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="算法笔记" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>快速数论变换</title>
    <link href="http://example.com/2024/05/05/NTT/"/>
    <id>http://example.com/2024/05/05/NTT/</id>
    <published>2024-05-05T04:04:21.000Z</published>
    <updated>2024-05-04T16:12:13.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速数论变换"><a href="#快速数论变换" class="headerlink" title=" 快速数论变换 "></a><center> 快速数论变换 </center></h1><p>——将单位根换成原根的快速傅里叶变换</p><h2 id="原根"><a href="#原根" class="headerlink" title=" 原根 "></a><center> 原根 </center></h2><h3 id="阶"><a href="#阶" class="headerlink" title="阶"></a>阶</h3><blockquote><p><strong>前置：欧拉公式</strong></p><p>对于 $a\in Z,m\in N^*$，若 $\gcd(a,m)&#x3D;1$，则有</p><p>$$a^{\varphi(m) }\equiv 1\pmod{m}$$</p><p>这其实是对 <strong>费马小定理</strong> 的推广。费马小定理指出了 $m\in \mathcal{P}$ 时的特殊情况，即 $a^{m-1}\equiv1\pmod m$。</p></blockquote><p>由欧拉公式，我们知道对于 $\gcd(a,m)&#x3D;1$，一定存在 $x$ 使得 $a^x\equiv 1\pmod m$。那么，我们称最小的这个 $x$ 为 $a$ 模 $m$ 的阶，记为 $\delta_m(a)$ 或 $ord_a(m)$。</p><p>这阶具有以下几条重要性质：</p><h4 id="性质-1"><a href="#性质-1" class="headerlink" title="性质 $1$"></a>性质 $1$</h4><p>$a^1,a^2,a^3,\dots,a^{\delta_m(a)}$ 在 $\bmod m$ 的意义下两两不相等。</p><blockquote><p><strong>证明</strong></p><p>考虑反证法。若存在 $p,q\le \delta_m(a)$ 使得 $a^p&#x3D;a^q$，则有：</p><p>$$a^{|p-q|}\equiv 1\pmod m$$</p><p>而这里显然 $|p-q|&lt;\delta_m(a)$，那么 $a$ 在摸 $m$ 下的阶就不是 $\delta_m(a)$ 而是 $|p-q|$ 了。与假设矛盾。</p></blockquote><h4 id="性质-2"><a href="#性质-2" class="headerlink" title="性质 $2$"></a>性质 $2$</h4><p>若 $a^n\equiv 1\pmod m$，则 $\delta_m(a)\mid n$。</p><blockquote><p><strong>证明</strong></p><p>不妨设 $n&#x3D;q\times \delta_m(a)+r$，其中 $0\le r&lt;\delta_m(a)$。</p><p>$r&gt;0$ 时，有：</p><p>$$a^r&#x3D;a^r(a^{\delta_m(a)})^q&#x3D;a^n\equiv 1\pmod m$$</p><p>这也与阶的最小性矛盾。</p></blockquote><p>同时，通过证明的过程，我们还发现，若 $a^p\equiv a^q\pmod m$，则必然有 $p\equiv q\pmod {\delta_m(a)}$。</p><h4 id="性质-3"><a href="#性质-3" class="headerlink" title="性质 $3$"></a>性质 $3$</h4><p>若 $a,b$ 在模 $m$ 的意义下分别有阶 $\delta_m(a)$ 和 $\delta_m(b)$，则</p><p>$$\delta_m(ab)&#x3D;\delta_m(a)\delta_m(b)$$</p><p>的充分必要条件是</p><p>$$\gcd(\delta_m(a),\delta_m(b))&#x3D;1$$</p><blockquote><p><strong>证明</strong></p><ul><li>先证明必要性：</li></ul><p>因为 $\delta_m(a),\delta_m(b)$ 是 $a,b$ 在模 $m$ 意义下的阶，因此</p><p>$$a^{\delta_m(a)}\equiv 1\pmod m$$</p><p>所以：</p><p>$$a^{\operatorname{lcm}(\delta_m(a),\delta_m(b))}\equiv 1\pmod m$$</p><p>相同地，有</p><p>$$(ab)^{\operatorname{lcm}(\delta_m(a),\delta_m(b))}\equiv 1\pmod m$$</p><p>根据性质 $2$，不难得到 $\delta_m(ab)\mid \operatorname{lcm}(\delta_m(a),\delta_m(b))$，结合 $\delta_m(ab)&#x3D;\delta_m(a)\delta_m(b)$ 得到</p><p>$$\delta_m(a)\delta_m(b)\mid \operatorname{lcm}(\delta_m(a),\delta_m(b))$$</p><p>因此，$\gcd(\delta_m(a),\delta_m(b))&#x3D;1$。</p><ul><li>再证充分性</li></ul><p>显然，有 $(ab)^{\delta_m(ab)\delta_m(b)}\equiv 1\pmod m$</p><p>又因为：</p><p>$$b^{\delta_m(b)}\equiv 1\pmod m$$</p><p>原式就变成</p><p>$$a^{\delta_m(ab)\delta_m(b)}\equiv 1\pmod m$$</p><p>根据性质 $2$，有：</p><p>$$\delta_m(a)\mid \delta_m(ab)\delta_m(b)$$</p><p>结合 $\gcd(\delta_m(a),\delta_m(b))&#x3D;1$ 可以得到：</p><p>$$\delta_m(a)\mid \delta_m(ab)$$</p><p>类似地，我们可以得到 $\delta_m(b)\mid \delta(ab)$，也即：</p><p>$$\delta_m(a)\delta_m(b)\mid\delta(ab)$$</p><p>但同时，我们有：</p><p>$$(ab)^{\delta_m(ab)}\equiv (a^{\delta_m(a)})^{\delta_m(b)}\times (b^{\delta_m(b)})^{\delta_m(a)}\equiv 1\pmod m$$</p><p>因此 $\delta_{ab}\mid \delta_m(a)\delta_m(b)$，即：</p><p>$$\delta_m(ab)&#x3D;\delta_m(a)\delta_m(b)$$</p></blockquote><h4 id="性质-4"><a href="#性质-4" class="headerlink" title="性质 $4$"></a>性质 $4$</h4><p>若 $a$ 在模 $m$ 下有阶 $\delta_m(a)$，则</p><p>$$\delta_m(a^k)&#x3D;\frac{\delta_m(a)}{\gcd(\delta_m(a),k)}$$</p><p>这里证明从略。（才不是因为 $\text{oi-wiki}$ 上 $\mathcal{LaTeX}$ 炸了看不清楚呢）</p><h3 id="原根-1"><a href="#原根-1" class="headerlink" title="原根"></a>原根</h3><p>说了这么一大堆晦涩难懂的阶的性质（虽然其实也挺好理解），终于可以使用感性理解大法了。（怎么可能是因为我也不理解）</p><p>但出于尊重，定义还是要摆上来的：</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>对于 $m\in Z^*,g\in Z$，若 $\delta_m(g)&#x3D;\varphi(m)$，则称 $g$ 为 $m$ 的一个原根。</p><p>其实通过刚刚对于阶的学习，我们不难发现，一个数模 $m$ 意义下的阶永远小于等于 $\varphi(m)$，这是因为 $a^{\varphi(m)}\equiv 1\pmod m$，而如果有更小的 $n$ 满足 $a^n\equiv 1\pmod m$，那么 $n$ 一定是 $\varphi(m)$ 的因子。而原根，就是所有 $\varphi(m)$ 的因子都不能满足 $a^n\equiv 1\pmod m$ 的特殊情况。因此，直觉告诉我们，原根并不一定存在。</p><p>事实也确实如此，这里我们给出判定定理：</p><h4 id="判定"><a href="#判定" class="headerlink" title="判定"></a>判定</h4><p>若 $\forall p\in \mathcal{P}$ 使得 $p\mid \varphi(m)$ 都有 $a^{\frac{\varphi(m)}{p}}\not &#x3D; 1\pmod m$，则 $m$ 有原根。</p><p>这定理我们不证，大家参考 $\text{oi-wiki}$ 罢（溜。</p><h4 id="原根个数"><a href="#原根个数" class="headerlink" title="原根个数"></a>原根个数</h4><p>若 $m$ 有原根，那么它有 $\varphi(\varphi(m))$ 个原根。</p><p>这里还是很好理解的。若 $a$ 是 $m$ 的一个原根，根据阶的性质 $4$，我们知道若 $\gcd(k,m)&#x3D;1$，则 $\delta_m(a^k)&#x3D;\frac{\delta_m(a)}{\gcd(\delta_m(a),k)}&#x3D;\delta_m(a)&#x3D;\varphi(m)$，故 $a^k$ 也是 $m$ 的一个原根。而与 $\varphi(m)$ 互质的数一共有 $\varphi(\varphi(m))$ 个，因此不难得到 $m$ 的原根一共有 $\varphi(\varphi(m))$ 个。</p><h2 id="快速数论变换-1"><a href="#快速数论变换-1" class="headerlink" title=" 快速数论变换 "></a><center> 快速数论变换 </center></h2><h3 id="原根与单位根"><a href="#原根与单位根" class="headerlink" title="原根与单位根"></a>原根与单位根</h3><p>回想为什么我们可以使用单位根加速傅里叶变换，得到了单位根的四条性质：</p><ol><li>$w_{pn}^{pk}&#x3D;w_n^k$。</li><li>$w_n^k$ 对于 $\forall k\in [0,k-1]$ 都互不相同。</li><li>$w_n^{k+\frac{n}{2}}&#x3D;-w_{n}^k$。</li><li>$\sum\limits_{i&#x3D;0}^{n-1}w_n^i&#x3D;0$。</li></ol><p>因此，我们只需要验证原根也具有类似的性质即可。</p><p>例如互异性，我们甚至在阶的性质中就已经证明完毕了。而可除公约数性也是因为原根需要被写成 $g^{\frac{p-1}{n}}$ 的形式。至于剩下的东西，<del>我也不会证</del>。</p><p>总之，我们只需要在快速傅里叶变换的基础之上，把单位根改成原根，就可以大大减少原来的高精度的 <code>double</code> 运算，只需要数论中加减乘除取模运算即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">NTT</span><span class="params">(<span class="type">int</span> *f,<span class="type">int</span> rev)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;limit;++i)</span><br><span class="line"><span class="keyword">if</span>(i&lt;r[i])<span class="built_in">swap</span>(f[i], f[r[i]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> mid=<span class="number">1</span>;mid&lt;limit;mid&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> step=<span class="built_in">ksm</span>(rev?G:Gi,(MOD<span class="number">-1</span>)/(mid&lt;&lt;<span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> R=mid&lt;&lt;<span class="number">1</span>, j=<span class="number">0</span>;j&lt;limit;j+=R)&#123;</span><br><span class="line"><span class="type">int</span> w=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;mid;++k, w=w*step%MOD)&#123;</span><br><span class="line"><span class="type">int</span> x=f[j+k], y=w*f[j+k+mid]%MOD;</span><br><span class="line">f[j+k]=(x+y)%MOD, f[j+k+mid]=(x-y+MOD)%MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码还是很简洁的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;快速数论变换&quot;&gt;&lt;a href=&quot;#快速数论变换&quot; class=&quot;headerlink&quot; title=&quot; 快速数论变换 &quot;&gt;&lt;/a&gt;&lt;center&gt; 快速数论变换 &lt;/center&gt;&lt;/h1&gt;&lt;p&gt;——将单位根换成原根的快速傅里叶变换&lt;/p&gt;
&lt;h2 id=&quot;原根</summary>
      
    
    
    
    
    <category term="算法笔记" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>网络流</title>
    <link href="http://example.com/2024/04/30/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    <id>http://example.com/2024/04/30/%E7%BD%91%E7%BB%9C%E6%B5%81/</id>
    <published>2024-04-30T14:28:21.000Z</published>
    <updated>2024-04-30T14:19:30.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>我们现在有一张图 $G&#x3D;{V,E}$，对于每一条边 $e\in E$，我们用 $(u,v,w)$ 来描述它，分别代表起点，终点和边权；并且这张图上有一个起点 $s$ 和一个终点 $t$，那么我们就可以称这个图是一张 <strong>网络</strong>。</p><p>另外的，对于这个起点 $s$，我们称之为 <strong>源点</strong>，对于终点 $t$，我们称之为 <strong>汇点</strong>。下面讲网络流几个基本概念。</p><h3 id="弧"><a href="#弧" class="headerlink" title="弧"></a>弧</h3><p>对于每一条边 $e&#x3D;(u,v,w)\in E$，我们称之为 <strong>弧</strong>。而这里的 $w$ 被称为这条弧的容量。</p><h3 id="流"><a href="#流" class="headerlink" title="流"></a>流</h3><p>对于一条 $u\to \dots \to v$ 的简单路径，我们称这是这张网络的一个 <strong>流</strong>。它满足以下性质：</p><ul><li>对于流 $v_1\to\dots\to v_n$，它的大小必须小于等于 $\min\limits_{i&#x3D;1}^{n-1}{w_{(v_i,v_{i+1})}}$。也就是说，流的大小小于等于路径上所有容量的最小值。</li><li>对于除源点和汇点之外的所有节点，总满足流进总流量等于流出总流量。</li></ul><p>对于一张网络，我们希望给定一个确定的流，使得汇点的流量最大，这个问题叫做 <strong>最大流问题</strong>。</p><h3 id="割"><a href="#割" class="headerlink" title="割"></a>割</h3><p>对于一个网络 $G&#x3D;(V,E)$，我们将集合 $V$ 分成两份，变成 $S$ 和 $T$，其中 $s\in S,t\in T$，并且满足 $S\cup T&#x3D;V,S\cap T&#x3D;\emptyset$，则称这一种划分方式是这个网络的一个 <strong>割</strong>。而 <strong>最小割问题</strong> 就是希望找到一个割，使得 $\sum\limits_{u\in S,v\in T}w_{u,v}$ 最小。</p><h3 id="残余网络"><a href="#残余网络" class="headerlink" title="残余网络"></a>残余网络</h3><p>对于一个网络，如果我们已经在这张网络上进行了流的操作，则称流之后的网络为 <strong>残余网络</strong>。</p><h2 id="最大流"><a href="#最大流" class="headerlink" title="最大流"></a>最大流</h2><h3 id="FF算法-Ford-Fulkerson"><a href="#FF算法-Ford-Fulkerson" class="headerlink" title="FF算法 (Ford-Fulkerson)"></a>FF算法 (Ford-Fulkerson)</h3><h4 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a>算法过程</h4><p>算法的基本思路是，对于一张残余网络，我们总找到一条 <strong>增广路</strong> 使得总流量增加。而对于顺序不对的情况，我们使用反向边来实现 <strong>反悔</strong> 的操作。</p><blockquote><p><strong>增广路</strong></p><p>对于一个流 $f&#x3D;(s\to\dots\to t)&gt;0$，则我们称这个流 $f$ 是该网络的一条增广路。简单来说，就是使总流量增加的路径。</p></blockquote><p>于是找增广路就非常好实现，我们主要来看看怎么实现 <strong>反悔</strong> 操作。</p><p><img src="/../img/wll1.png"></p><p>如图网络。显然，对于这张网络，最大流就是 $10+20&#x3D;30$，但是如果我们先流 $1\to 2\to 3\to 4$ 这一条路径，那么残余网络就变成：</p><p><img src="/../img/wll2.png"></p><p>然后流完 $(1\to 3\to 4)$ 之后就没了，得出来的最大流变成了 $20$。显然，这是我们流的顺序不当导致的。如何避免这种情况呢？我们考虑在每一条单向边顺带着连一条反边。如图：</p><p><img src="/../img/wll3.png"></p><p>由图可知，这些 <strong>反边</strong> 的容量初始是 $0$，额外的，我们在进行增广的时候，我们在减小正向边容量的同时增大反向边容量，比如对路径 $(1\to 2\to 3\to 4)$ 进行增广后，得到图：</p><p><img src="/../img/wll4.png"></p><p>可以看到，我们在进行一次增广之后，把反向边都加上了流量大小的容量，这就是接下来我们实施 <strong>反悔</strong> 操作的重要步骤。进行这一步操作之后，我们继续跑网络流，比如 $(1\to 3\to 4)$：</p><p><img src="/../img/wll5.png"></p><p>然后，我们惊奇的发现，这张图竟然还可以进行增广操作，也就是 $(1\to 3\to 2\to 4)$ 这一条增广路。于是增广之后，我们得到下图：</p><p><img src="/../img/wll6.png"></p><p>于是，我们这样得到的最大流就是 $30$。</p><p>对比原图，我们发现这个图的最终结果和直接增广 $(1,2,4)$ 和 $(1,3,4)$ 两条路径没有任何区别。也就是说，我们通过反悔操作，把我们以前的流不优时再流回去，实际上并不会对答案造成影响。这样，我们就把 $\text{FF}$ 算法学完了。</p><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p>对于一次增广操作，它的复杂度是 $O(E)$，而这样的增广最多进行 $O(f)$ 次，这里 $f$ 就是最大流。这种情况发生在每次增广只能增加 $1$ 的情况。因此，$\operatorname{FF}$ 算法的时间复杂度上限为 $O(|E|f)$。</p><h3 id="text-EK-算法"><a href="#text-EK-算法" class="headerlink" title="$\text{EK}$ 算法"></a>$\text{EK}$ 算法</h3><p>对于增广操作，我们也可以使用 $\operatorname{BFS}$ 完成每一次的增广操作。就是在残余网络中找到一个单轮的最大流，然后不断增广直至不能增广。这个算法在实际应用中并不广泛，因此了解思路即可。</p><h4 id="operatorname-EK-时间复杂度证明"><a href="#operatorname-EK-时间复杂度证明" class="headerlink" title="$\operatorname{EK}$ 时间复杂度证明"></a>$\operatorname{EK}$ 时间复杂度证明</h4><p>这里我引用 $\text{oi-wiki.org}$ 中的证明，因为实在是太麻烦且没有必要了。</p><blockquote><p><strong>增广总轮数的上界的证明</strong></p><p>首先，我们引入一个引理——最短路非递减引理。具体地，我们记 $d_f(u)$ 为 $G_f$ 上结点 $u$ 到源点 $s$ 的距离（即最短路长度，下同）。对于某一轮增广，我们用 $f$ 和 $f’$ 分别表示增广前的流和增广后的流，我们断言，对于任意结点 $u$，增广总是使得 $d_{f’}(u) \geq d_f(u)$。我们将在稍后证明这一引理。</p><p>不妨称增广路上剩余容量最小的边是饱和边（存在多条边同时最小则取任一）。如果一条有向边 $(u, v)$ 被选为饱和边，增广会清空其剩余容量导致饱和边的消失，并且退流导致反向边的新增（如果原先反向边不存在），即 $(u, v) \not \in E_{f’}$ 且 $(v, u) \in E_{f’}$。以上分析使我们知道，对于无向边 $(u, v)$，其被增广的两种方向总是交替出现。</p><p>在 $G_f$ 上沿 $(u, v)$ 增广时，$d_f(u) + 1 &#x3D; d_f(v)$，此后残量网络变为 $G_{f’}$。在 $G_{f’}$ 上沿 $(v, u)$ 增广时，$d_{f’}(v) + 1 &#x3D; d_{f’}(u)$。根据最短路非递减引理又有 $d_{f’}(v) \geq d_f(v)$，我们连接所有式子，得到 $d_{f’}(u) \geq d_{f}(u) + 2$。换言之，如果有向边 $(u, v)$ 被选为饱和边，那么与其上一次被选为饱和边时相比，$u$ 到 $s$ 的距离至少增加 $2$。</p><p>$s$ 到任意结点的距离不可能超过 $|V|$，结合上述性质，我们发现每条边被选为饱和边的次数是 $O(|V|)$ 的，与边数相乘后得到增广总轮数的上界 $O(|V||E|)$。</p><p>接下来我们证明最短路非递减引理，即 $d_{f’}(u) \geq d_f(u)$。这一证明并不难，但可能稍显绕口，读者可以停下来认真思考片刻。</p><blockquote><p>最短路非递减引理的证明</p><p>考虑反证。对于某一轮增广，我们假设存在若干结点，它们在该轮增广后到 $s$ 的距离较增广前减小。我们记 $v$ 为其中到 $s$ 的距离最小的一者（即 $v &#x3D; \arg \min_{x \in V, d_{f’}(x) &lt; d_f(x)} d_{f’}(x)$）。注意，根据反证假设，此时 $d_{f’}(v) &lt; d_f(v)$ 是已知条件。</p><p>在 $G_{f’}$ 中 $s$ 到 $v$ 的最短路上，我们记 $u$ 是 $v$ 的上一个结点，即 $d_{f’}(u) + 1 &#x3D; d_{f’}(v)$。</p><p>为了不让 $u$ 破坏 $v$ 的「距离最小」这一性质，$u$ 必须满足 $d_{f’}(u) \geq d_f(u)$。</p><p>对于上式，我们令不等号两侧同加，得 $d_{f’}(v) \geq d_f(u) + 1$。根据反证假设进行放缩，我们得到 $d_f(v) &gt; d_f(u) + 1$。</p><p>以下我们尝试讨论 $(u, v)$ 上的增广方向。</p><p>假设有向边 $(u, v) \in E_f$。根据 $BFS$「广度优先」的性质，我们有 $d_f(u) + 1 \geq d_f(v)$。该式与放缩结果冲突，导出矛盾。</p><p>假设有向边 $(u, v) \not \in E_f$。根据 $u$ 的定义我们已知 $(u, v) \in E_{f’}$，因此这条边的存在必须是当前轮次的增广经过了 $(v, u)$ 并退流产生反向边的结果，也即 $d_f(v) + 1 &#x3D; d_f(u)$。该式与放缩结果冲突，导出矛盾。</p><p>由于 $(u, v)$ 沿任何方向增广都会导出矛盾，我们知道反证假设不成立，最短路非递减引理得证。</p></blockquote></blockquote><p><del>（这个证明比我前面写的加起来还长）</del></p><h3 id="operatorname-Dinic-算法"><a href="#operatorname-Dinic-算法" class="headerlink" title="$\operatorname{Dinic}$ 算法"></a>$\operatorname{Dinic}$ 算法</h3><p>考虑提前进行 $BFS$ 分层，然后使用 $DFS$ 跑增广路。具体地，我们跑 $BFS$，给每一个 $v\in V$ 一个 $dep$ 表示到源点 $s$ 的最短距离。然后，在 $DFS$ 的时候，我们的增广路 $v_1 \to \dots\to v_n$，对于 $\forall i\in[1,n-1]$，总存在 $dep_i&#x3D;dep_{i+1}-1$。也就是说，对于一个点 $u$，我们只流给它的下一层。因此，我们称这个分完层之后的残余网络为 $G&#x3D;(V,E)$ 网络的一个层次图。而我们称在这张图上的最大增广为 <strong>阻塞流</strong>。</p><p>我们希望一次求出整张层次图的最大流，因此我们就需要多路增广。但是，对于每一次搜到一个点，可能前面的路径已经流完了，必须从当前的弧开始，因此，我们可以到一个点记录一下现在这个点流到了第几个弧，然后再流到这个点的时候就可以从上次没流完的开始流。这个常数优化我们称为当前弧优化。</p><p><img src="/../img/wll7.png"></p><p>如图，模拟网络流过程，从 $(s\to f_1\to u)$ 进行增广，于是 $u$ 获得流量 $2$，然后把这些流量进行分配，也即 $(u\to v_1\to 1)$ 流过 $1$，$u\to v_2\to 1$ 流过 $1$。无法继续增广，于是，返回 $s$ 节点，通过 $(s,f_2,u)$ 给 $u$ 大小为 $2$ 的流量。注意，此时，$u$ 就不用流到 $v_1$ 了，继续流没有流完的 $v_2$ 即可。因此，这里就体现出了当前弧优化。</p><p>代码也非常简单：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,m,s,t;</span><br><span class="line"><span class="type">int</span> Next[M], head[N], w[M], ver[M], tot=<span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span>&#123;</span><br><span class="line">ver[++tot]=y;</span><br><span class="line">w[tot]=z;</span><br><span class="line">Next[tot]=head[x];</span><br><span class="line">head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans,dep[N],cur[N];</span><br><span class="line"></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)dep[i]=INF;</span><br><span class="line">cur[s]=head[s], q.<span class="built_in">push</span>(s), dep[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">int</span> p=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(p==t)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[p];~i;i=Next[i])&#123;</span><br><span class="line"><span class="type">int</span> y=ver[i], z=w[i];</span><br><span class="line"><span class="keyword">if</span>(z&gt;<span class="number">0</span>&amp;&amp;dep[y]==INF)&#123;</span><br><span class="line">q.<span class="built_in">push</span>(y);</span><br><span class="line">cur[y]=head[y]; dep[y]=dep[p]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> flow)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==t)<span class="keyword">return</span> flow;</span><br><span class="line"><span class="type">int</span> maxflow=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=cur[x];~i&amp;&amp;flow;i=Next[i])&#123;</span><br><span class="line">cur[x]=i;</span><br><span class="line"><span class="type">int</span> y=ver[i], z=w[i], k;</span><br><span class="line"><span class="keyword">if</span>(dep[y]==dep[x]+<span class="number">1</span>&amp;&amp;(k=<span class="built_in">dfs</span>(y,<span class="built_in">min</span>(flow,z))))&#123;</span><br><span class="line">w[i]-=k, w[i^<span class="number">1</span>]+=k;</span><br><span class="line">maxflow+=k, flow-=k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxflow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="built_in">sizeof</span>(head));</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x,y,z;i&lt;=m;++i)cin&gt;&gt;x&gt;&gt;y&gt;&gt;z, <span class="built_in">add</span>(x,y,z), <span class="built_in">add</span>(y,x,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bfs</span>())ans+=<span class="built_in">dfs</span>(s,INF);</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最大流问题中，基本上 $\text{Dinic}$ 就很够用了，但还有一个 $\text{Dinic}$ 的常熟优化版本：$\operatorname{ISAP}$，这种算法只需要在 $dfs$ 之前进行一遍 $BFS$ 分层。但是，$BFS$ 的复杂度是 $O(|E|)$，而一遍 $DFS$ 是 $O(|E||V|)$，所以优化极小。</p><h2 id="最小割"><a href="#最小割" class="headerlink" title="最小割"></a>最小割</h2><p>我们之前已经说过最小割问题的定义，我们现在就来讨论怎样完成这个问题。</p><p>首先，看一个定理：</p><blockquote><p><strong>最大流最小割定理</strong></p><p>对于一张网络 $G&#x3D;(E,V)$，它的最大流为 $f$，最小割为 $|S,T|$，则有 $f&#x3D;|S,T|$。</p></blockquote><p>这个定理直接指出了最大流与最小割之间的关系，我们对于最小割的研究也就很方便了。</p><p>关于证明，这里从略，有兴趣可以去看 $\text{oi-wiki}$ 上的详细证明。</p><h2 id="最小费用最大流"><a href="#最小费用最大流" class="headerlink" title="最小费用最大流"></a>最小费用最大流</h2><blockquote><p><strong>Warning</strong></p><p>这里是在保证 <strong>最大流</strong> 的基础上进行最小费用操作的。</p></blockquote><p>具体地，对于每一条弧 $(u,v)$，我们不仅有一个 $w$ 容量，而且还有一个单位容量花费 $cost$，也就是说，如果有一个流 $f$ 流过这条弧，那么会产生 $f\times cost$ 的花费，要求最大流的前提下最小化花费。</p><p>首先要明确，一条增广路上的花费为 $f\sum\limits_{e\in E} cost_e$。这很好理解，因为每经过一条弧就要加上 $f\times cost$ 的费用，一共就是 $f\times \sum\limits_{e\in E}cost_e$ 的花费了。</p><p>我们惊奇的发现一条路径上花费只与流量和单位花费有关，而因为最大流是一定的，所以我们只需要最小化 $\sum\limits_{e\in E}cost_e$ 即可。因此，我们可以进行贪心求解，也就是每一次求出费用和最小的增广路进行增广，到最后费用就一定最小了。其中，值得注意的是，我们对于路径 $(u,v,w,cost)$ 的反边需要设置成 $(v,u,0,-cost)$。也就是说，在反悔的时候，一定是费用再倒退回去。这也给我们一个启示：虽然容量不能为负，但是费用可以。</p><p>而求最短路的过程，我们选择使用 $SPFA$，因为虽然它的复杂度不对，但是仍然是在不卡的时候很有力的工具。而不适用 $n\log n$ 的 $dijkstra$ 的原因是它无法处理负边。但是我们仍然可以使用一些特殊手段来处理负边，比如使用 $Johnson$ 全源最短路算法中的是能思想。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="type">int</span> dis[N], cur[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)dis[i]=INF, vis[i]=<span class="literal">false</span>;</span><br><span class="line">q.<span class="built_in">push</span>(s), dis[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">int</span> x=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="comment">// cout&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;endl;</span></span><br><span class="line">vis[x]=<span class="literal">false</span>; cur[x]=head[x];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x];~i;i=Next[i])&#123;</span><br><span class="line"><span class="type">int</span> y=ver[i], z=w[i], cost=pay[i];</span><br><span class="line"><span class="keyword">if</span>(z&amp;&amp;dis[y]&gt;dis[x]+cost)&#123;</span><br><span class="line">dis[y]=dis[x]+cost;</span><br><span class="line"><span class="keyword">if</span>(!vis[y])q.<span class="built_in">push</span>(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dis[t]!=INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> flow)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==t||flow==<span class="number">0</span>)<span class="keyword">return</span> flow;</span><br><span class="line"><span class="type">int</span> maxflow=<span class="number">0</span>, f;</span><br><span class="line">vis[x]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> &amp;i=cur[x];~i;i=Next[i])&#123;</span><br><span class="line"><span class="type">int</span> y=ver[i], z=w[i], cost=pay[i];</span><br><span class="line"><span class="keyword">if</span>(!vis[y]&amp;&amp;dis[y]==dis[x]+cost&amp;&amp;(f=<span class="built_in">dfs</span>(y,<span class="built_in">min</span>(flow,z))))&#123;</span><br><span class="line">w[i]-=f, w[i^<span class="number">1</span>]+=f, maxflow+=f, flow-=f, minn+=cost*f;</span><br><span class="line"><span class="keyword">if</span>(flow==<span class="number">0</span>)<span class="keyword">return</span> maxflow;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vis[x]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> maxflow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="经典建模套路"><a href="#经典建模套路" class="headerlink" title="经典建模套路"></a>经典建模套路</h2><h3 id="拆点"><a href="#拆点" class="headerlink" title="拆点"></a>拆点</h3><p>在网络流中，往往有这样一个限制：每个状态只能选择一次，或者每个状态只能贡献一次。对于这种数量的限制，我们就可以使用拆点来实现。</p><h4 id="只能选择一次"><a href="#只能选择一次" class="headerlink" title="只能选择一次"></a>只能选择一次</h4><p>对于这种问题，我们把一个点 $i$ 拆成 $i$ 与 $i+n$ 两个点，如图所示：</p><p><img src="/../img/wll8.png"></p><p>其中 $j&#x3D;i+n$。注意，这里 $i$ 作为入点，以前所有连向 $i$ 的边都连向 $i$，然后 $j$ 作为出点，以前所有从 $i$ 出发的都由 $j$ 往外出发。而在 $i\to j$ 中间也连一条边，其中这条边容量为 $0$，这样我们就已经保证了 $i$ 只允许被遍历一遍。</p><h4 id="只能贡献一次"><a href="#只能贡献一次" class="headerlink" title="只能贡献一次"></a>只能贡献一次</h4><p>对于这个问题，我们就要考虑费用流了。显然，我们是无法只使用最大流来约束双重状态的。因此，这一次仍然是把 $i$ 拆成 $i$ 和 $i+n$，但是连边不一样，如图：</p><p><img src="/../img/wll9.png"></p><p>注意到，这一次我们在 $i,i+n$ 之间连了两条边，其中一条是 $(i,i+n,1,a)$，另一条是 $(i,i+n,INF,0)$。其中 $a$ 表示贡献。这就是说，从 $i$ 到 $i+n$ 有两种路线，第一种是拿贡献的，第二种是不拿的，显然在跑最大费用最大流的时候会优先选择第一种路线，这样我们就跑出来了最大贡献。另外，在最大贡献最大流中，我们可以把贡献的相反数存进去然后求最小费用最大流，最后取负即可。</p><h3 id="最大权闭合子图模型"><a href="#最大权闭合子图模型" class="headerlink" title="最大权闭合子图模型"></a>最大权闭合子图模型</h3><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><p>首先我们讲讲闭合子图的概念。对于一张图 $G&#x3D;(V,E)$，如果它的一个点集的子集 $V’$ 满足所有 $v\in V’$ 的出边都在 $V’$ 中，那么称这个子图是 $G&#x3D;(V,E)$ 的一个闭合子图。而最大权闭合子图，就是给定每个点一个权值 $a_v$，要求最大化闭合子图的权值和。</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>首先注意，这个问题肯定不保证权值非负，否则直接全集就是最优解。考虑，选择一个集合也就等价于把所有的点分成两类，一类是选的，一类是不选的，并且其中选的有一部分是代价，有一部分是贡献。</p><p>具体做法是，把所有权值是正的点连到虚拟源点 $s$ 上，容量为 $a_v$，所有的权值是负的点都连到虚拟汇点 $t$ 上，容量是 $-a_v$。这有很大一个原因是网络流不允许负容量。另外，我们需要把所有 $(u,v)$ 的关系建立一条边，容量为 $INF$。然后，把所有的点分成两个部分，是不是就是把这个图割成两个分别与 $s$ 和 $t$ 相连的集合？于是，我们在这张图上跑最小割，再用所有正权和减去最小割就是答案。</p><p>考虑为什么是对的，首先，$(u,v)$ 的容量是 $INF$ 保证了我们不会割这一条边，也就是说，我们满足了 $(u,v)$ 不会被割这个条件。然后把这个东西割成了两个部分，我们把正权且与 $s$ 属于一个集合的点成为贡献点，负权与 $s$ 属于一个集合的叫做代价点，正权的与 $t$ 属于一个集合的叫做舍弃的贡献点，相应的，负权与 $t$ 相连的点叫做舍弃的代价点。那么，我们的最小割割的边不就是所有的舍弃的贡献点到 $s$ 的边和所有代价点到 $t$ 的边吗？而用所有正权点的权值和减去最小割，不就是减去不选的正权点，并且减去代价点吗？这就在感性上证明了为什么答案是对的。</p><h3 id="最小路径覆盖"><a href="#最小路径覆盖" class="headerlink" title="最小路径覆盖"></a>最小路径覆盖</h3><p>对于一张有向无环图(DAG) $G&#x3D;(E,V)$，我们希望找到其中的 $m$ 跳路径 $e$，若每个路径的包含的点集为 $V_i$，则这 $m$ 条路径所包含的路径满足 $\bigcap\limits_{i&#x3D;1}^m V_i&#x3D;\emptyset$，$\bigcup\limits_{i&#x3D;1}^m&#x3D;V$，则称这个路径划分是 $G$ 的一个路径覆盖。而最小路径覆盖就是要求最小化 $m$ 的路径覆盖。</p><p>这里给一个结论：我们把每个点 $i$ 拆成两点 $i$ 与 $i+n$，然后对于原图上的 $e&#x3D;(u,v)\in E$，在网络上连 $(u,v+n)$，$(s,i),(i+n,t),i\in [1,n]$，则最后最小路径覆盖&#x3D;点数量-最大流。</p><blockquote><p><strong>证明</strong></p><p>我们考虑反向合并。也就是说，我们先把每个点看成一条路径，这样路径就是 $n$ 条，我们要最小化路径数量，就可以在两条路径之间连边，也就是说，原本有路径 $u\to\dots\to x$ 和 $y\to\dots\to\ v$，而且正好有边 $x\to y$，于是我们可以合并两条路径变成 $u\to\dots\to x\to y\to\dots\to v&#x3D;u\to\dots\to v$。这样我们就把需要的路径减少了一个，而我们要求的就变成了能减少的路径，或者说能合并的路径的数量。</p><p>于是考虑网络流，因为每个点只能够被一个点合并并且只能合并一个点，因此我们给每个点连边 $(s,i,1)$ 和 $(i+n,t,1)$ 表示每个点只能产生 $1$ 的贡献。然后每一个点可以选择合并的点都包含在 $E$ 中，只需要对于每一个 $(u,v)$，都连一条 $(u,v+n,1)$，就可以表示 $u$ 可以合并 $v$，最后跑出来就是可以合并的点的最大值。而拆点是因为我们总需要一个被合并和一个合并的点，如果不拆那么光是 $(s,i,1)$ 和 $(i,t,1)$ 两种边就可以把最大流拉到最大，变成 $n$ 了。</p></blockquote><h3 id="二分图最大匹配模型"><a href="#二分图最大匹配模型" class="headerlink" title="二分图最大匹配模型"></a>二分图最大匹配模型</h3><p>首先，我们介绍二分图的基本概念。</p><p>对于图 $G&#x3D;(E,V)$，我们把 $V$ 分成 $V_1$ 和 $V_2$ 使得 $V_1\cup V_2&#x3D;V,V_1\cap V_2&#x3D;\emptyset$，并且 $\forall e&#x3D;(u,v)\in E$，都满足 $u,v$ 不在一个集合中，则称这张图是一张 <strong>二分图</strong>。而二分图最大匹配，就是在 $V_1,V_2$ 中找到一组对应关系，使得组数最多。其中一个对应关系可以表示为 $(u,v)$，其中 $u\in V_1, v\in V_2$ 并且存在 $e&#x3D;(u,v)\in E$。而且每个点只能与一个点匹配。</p><p>为了解决这个模型，我们建立连边：</p><ol><li>$(s,u,1),u\in V_1$。</li><li>$\forall e&#x3D;(u,v)\in E,(u,v,1)$。</li><li>$(u,t,1),u\in V_2$。</li></ol><p>然后跑网络流最大流即可。</p><blockquote><p><strong>证明</strong></p><p>题目中给出的约束无非以下几点：</p><ol><li>每个点只能匹配一个点。</li><li>匹配的点之间必须有连边。</li></ol><p>而对于第一个限制，我们让所有 $(s,u)$ 和 $(u,t)$ 容量都只有 $1$。对于第二个限制，我们只需要在建立连边的时候在两个有边的地方加入一条弧 $(u,v,1)$。</p><p>这样，这个网络的意义就是让每个点选择流向那个点，流过去就可以获得一点贡献，而且每个点只能流一遍。因此，我们流出的总流量就是二分图最大匹配。</p></blockquote><h2 id="例题选讲"><a href="#例题选讲" class="headerlink" title="例题选讲"></a>例题选讲</h2><h3 id="P2774-方格取数问题"><a href="#P2774-方格取数问题" class="headerlink" title="P2774 方格取数问题"></a>P2774 方格取数问题</h3><h4 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h4><p>有一个 $n\times m$ 的网格，每个格子中有一个权值 $a_{i,j}$。现在要求选择格子，并且相邻的格子不能被同时选择，求选择的最大权值和。</p><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>考虑这就是一个限制条件的网络流模型。具体地，它要求选择了 $(i,j)$ 之后就不能选择 $(i+1,j),(i-1,j),(i,j+1)$ 和 $(i,j-1)$。因此，可以套用最大权闭合子图模型。</p><p>具体地，我们发现如果把计 $sum&#x3D;\sum\limits_{i&#x3D;1}^n\sum\limits_{j&#x3D;1}^ma_{i,j}$，那么它多算的部分就是所有的要选的 $(i,j)$ 周围的部分。而如果我们把周围的部分看成是负权值，也就代表了我们选择 $(i,j)$ 就必须选择它四周的点，而这些点权值为负，就相当于减去了这些点。因此使用最大权闭合子图模型即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="type">int</span> cur[N*N], dep[N*N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=s;i&lt;=t;++i)dep[i]=INF;</span><br><span class="line">dep[s]=<span class="number">0</span>, q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">int</span> x=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">cur[x]=head[x];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[x];~i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> y=e[i].v, w=e[i].w;</span><br><span class="line"><span class="keyword">if</span>(dep[y]==INF&amp;&amp;w)dep[y]=dep[x]+<span class="number">1</span>, q.<span class="built_in">push</span>(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dep[t]!=INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> flow)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==t||flow==<span class="number">0</span>)<span class="keyword">return</span> flow;</span><br><span class="line"><span class="type">int</span> maxflow=<span class="number">0</span>, f;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> &amp;i=cur[x];~i;i=e[i].nxt)&#123;</span><br><span class="line"><span class="type">int</span> y=e[i].v, w=e[i].w;</span><br><span class="line"><span class="keyword">if</span>(dep[y]==dep[x]+<span class="number">1</span>&amp;&amp;(f=<span class="built_in">dfs</span>(y,<span class="built_in">min</span>(flow,w))))&#123;</span><br><span class="line">e[i].w-=f, e[i^<span class="number">1</span>].w+=f, flow-=f, maxflow+=f;</span><br><span class="line"><span class="keyword">if</span>(flow==<span class="number">0</span>)<span class="keyword">return</span> maxflow;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxflow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="built_in">sizeof</span>(head));</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m; s=<span class="number">0</span>, t=n*m+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line">cin&gt;&gt;a[i][j]; ans+=a[i][j];</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">Hash</span>(i,j);</span><br><span class="line"><span class="keyword">if</span>((i+j)%<span class="number">2</span>)<span class="built_in">add</span>(s,x,a[i][j]), <span class="built_in">add</span>(x,s,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">else</span><span class="built_in">add</span>(x,t,a[i][j]), <span class="built_in">add</span>(t,x,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">Hash</span>(i,j);</span><br><span class="line"><span class="keyword">if</span>((i+j)%<span class="number">2</span>==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;++k)&#123;</span><br><span class="line"><span class="type">int</span> ii=i+dx[k], jj=j+dy[k];</span><br><span class="line"><span class="keyword">if</span>(ii&lt;=<span class="number">0</span>||ii&gt;n||jj&lt;=<span class="number">0</span>||jj&gt;m)<span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> y=<span class="built_in">Hash</span>(ii,jj);</span><br><span class="line"><span class="built_in">add</span>(x,y,INF), <span class="built_in">add</span>(y,x,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bfs</span>())ans-=<span class="built_in">dfs</span>(s,INF);</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网络流&quot;&gt;&lt;a href=&quot;#网络流&quot; class=&quot;headerlink&quot; title=&quot;网络流&quot;&gt;&lt;/a&gt;网络流&lt;/h1&gt;&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概</summary>
      
    
    
    
    
    <category term="算法笔记" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>自动机</title>
    <link href="http://example.com/2024/04/21/%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    <id>http://example.com/2024/04/21/%E8%87%AA%E5%8A%A8%E6%9C%BA/</id>
    <published>2024-04-21T14:52:21.000Z</published>
    <updated>2024-04-22T14:41:28.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自动机"><a href="#自动机" class="headerlink" title="自动机"></a>自动机</h1><blockquote><p><strong>什么是自动机</strong></p><p>对于一个字符串问题，我们需要设计好一种状态集合以及转移集合，使得对于给定字符串 $s$，我们只要把它扔进自动机里面就可以跑着跑着跑出我们需要的答案。</p></blockquote><h2 id="DFA（确定有限自动机）"><a href="#DFA（确定有限自动机）" class="headerlink" title="DFA（确定有限自动机）"></a>DFA（确定有限自动机）</h2><p>我们来看一个简单的小问题：求一个字符串中 <code>a</code> 字符的个数。</p><p>显然，对于这个问题，我们枚举字符串然后加一个 <code>if</code> 判断就可以 $O(n)$ 解决。但是我们希望把底层逻辑抽象出来，然后进行整理分析来得到更加复杂问题的求解。</p><p>显然，我们可以有很多状态。我们不妨设状态 $q_i$ 表示现在字符串内有 $i$ 个 <code>a</code>。那么，我们就可以画出一个自动机的图来：</p><p><img src="/DFA1.png"></p><p>我们放一个字符串进去，比如 $abbbabbab$，那么当遇到一个字符的时候，我们就会按照该字符是什么来决定下一步走到哪个状态。初始状态 $s_0&#x3D;q_0$，结束状态 $q_i$ 就代表了答案 $i$。例如，我们演示一下过程：</p><p>首先，我们在 $q_0$，下一个字符是 $a$，于是走 $a$ 路径到达 $q_1$，然后后面的三个 $b$ 走 $b$ 路径，一直停留在 $q_1$。再接下来一个 $a$ 到达 $q_2$，一直循规蹈矩，最终走到了 $q_3$，于是最终答案为 $3$。</p><p>有些大佬可能会说，这么简单的东西还需要拿出来讲吗？其实，实现过程和制定的规则确实很简单，但是，我们从中提炼出来一条一个字符串放进去按照自己的内容跑出来我们想要的东西的一种状态和转移设计，其实就是一个简单的图灵机。值得注意的是，这个图灵机是在有限集之内的。这就是说，它总会停机，而停机所处的状态，包括跑过的状态，可以帮助我们判断该字符串是否合法以及它的贡献或者代价。</p><p>举个例子，对于我们今后要学习的 $\text{AC}$ 自动机，它也是在字典树上加入失配指针，然后根据字符串的内容一一匹配和转移，然后在路径上不断匹配看是否成功。这相对于刚刚讲的 $\text{DFA}$ 来说确实困难许多，但是原理和基础仍然是这个确定有限自动机（本来 $\text{AC}$ 自动机也是确定有限自动机的一种）。</p><h2 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h2><p>对于一个字符串 $s$，很自然的想法是怎么样将它也能够进行四则运算，也就是将它转换成我们和计算机都更好处理的整数。但是，显然我们要不重不漏地表示每一个字符串是有点难度的。其实，如果字符串长度为 $siz$，那么它将有 $26^{siz}$ 种排列方法，这使得我们弄巧成拙，运算量巨大。但是，如果恰巧我们的字符串数量不是很多，那么我们就可以考虑在 $\pmod{10^9 + 7}$ 的意义下的整数。也就是将这个二十六进制数转化成小于 $10^9+7$ 的整数。这也是我们常说的哈希。</p><p>对于任意的相同的字符串，它们的哈希值总是相同的。这其实还是确定有限自动机的作用（雾）。于是，我们就可以通过前缀和等操作快速求出一个字符串的哈希值，进而比较两个字符串是否一致。</p><p>我们的哈希函数通常使用二十六进制转化的方式，也就是将 $a-z$ 看成 $0-25$，然后进行进制转化转化成十进制进行操作。这样，一个字符串 $c_1c_2c_3\cdots c_{n-1}c_n$ 就变成了 $\sum\limits_{i&#x3D;1}^nc_i^{n-i}$。再进一步研究就会发现，一个字符串内的一个子串 $[l,r]$ 可以表示为 $h_r-h_{l-1}\times 26^{r-l+1}$。不信自己手搓一个试试。</p><p>有了这个强有力的工具之后，我们就可以对字符串进行 $O(1)$ 匹配，大大减小我们的时间复杂度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">char</span> c[])</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">h[i]=(h[i<span class="number">-1</span>]*<span class="number">10</span>+(c[i]-<span class="string">&#x27;a&#x27;</span>))%MOD, H[i]=(H[i<span class="number">-1</span>]*<span class="number">10</span>+(c[i]-<span class="string">&#x27;a&#x27;</span>))%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query1</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (h[r]-h[l<span class="number">-1</span>]*p[r-l+<span class="number">1</span>]+MOD)%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query2</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (H[r]-H[l<span class="number">-1</span>]*P[r-l+<span class="number">1</span>]+mod)%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>另外，我们一般选择两个大质数来进行匹配，这样可以极大减小我们重复的概率。</li></ul><h2 id="Trie（字典树）"><a href="#Trie（字典树）" class="headerlink" title="Trie（字典树）"></a>Trie（字典树）</h2><p>我们希望有一种很好地能够维护多个字符串的数据结构，于是字典树就诞生了：</p><p><img src="https://oi-wiki.org/string/images/trie1.png"></p><p>根据上文描述，这个字典树显然就是许多个字符串插入到一棵树上。比如说，这个图就可能包含但不限于字符串 $aa,aba,ba,caaa,cab,cba,cc$。我们发现，很多个字符串放在一个树上，将相同的前缀当做祖先，那么这棵树也就简而明了的展现出来了。至于这棵树到底有什么用。。。首先，它把许多前缀合并到了一起，大大减少了空间复杂度。其次，它很好地描述了字符串之间前缀关系，在 $\text{AC}$ 自动机的失配跳转时也有重要作用。</p><p>朴素的插入和查询操作都极其容易理解，这里直接放代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ch[N][<span class="number">26</span>], idx;</span><br><span class="line"><span class="type">bool</span> flag[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string s)</span></span>&#123;<span class="comment">//插入</span></span><br><span class="line"><span class="type">int</span> p=<span class="number">0</span>, len=s.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!ch[p][s[i]-<span class="string">&#x27;a&#x27;</span>])ch[p][s[i]-<span class="string">&#x27;a&#x27;</span>]=++idx;</span><br><span class="line">p=ch[p][s[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">flag[p]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">query</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> p=<span class="number">0</span>, len=s.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!ch[p][s[i]-<span class="string">&#x27;a&#x27;</span>])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">p=ch[p][s[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flag[p];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看完代码，是不是感觉眼前一亮：这不也是一个确定有限自动机嘛！没错，$\text{Trie}$ 的本质也是一个确定有限自动机，只不过这个是判断一个字符串在字符串集中存不存在罢了。</p><h2 id="AC-自动机"><a href="#AC-自动机" class="headerlink" title="AC 自动机"></a>AC 自动机</h2><p>在 $\text{KMP}$ 算法中，我们解决了单模式串匹配的问题，但对于多模式串匹配问题，如果我们每一次都跑一遍 $\text{KMP}$，时间复杂度之间变成 $O(n^2)$。因此，我们需要一个更加优秀的算法来完成这个询问。</p><p>显然，我们总需要考虑到所有模式串，因此，我们需要把模式串整合在一起。这就让我们想起了我们之前学过的 $\text{Trie}$ 树。因此，不难想到将所有的模式串建成一棵 $\text{Trie}$ 树，然后再这个上面建立一个自动机来进行匹配，用的时候把文本串放进去跑一遍就可以了。</p><p>考虑如何建立这个自动机。我们发现，$\text{KMP}$ 的精髓就是不断跳 $\text{border}$。也就是说，我们花了最短的时间选出了下一个可能出现的匹配点。同样地，我们也想在 $\text{AC}$ 自动机上写出一个类似的数组，使得每一次失配之后，都可以快速地跳到可能匹配的地方。显然，我们在遍历文本串的时候，都是从前往后找文本串。当我们当前选中的子串无法继续与文本串匹配的时候，会选择当前子串中的能够与模式串一部分匹配的最长后缀进行继续匹配的操作，因为选前缀没有意义，它已经被证明是不能够被匹配的。因此，我们只需要记录 $\text{Trie}$ 树上的每一个节点上，该树上存在的状态使得它是该状态的一个后缀的最大值，就可以快速地进行失配处理了。这里，我们不妨叫这个东西是 $\text{fail}$ 指针。</p><p><img src="https://oi-wiki.org/string/images/ac-automaton4.png"></p><p>这里放一张图，其中黄色的边是 $\text{fail}$ 指针，灰色的边是 $\text{Trie}$ 树上的边。</p><p>现在我们考虑如何求 $\text{fail}$。</p><p>对于一个节点，设它为 $v$，它父亲为 $u$，转移过程为 $\delta(u,c)\to v$显然它的字典树上存在的最长后缀，一定是它父亲的最长后缀（假设是 $fail_u$）经过 $c$ 之后的状态,也就是 $\delta(fail_u,c)$。如果 $\delta(fail_u,c)$ 这个状态并不存在，那么用 $delta(fail_{fail_u},c)$。如果再没有，便进行三次，四次。如果真的没有，那么将它的 $\text{fail}$ 连到根节点。</p><p><img src="https://oi-wiki.org/string/images/ac-automaton1.gif"></p><p>这里放一张动图帮助大家理解 $\text{fail}$ 的构建过程。如图，六号节点的父亲五号节点的 $\text{fail}$ 是 $10$。但是十号节点并没有一个状态可以使用 $s$ 转移，于是查询十号节点的 $\text{fail}$，也就是根节点，连在了根节点经过 $s$ 转以后的七号节点。</p><p>但是，直接放一个 <code>while</code> 上去显然时间复杂度得不到保障。我们考虑可以提前预处理出如果一个节点 $u$ 的 $\text{fail}$ 并没有某些状态时它们会去往何处。对此，如果一个节点没有一个状态 $c$，那么将 $\delta(u,c)$ 连接到 $\delta(fail_u,c)$。注意，这里能够成立的前提是 $fail_u$ 的所有转移状态都已经求出来了。因此，我们需要使用 <code>BFS</code> 一层一层的求。</p><p><img src="https://oi-wiki.org/string/images/ac-automaton2.gif"></p><p>这里仍然放一张图帮助大家理解。黑边是新连出来的状态。</p><p>代码也是既好写又好背：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)</span><br><span class="line">    <span class="keyword">if</span>(t[<span class="number">0</span>][i]) q.<span class="built_in">push</span>(t[<span class="number">0</span>][i]), ++de[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">    <span class="type">int</span> p=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)</span><br><span class="line">        <span class="keyword">if</span>(t[p][i]) fail[t[p][i]]=t[fail[p]][i], q.<span class="built_in">push</span>(t[p][i]);</span><br><span class="line">        <span class="keyword">else</span>    t[p][i]=t[fail[p]][i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是，我们的 $\text{AC}$ 自动机就构建完成了。注意到这里所有的 $\text{Trie}$ 树内 $1-idx$ 的节点的每个转移状态都不为空。也就是说，对于一个在字符集内的字符串，扔进去随便跑就能跑出来答案。</p><p>但是，在答案统计的时候，我们总需要再完成一次匹配之后不断跳失配失配指针来判断有没有该状态的后缀也被匹配。因为该状态后缀在错过这一段之后是无法再被遍历到的，如果可以那复杂度就不对了。尽管跳 $\text{fail}$ 的复杂度也不对，但我们仍然可以利用 $\text{Trie}$ 和 $\text{fail}$ 上的一些良好性质来优化。</p><p>（这里先放不优化的查询函数）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span> c[])</span></span>&#123;</span><br><span class="line"><span class="type">int</span> len=<span class="built_in">strlen</span>(c), p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">p=t[p][c[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="type">int</span> j=p;</span><br><span class="line"><span class="keyword">while</span>(flag[j])ans++flag[j], j=fail[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考虑到，这里跳 $\text{fail}$ 的过程还是有可能退化成 $O(n)$，因此，我们需要进一步优化。</p><p>考虑到跳 $\text{fail}$ 的本质是不断考虑自己的后缀有没有可能是模式串，这个过程其实不着急，因为如果在查询的时候处理会浪费很多时间来跳相同的步骤，因此，我们可以将所有的答案统计出来，然后在结束之后对于所有的节点 $u$，如果它是节点 $v$ 的最长后缀，那么把 <code>ans[u]+=ans[v]</code>。</p><p>这其实就是一个建立 $\text{fail}$ 树的过程。如果一个节点 $v$ 是另一个节点 $u$ 的最长后缀，即 $\text{fail}_u&#x3D;v$，那么建立一条边使得 $v\to u$。于是，我们在 $\text{Trie}$ 树上，通过重新连边，建立起了一棵新的树，不妨叫 $\text{fail}$ 树吧。首先，我们说明它为什么是一棵树。</p><blockquote><p>首先，对于一个节点 $u$，它的 $\text{fail}_u$ 是唯一的，也就是说，它只有一个父亲。</p><p>其次，对于任意一个状态，它的最长后缀在字典树上的深度一定比它小，因此，无论如何跳 $\text{fail}$，它都不可能跳回原来的节点。</p><p>这两点就证明了它是一颗树的形态。</p></blockquote><p>于是接下来就好说了，对于每一个父亲，它的答案就是它在 $\text{fail}$ 树内子树的所有标记的和。这是因为它是它子树内所有状态的后缀。我们使用拓扑排序或者树形 $\text{DP}$ 即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">topu</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=idx;++i)</span><br><span class="line"><span class="keyword">if</span>(de[i]==<span class="number">0</span>)q.<span class="built_in">push</span>(i);</span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line"><span class="type">int</span> p=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">ans[fail[p]]+=ans[p];</span><br><span class="line"><span class="keyword">if</span>(--de[fail[p]]==<span class="number">0</span>)q.<span class="built_in">push</span>(fail[p]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><h3 id="text-fail-树"><a href="#text-fail-树" class="headerlink" title="$\text{fail}$ 树"></a>$\text{fail}$ 树</h3><p>我们已经知道，在建立 $AC$ 自动机的时候，会顺带着求出每个节点的 $fail$。而这个 $fail$，在一个字典树上是一棵树。而我们对这棵 $fail$ 树的操作很多时候都是极其重要的。这是因为 $fail$ 树具有以下重要性质：</p><h4 id="一个节点在-fail-树上到根的路径上的节点，表示所有存在于字典树上的它的后缀状态"><a href="#一个节点在-fail-树上到根的路径上的节点，表示所有存在于字典树上的它的后缀状态" class="headerlink" title="一个节点在 $fail$ 树上到根的路径上的节点，表示所有存在于字典树上的它的后缀状态"></a>一个节点在 $fail$ 树上到根的路径上的节点，表示所有存在于字典树上的它的后缀状态</h4><p>这个很容易理解，我们以前已经讲过了。因此，我们在匹配一个文本串的时候，只需要看它在 $fail$ 树内的子树上有多少个标记即可。但是这需要离线处理，如果在线，就必须使用树剖，每次花费 $\log ^2$ 的时间进行修改它到根节点的路径即可。</p><h3 id="使用-AC-自动机反向匹配"><a href="#使用-AC-自动机反向匹配" class="headerlink" title="使用 $AC$ 自动机反向匹配"></a>使用 $AC$ 自动机反向匹配</h3><p>也就是说，给定模式串，询问是否存在无限长的文本串使得没有任何一个模式串可以匹配。显然，平常的 $AC$ 自动机是尽量匹配，匹配不上再跳失配指针。但是这个问题要求我们尽量跳 $fail$，并且，只要存在一个环使得环上不存在任何一个点能够匹配到模式串，那么它就是可以的。此外，如果一个节点 $u$ 的 $fail_u$ 是模式串，那么它也是不可被匹配的。</p><h3 id="离线询问的-AC-自动机"><a href="#离线询问的-AC-自动机" class="headerlink" title="离线询问的 $AC$ 自动机"></a>离线询问的 $AC$ 自动机</h3><p>当我们不要求用文本串匹配所有的模式串时，我们就可以离线 $AC$ 自动机。例如，我们有询问 $u_i,v_i$ 表示在 $u_i$ 中匹配 $v_i$，那么，这就相当于字典树上遍历到 $u_i$ 时到达根节点的路径上所有的点中，是可以匹配 $v_i$ 的点的数量。也就是说，我们在遍历 $Trie$ 树的时候，只需要在 $fail$ 树上对应的节点 $+1$，查询的时候让 $v_i$ 在对应的点上子树求和即可。</p><h3 id="AC-自动机上-DP"><a href="#AC-自动机上-DP" class="headerlink" title="$AC$ 自动机上 $DP$"></a>$AC$ 自动机上 $DP$</h3><h4 id="最大匹配个数"><a href="#最大匹配个数" class="headerlink" title="最大匹配个数"></a>最大匹配个数</h4><p>给定文本串长度 $k$ 以及模式串，求文本串能够匹配的最大数量。</p><p>一般的思路是设 $f_{x,p}$ 表示到文本串第 $x$ 个地方，且匹配到 $Trie$ 树上 $p$ 点的地方的最大答案。这个时候，对于每一个状态 $(x,p)$，遍历 $Trie$ 上所有的出边进行转移。如果下一个节点可以匹配一些模式串，那么就把答案加上。其中匹配的具体个数可以再处理完 $fail$ 之后使用拓扑排序求出。这样的复杂度是 $O(k\sum\limits |s_i|)$。</p><h4 id="至少匹配一个模式串的方案数"><a href="#至少匹配一个模式串的方案数" class="headerlink" title="至少匹配一个模式串的方案数"></a>至少匹配一个模式串的方案数</h4><p>给定文本串长度 $k$ 以及模式串，求至少匹配一个模式串的文本串数量。</p><p>这里有两种思路：一种是直接求，另一种是总方案数减去不能被任何一个模式串匹配的。我们这里讲解第一种。</p><p>要记录是否有模式串被匹配，我们可以在上一个状态的基础上加一维 $0&#x2F;1$ 表示是否已经匹配了字符串，于是，对于状态 $(x,p,0&#x2F;1)$，我们不难得出以下转移方程：</p><p>$$f_{x,t_{p,i},0}&#x3D;f_{x,p,0}$$</p><p>$$f_{x,t_{p,i},1}&#x3D;f_{x,p,0}\times tag_{x,t_{p,i}}+f_{x,t_{p,i},1}$$</p><p>使用填表即可。</p><h4 id="通配符匹配"><a href="#通配符匹配" class="headerlink" title="通配符匹配"></a>通配符匹配</h4><p>定义两个通配符：</p><ol><li><code>*</code>，可以替代任意 $0-\infty$ 个字符。</li><li><code>?</code>，可以替代一个字符。</li></ol><p>对于这种问题，我们可以在 $Trie$ 上进行 $dfs$。对于一般的文本串字符，我们直接在 $Trie$ 上找寻对应字符即可。对于 <code>?</code>，我们遍历任意一个转移状态即可。对于通配符 $*$，我们把它化解长两个：</p><ul><li>匹配零个字符，即对于文本串 $\text{A*B}$，看成 $\text{AB}$ 继续匹配。</li><li>匹配一个字符，然后再加上一个 <code>*</code>，即对于文本串 $\text{A*B}$，看成 $\text{A?*B}$</li></ul><p>但这样的复杂度显然爆炸，因此我们需要记忆化，即记录 $f_{x,p}$，意义同上，然后每次记录 $(x,p)$，遍历到相同状态就返回，因此复杂度就是 $O(k\sum\limits |s_i|)$。</p><h4 id="最长精准匹配前缀"><a href="#最长精准匹配前缀" class="headerlink" title="最长精准匹配前缀"></a>最长精准匹配前缀</h4><p>给定文本串以及模式串，求文本串中能够被模式串精准匹配的最长前缀。其中，精准匹配指所有匹配可以不重复也不遗漏。</p><p>这里我们就可以使用非常重要的 $fail$ 指针了。我们匹配文本串的一个位置 $x$，可以枚举所有的 $[x-i,x]$，看是否有模式串可以匹配。也就是说，如果 $x$ 可以被匹配，那么对于所有的模式串 $s_i$，$x+|s_i|$ 就可以被匹配。但这里有一个前提，就是文本串种 $t[x\dots x+|s_i|]$ 是必须匹配 $s_i$ 的。这里就需要跳 $fail$ 来进行匹配。但是这里跳 $fail$ 还是会 $TLE$，又注意到这里模式串的长度都很小，因此显然可以直接状态压缩，在一个状态 $state_x$ 中，如果字典树上节点 $x$ 的某一个 $fail$ 中的长度为 $i$，那么第 $i$ 位就是 $1$，否则为 $0$。这样，在 $DP$ 的时候，再记录一个 $sta$ 表示之前有哪些位是 $1$，两个地方进行按位与操作即可得知当前是否可行。在可行状态中取最大值即可。</p><h2 id="习题讲解"><a href="#习题讲解" class="headerlink" title="习题讲解"></a>习题讲解</h2><h3 id="阿狸的打字机"><a href="#阿狸的打字机" class="headerlink" title="阿狸的打字机"></a>阿狸的打字机</h3><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><p>给定一些字符串，并且有一些询问，每次询问可以表示为 $(x,y)$，即 $y$ 中含有的 $x$ 的次数。</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>我们先不考虑细节，第一次上来先莽暴力。考虑我们在建立 $\text{Trie}$ 树之后，对于每一个询问，在 $\text{AC}$ 上跑一遍，然后就可以求出答案。但是，考虑到这里的插入方式并不一般。如果前面全在插入，后面都是 <code>P</code>，那么每一次打印都是 $10^5$ 量级的。因此，我们字符串都存不下来，更别说跑完了。</p><p>那我们该如何优化？</p><p>考虑在字典树上的一个状态 $x$，它到根节点的那一条链上包含所有 $x$ 的前缀，而它们在 $\text{fail}$ 树上的子树内又包含它们所有是模式串的后缀。因此，所有前缀的后缀就包含了 $x$ 的所有子串，所以，在统计答案的时候，我们只需要把根节点到 $x$ 的路径上的所有点答案加上，再使用 $\text{fail}$ 树的子树和统计一下，就可以得到所有以 $x$ 状态为文本串的询问的答案。而这个工作可以提前遍历 $\text{fail}$ 树，求出 $dfn$ 然后进行子树求和。使用树状数组即可。</p><p>另外，一个细节的地方是我们插入不可以使用平常的插入。因为插入的量级很可能达到 $O(n^2)$。因此，我们再维护一个 $\text{fa}$ 数组来模拟命令中的 $B$ 操作。然后正常插入标记即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> c[N];</span><br><span class="line">vector&lt;PII&gt; ques[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> AC&#123;</span><br><span class="line">    <span class="type">int</span> t[N][<span class="number">26</span>], idx = <span class="number">1</span>, flag[N], fail[N], fa[N] = &#123;<span class="number">0</span>,<span class="number">1</span>&#125;, n, rk[N];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> c[])</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> len=<span class="built_in">strlen</span>(c), p=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c[i]==<span class="string">&#x27;B&#x27;</span>)   p=fa[p];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c[i]==<span class="string">&#x27;P&#x27;</span>)  flag[p]=++n, rk[n]=p;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(t[p][c[i]-<span class="string">&#x27;a&#x27;</span>])  p=t[p][c[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">                <span class="keyword">else</span>    t[p][c[i]-<span class="string">&#x27;a&#x27;</span>]=++idx, fa[idx]=p, p=t[p][c[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)</span><br><span class="line">            <span class="keyword">if</span>(t[<span class="number">1</span>][i]) q.<span class="built_in">push</span>(t[<span class="number">1</span>][i]), fail[t[<span class="number">1</span>][i]]=<span class="number">1</span>;</span><br><span class="line">        fail[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="type">int</span> p=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)</span><br><span class="line">                <span class="keyword">if</span>(t[p][i])&#123;</span><br><span class="line">                    <span class="type">int</span> tmp=p;</span><br><span class="line">                    <span class="keyword">while</span>(!t[fail[tmp]][i]&amp;&amp;tmp!=<span class="number">1</span>)    tmp=fail[tmp];</span><br><span class="line">                    <span class="keyword">if</span>(tmp==<span class="number">1</span>)  fail[t[p][i]]=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span>    fail[t[p][i]]=t[fail[tmp]][i];</span><br><span class="line">                    q.<span class="built_in">push</span>(t[p][i]);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> BIT&#123;</span><br><span class="line">    <span class="type">int</span> b[N];</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123; <span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=AC::idx;i+=<span class="built_in">lowbit</span>(i))   b[i]+=k;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123; <span class="type">int</span> ans=<span class="number">0</span>; <span class="keyword">for</span>(<span class="type">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))    ans+=b[i]; <span class="keyword">return</span> ans;&#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">undef</span> lowbit</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fa[N], siz[N], dfn[N], rk[N], idx;</span><br><span class="line"><span class="type">int</span> ans[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fat)</span></span>&#123;</span><br><span class="line">    fa[x]=fat; dfn[x]=++idx; rk[idx]=x; siz[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();++i)</span><br><span class="line">        <span class="keyword">if</span>(g[x][i]!=fat)    <span class="built_in">dfs1</span>(g[x][i],x), siz[x]+=siz[g[x][i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    BIT::<span class="built_in">update</span>(dfn[x],<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(AC::flag[x])&#123;</span><br><span class="line">        <span class="type">int</span> xx=AC::flag[x];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ques[xx].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="type">int</span> y=AC::rk[ques[xx][i].fi], z=ques[xx][i].se;</span><br><span class="line">            ans[z]=BIT::<span class="built_in">query</span>(dfn[y]+siz[y]<span class="number">-1</span>)-BIT::<span class="built_in">query</span>(dfn[y]<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)</span><br><span class="line">        <span class="keyword">if</span>(AC::t[x][i]) <span class="built_in">dfs2</span>(AC::t[x][i]);</span><br><span class="line">    BIT::<span class="built_in">update</span>(dfn[x],<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;c; AC::<span class="built_in">insert</span>(c); cin&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x,y;i&lt;=m;++i)</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y, ques[y].<span class="built_in">pb</span>(<span class="built_in">mk</span>(x,i));</span><br><span class="line">    AC::<span class="built_in">build</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=AC::idx;++i)</span><br><span class="line">        g[i].<span class="built_in">pb</span>(AC::fail[i]), g[AC::fail[i]].<span class="built_in">pb</span>(i);</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Crosspain"><a href="#Crosspain" class="headerlink" title="Crosspain"></a>Crosspain</h3><h4 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h4><p>给定一些操作，每个操作可以描述为 $(op,hoc,s)$。它表示：</p><ul><li>当 $op$ 为 $1$ 时，表示在版本 $hoc$ 上加入一个字符串 $s$ 后形成新的版本 $i$。</li><li>当 $op$ 为 $2$ 时，表示把版本 $hoc$ 完全搬过来变成当前版本 $i$，然后在当前版本中查询所有模式串在文本串 $s$ 中出现了多少次。</li></ul><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>首先，本题应该有可持久化 $\text{AC}$ 自动机的做法，但是本题不要求强制在线，因此可以考虑离线处理。</p><p>介绍一个叫做时光树的东西。对于现在操作 $i$，我们需要引用以前的版本 $hoc$，那么我们就建立边 $(hoc,i)$。这样，我们在时光树上 $\text{DFS}$ 的时候，就可以只需要考虑添加和撤销当前操作而不需要回溯之前版本。</p><p>值得注意的是，我们并不需要求每个模式串具体出现了多少次，而是只需要求一共出现了多少次，那么当遍历到一个节点 $p$ 时，$p$ 在 $\text{fail}$ 树上到根节点的路径上的权值和就是它的贡献。考虑如何进行添加操作。加上一个字符串，显然就是在它结尾地方的 $\text{fail}$ 树上加 $1$。也就是说，现在这个地方有一个模式串可以被匹配，那么在到根节点路径求和的时候就可以把这个地方加上去。但是，这个单点修改路径求和的操作需要树剖，代码难度有点大，因此我们考虑使用一些技巧优化。在修改的时候，修改一个点显然只会对子树内造成影响，因此我们让子树整体加一，而查询的时候只需要单点查询即可。然后这个子树加又可以使用 $\text{dfn}$ 和差分优化成单点修改，然后求前缀的和。使用 <code>BIT</code> 即可解决。另外，撤销操作就是添加的逆操作。</p><p><del>代码真的挺简单的，一遍A了。</del></p><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,op[N],ans[N];</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line">vector&lt;<span class="type">char</span>&gt; c[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; times[N], g[N];</span><br><span class="line"><span class="type">int</span> dfn[N], siz[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> AC&#123;</span><br><span class="line"><span class="type">int</span> t[M][<span class="number">26</span>], fail[M], flag[M], idx=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> c[],<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> len=<span class="built_in">strlen</span>(c+<span class="number">1</span>), p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;++i)p=t[p][c[i]-<span class="string">&#x27;a&#x27;</span>]?t[p][c[i]-<span class="string">&#x27;a&#x27;</span>]:(t[p][c[i]-<span class="string">&#x27;a&#x27;</span>]=++idx);</span><br><span class="line">flag[id]=p;</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)</span><br><span class="line"><span class="keyword">if</span>(t[<span class="number">0</span>][i])q.<span class="built_in">push</span>(t[<span class="number">0</span>][i]);</span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line"><span class="type">int</span> p=q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)</span><br><span class="line"><span class="keyword">if</span>(t[p][i])fail[t[p][i]]=t[fail[p]][i], q.<span class="built_in">push</span>(t[p][i]);</span><br><span class="line"><span class="keyword">else</span>t[p][i]=t[fail[p]][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=idx;++i)</span><br><span class="line">g[fail[i]].<span class="built_in">pb</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> BIT&#123;</span><br><span class="line"><span class="type">int</span> b[M];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123; <span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=idx;i+=<span class="built_in">lowbit</span>(i))b[i]+=k;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123; <span class="type">int</span> ans=<span class="number">0</span>; <span class="keyword">for</span>(<span class="type">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))ans+=b[i]; <span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> lowbit</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">dfn[x]=++idx, siz[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y:g[x])</span><br><span class="line"><span class="built_in">dfs1</span>(y), siz[x]+=siz[y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">char</span> i:c[x])&#123;</span><br><span class="line">p=AC::t[p][i-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">ans[x]+=BIT::<span class="built_in">query</span>(dfn[p]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(op[x]==<span class="number">1</span>)BIT::<span class="built_in">update</span>(dfn[AC::flag[x]],<span class="number">1</span>), BIT::<span class="built_in">update</span>(dfn[AC::flag[x]]+siz[AC::flag[x]],<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">else</span><span class="built_in">query</span>(x);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y:times[x])<span class="built_in">dfs2</span>(y);</span><br><span class="line"><span class="keyword">if</span>(op[x]==<span class="number">1</span>)BIT::<span class="built_in">update</span>(dfn[AC::flag[x]],<span class="number">-1</span>), BIT::<span class="built_in">update</span>(dfn[AC::flag[x]]+siz[AC::flag[x]],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x;i&lt;=n;++i)&#123;</span><br><span class="line">cin&gt;&gt;op[i]&gt;&gt;x&gt;&gt;(s+<span class="number">1</span>);</span><br><span class="line">times[x].<span class="built_in">pb</span>(i);</span><br><span class="line"><span class="keyword">if</span>(op[i]==<span class="number">1</span>)AC::<span class="built_in">insert</span>(s,i);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">c[i].<span class="built_in">resize</span>(len);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=len;++j)</span><br><span class="line">c[i][j<span class="number">-1</span>]=s[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">AC::<span class="built_in">build</span>();</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">if</span>(op[i]==<span class="number">2</span>)cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自动机&quot;&gt;&lt;a href=&quot;#自动机&quot; class=&quot;headerlink&quot; title=&quot;自动机&quot;&gt;&lt;/a&gt;自动机&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;什么是自动机&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于一个字符串问题，我们需要设计好一种状态集</summary>
      
    
    
    
    
    <category term="算法笔记" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
